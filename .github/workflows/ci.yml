name: CI

on:
  push:
  # XXX: Temporary
  # branches:
  #   - master
  #   - release/**
  #   - release-library/**

  pull_request:

env:
  RUSTFLAGS: -Dwarnings

jobs:
  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: recursive

  #     - uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.7

  #     - name: Install Dependencies
  #       run: pip install -U -r requirements-dev.txt

  #     - name: Run Black
  #       run: black --check py tests --exclude '\.eggs|sentry_relay/_lowlevel.*'

  #     - name: Run Flake8
  #       run: flake8 py

  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         components: clippy, rustfmt
  #         override: true

  #     - uses: swatinem/rust-cache@v1
  #       with:
  #         key: ${{ github.job }}

  #     - name: Run Rustfmt
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: fmt
  #         args: --all -- --check

  #     - name: Run Clippy
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: clippy
  #         args: --workspace --all-features --tests -- -D clippy::all

  # test:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [macos-latest, windows-latest]

  #   name: Test (${{ matrix.os }})
  #   runs-on: ${{ matrix.os }}

  #   # Skip redundant checks for library releases
  #   if: "!startsWith(github.ref, 'refs/heads/release-library/')"

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: recursive

  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         override: true

  #     - uses: swatinem/rust-cache@v1
  #       with:
  #         key: ${{ github.job }}

  #     - name: Run Cargo Tests
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: test
  #         args: --workspace

  # test_all:
  #   name: Test All Features (ubuntu-latest)
  #   runs-on: ubuntu-latest

  #   # Skip redundant checks for library releases
  #   if: "!startsWith(github.ref, 'refs/heads/release-library/')"

  #   # Testing all features requires Docker container operations that are only available on
  #   # `ubuntu-latest`. This `test-all` job is to be seen as complementary to the `test` job. If
  #   # services become available on other platforms, the jobs should be consolidated. See
  #   # https://docs.github.com/en/actions/guides/about-service-containers

  #   services:
  #     redis: # https://docs.github.com/en/actions/guides/creating-redis-service-containers
  #       image: redis
  #       ports:
  #         - 6379:6379

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: recursive

  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         override: true

  #     - uses: swatinem/rust-cache@v1
  #       with:
  #         key: ${{ github.job }}

  #     - name: Run Cargo Tests
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: test
  #         args: --workspace --all-features

  # test_py:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       python-version: [3.7]

  #   # Skip redundant checks for binary releases
  #   if: "!startsWith(github.ref, 'refs/heads/release/')"

  #   name: Test Python ${{ matrix.python-version }}
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: recursive

  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         override: true

  #     - uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Install Dependencies
  #       run: pip install -U pytest

  #     - uses: swatinem/rust-cache@v1
  #       with:
  #         key: ${{ github.job }}

  #     - name: Build and Install Library
  #       run: pip install -v --editable py
  #       env:
  #         RELAY_DEBUG: 1

  #     - name: Run Python Tests
  #       run: pytest -v py

  # test_integration:
  #   name: Integration Tests
  #   runs-on: ubuntu-latest

  #   # Skip redundant checks for library releases
  #   if: "!startsWith(github.ref, 'refs/heads/release-library/')"

  #   services:
  #     redis: # https://docs.github.com/en/actions/guides/creating-redis-service-containers
  #       image: redis
  #       ports:
  #         - 6379:6379

  #     zookeeper:
  #       image: confluentinc/cp-zookeeper
  #       env:
  #         ZOOKEEPER_CLIENT_PORT: 2181

  #     kafka:
  #       image: confluentinc/cp-kafka
  #       env:
  #         KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #         KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
  #         KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #         KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 1
  #       ports:
  #         - 9092:9092

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: recursive

  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         override: true

  #     - uses: swatinem/rust-cache@v1
  #       with:
  #         key: ${{ github.job }}

  #     - name: Cargo build
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: build
  #         args: --all-features

  #     - uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.7

  #     - name: Install dependencies
  #       run: pip install -U -r requirements-test.txt

  #     - name: Run tests
  #       run: pytest tests -n auto -v

  test_latest_sentry_integration:
    name: Sentry Integration Tests
    runs-on: ubuntu-latest

    services:
      redis: # https://docs.github.com/en/actions/guides/creating-redis-service-containers
        image: redis
        ports:
          - 6379:6379

      zookeeper:
        image: confluentinc/cp-zookeeper
        env:
          ZOOKEEPER_CLIENT_PORT: 2181

      kafka:
        image: confluentinc/cp-kafka
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 1
        ports:
          - 9092:9092

      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # - name: Checkout Relay
      #   uses: actions/checkout@v2
      #   with:
      #     submodules: recursive

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      # - uses: swatinem/rust-cache@v1
      #   with:
      #     key: ${{ github.job }}

      # - name: Cargo build
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: build
      #     args: --all-features

      # Checkout Sentry and run integreation tests against latest Relay
      - name: Checkout sentry
        uses: actions/checkout@v2
        with:
          repository: "getsentry/sentry"
          path: sentry

      - uses: actions/setup-python@v2
        with:
          python-version: 3.6

      # The next few steps are to set up the cache quickly
      - name: Set pip cache dir
        id: info
        # Upgrade pip because older versions don't have `pip cache dir`
        run: |
          pip3 install --upgrade pip
          echo "::set-output name=pip-cache-dir::$(pip3 cache dir)"

      - name: Cache (pip)
        uses: actions/cache@v2
        with:
          path: ${{ steps.info.outputs.pip-cache-dir }}
          key: sentry-deps-${{ hashFiles('**/requirements**.txt') }}
          restore-keys: sentry-deps-

      - name: Set up Sentry
        working-directory: sentry
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libxmlsec1-dev \
            libmaxminddb-dev
          python -m venv .venv
          source .venv/bin/activate
          make install-py-dev

      - name: Run Sentry integration tests
        working-directory: sentry
        run: |
          source .venv/bin/activate
          sentry devservices up snuba
          make test-relay-integration
