name: CI

on:
  push:
  # XXX: Temporary
  # branches:
  #   - master
  #   - release/**
  #   - release-library/**

  pull_request:

env:
  RUSTFLAGS: -Dwarnings

jobs:
  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: recursive

  #     - uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.7

  #     - name: Install Dependencies
  #       run: pip install -U -r requirements-dev.txt

  #     - name: Run Black
  #       run: black --check py tests --exclude '\.eggs|sentry_relay/_lowlevel.*'

  #     - name: Run Flake8
  #       run: flake8 py

  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         components: clippy, rustfmt
  #         override: true

  #     - uses: swatinem/rust-cache@v1
  #       with:
  #         key: ${{ github.job }}

  #     - name: Run Rustfmt
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: fmt
  #         args: --all -- --check

  #     - name: Run Clippy
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: clippy
  #         args: --workspace --all-features --tests -- -D clippy::all

  # test:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [macos-latest, windows-latest]

  #   name: Test (${{ matrix.os }})
  #   runs-on: ${{ matrix.os }}

  #   # Skip redundant checks for library releases
  #   if: "!startsWith(github.ref, 'refs/heads/release-library/')"

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: recursive

  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         override: true

  #     - uses: swatinem/rust-cache@v1
  #       with:
  #         key: ${{ github.job }}

  #     - name: Run Cargo Tests
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: test
  #         args: --workspace

  # test_all:
  #   name: Test All Features (ubuntu-latest)
  #   runs-on: ubuntu-latest

  #   # Skip redundant checks for library releases
  #   if: "!startsWith(github.ref, 'refs/heads/release-library/')"

  #   # Testing all features requires Docker container operations that are only available on
  #   # `ubuntu-latest`. This `test-all` job is to be seen as complementary to the `test` job. If
  #   # services become available on other platforms, the jobs should be consolidated. See
  #   # https://docs.github.com/en/actions/guides/about-service-containers

  #   services:
  #     redis: # https://docs.github.com/en/actions/guides/creating-redis-service-containers
  #       image: redis
  #       ports:
  #         - 6379:6379

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: recursive

  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         override: true

  #     - uses: swatinem/rust-cache@v1
  #       with:
  #         key: ${{ github.job }}

  #     - name: Run Cargo Tests
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: test
  #         args: --workspace --all-features

  # test_py:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       python-version: [3.7]

  #   # Skip redundant checks for binary releases
  #   if: "!startsWith(github.ref, 'refs/heads/release/')"

  #   name: Test Python ${{ matrix.python-version }}
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: recursive

  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         override: true

  #     - uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Install Dependencies
  #       run: pip install -U pytest

  #     - uses: swatinem/rust-cache@v1
  #       with:
  #         key: ${{ github.job }}

  #     - name: Build and Install Library
  #       run: pip install -v --editable py
  #       env:
  #         RELAY_DEBUG: 1

  #     - name: Run Python Tests
  #       run: pytest -v py

  # test_integration:
  #   name: Integration Tests
  #   runs-on: ubuntu-latest

  #   # Skip redundant checks for library releases
  #   if: "!startsWith(github.ref, 'refs/heads/release-library/')"

  #   services:
  #     redis: # https://docs.github.com/en/actions/guides/creating-redis-service-containers
  #       image: redis
  #       ports:
  #         - 6379:6379

  #     zookeeper:
  #       image: confluentinc/cp-zookeeper
  #       env:
  #         ZOOKEEPER_CLIENT_PORT: 2181

  #     kafka:
  #       image: confluentinc/cp-kafka
  #       env:
  #         KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #         KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
  #         KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #         KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 1
  #       ports:
  #         - 9092:9092

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: recursive

  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         override: true

  #     - uses: swatinem/rust-cache@v1
  #       with:
  #         key: ${{ github.job }}

  #     - name: Cargo build
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: build
  #         args: --all-features

  #     - uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.7

  #     - name: Install dependencies
  #       run: pip install -U -r requirements-test.txt

  #     - name: Run tests
  #       run: pytest tests -n auto -v

  test_latest_sentry_integration:
    name: Sentry Integration Tests
    runs-on: ubuntu-latest

    steps:
      # - name: Checkout Relay
      #   uses: actions/checkout@v2
      #   with:
      #     submodules: recursive

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      # - uses: swatinem/rust-cache@v1
      #   with:
      #     key: ${{ github.job }}

      # - name: Cargo build
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: build
      #     args: --all-features

      # Checkout Sentry and run integreation tests against latest Relay
      - name: Checkout sentry
        uses: actions/checkout@v2
        with:
          repository: "getsentry/sentry"
          path: sentry

      - uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Prep steps
        id: info
        # Upgrade pip because older versions don't have `pip cache dir`
        run: |
          pip3 install --upgrade pip
          echo "::set-output name=pip-cache-dir::$(pip3 cache dir)"
          mkdir -p .github/actions/setup-sentry/
          cp ../sentry/.github/actions/setup-sentry/action.yml .github/actions/setup-sentry/action.yml

      - name: Cache (pip)
        uses: actions/cache@v2
        with:
          path: ${{ steps.info.outputs.pip-cache-dir }}
          key: sentry-deps-${{ hashFiles('**/requirements**.txt') }}
          restore-keys: sentry-deps-

      - name: Setup sentry env
        uses: ./.github/actions/setup-sentry
        id: setup
        with:
          snuba: true
          kafka: true

      # XXX: Can we run the action from Sentry?
      # - name: Set up Sentry
      #   working-directory: sentry
      #   env:
      #     PIP_DISABLE_PIP_VERSION_CHECK: 1
      #     MIGRATIONS_TEST_MIGRATE: 0
      #     NODE_ENV: development
      #     NODE_OPTIONS: --max-old-space-size=4096
      #     SENTRY_LIGHT_BUILD: 1
      #     SENTRY_SKIP_BACKEND_VALIDATION: 1
      #     PYTEST_SENTRY_DSN: https://6fd5cfea2d4d46b182ad214ac7810508@sentry.io/2423079
      #     PYTEST_ADDOPTS: --reruns 5
      #   run: |
      #     [ "$GITHUB_REF" = "refs/heads/master" ] && export PYTEST_SENTRY_ALWAYS_REPORT=1
      #     sudo apt-get update
      #     sudo apt-get install -y --no-install-recommends \
      #       libxmlsec1-dev \
      #       libmaxminddb-dev
      #     python -m venv .venv
      #     source .venv/bin/activate
      #     make install-py-dev
      #     sentry init
      #     sentry devservices up postgres redis snuba
      #     docker run \
      #       --name sentry_zookeeper \
      #       -d --network host \
      #       -e ZOOKEEPER_CLIENT_PORT=2181 \
      #       confluentinc/cp-zookeeper:4.1.0
      #     docker run \
      #       --name sentry_kafka \
      #       -d --network host \
      #       -e KAFKA_ZOOKEEPER_CONNECT=127.0.0.1:2181 \
      #       -e KAFKA_LISTENERS=INTERNAL://0.0.0.0:9093,EXTERNAL://0.0.0.0:9092 \
      #       -e KAFKA_ADVERTISED_LISTENERS=INTERNAL://127.0.0.1:9093,EXTERNAL://127.0.0.1:9092 \
      #       -e KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT \
      #       -e KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL \
      #       -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
      #       confluentinc/cp-kafka:5.1.2

      - name: Run Sentry integration tests
        working-directory: sentry
        run: |
          make test-relay-integration
