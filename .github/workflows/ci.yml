name: CI

on:
  push:
    branches:
      - master
      - release/**
      - release-library/**

  pull_request:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: stable
          profile: minimal
          components: clippy, rustfmt
          override: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: lint-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace --all-features --tests -- -D clippy::all

  test:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]

    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    # Skip redundant checks for library releases
    if: "!startsWith(github.ref, 'refs/heads/release-library/')"

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: test-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Cargo Tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace

  test_all:
    name: Test All Features (ubuntu-latest)
    runs-on: ubuntu-latest

    # Skip redundant checks for library releases
    if: "!startsWith(github.ref, 'refs/heads/release-library/')"

    # Testing all features requires Docker container operations that are only available on
    # `ubuntu-latest`. This `test-all` job is to be seen as complementary to the `test` job. If
    # services become available on other platforms, the jobs should be consolidated. See
    # https://docs.github.com/en/actions/guides/about-service-containers

    services:
      redis: # https://docs.github.com/en/actions/guides/creating-redis-service-containers
        image: redis
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: test-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Cargo Tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --all-features

  test_py:
    strategy:
      fail-fast: false
      matrix:
        python-version: [2.7, 3.7]

    # Skip redundant checks for binary releases
    if: "!startsWith(github.ref, 'refs/heads/release/')"

    name: Test Python ${{ matrix.python-version }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: pip install -U pytest

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: pytest-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build and Install Library
        run: pip install -v --editable py
        env: RELAY_DEBUG=1

      - name: Run Python Tests
        run: pytest -v py

  test_integration:
    name: Integration Tests
    runs-on: ubuntu-latest

    # Skip redundant checks for library releases
    if: "!startsWith(github.ref, 'refs/heads/release-library/')"

    services:
      redis: # https://docs.github.com/en/actions/guides/creating-redis-service-containers
        image: redis
        ports:
          - 6379:6379

      zookeeper:
        image: confluentinc/cp-zookeeper
        env:
          ZOOKEEPER_CLIENT_PORT: 2181

      kafka:
        image: confluentinc/cp-kafka
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: integration-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-features

      - uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install dependencies
        run: pip install -U -r requirements-test.txt

      - name: Run tests
        run: pytest tests -n auto -v

  build_linux:
    name: Build (Linux)
    runs-on: ubuntu-latest

    # Only build on binary release branches
    # if: "startsWith(github.ref, 'refs/heads/release/')"

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      # - name: Build in Docker
      #   run: scripts/docker-build-linux.sh
      #   env:
      #     BUILD_ARCH: x86_64

      - uses: actions/setup-node@v1

      - name: Upload to Zeus
        env:
          ZEUS_API_TOKEN: ${{ secrets.ZEUS_API_TOKEN }}
          ZEUS_HOOK_BASE: ${{ secrets.ZEUS_HOOK_BASE }}
        run: |
          npx -p "@zeus-ci/cli" zeus job update -b $GITHUB_RUN_ID -j $GITHUB_RUN_NUMBER -r $GITHUB_SHA
          npx -p "@zeus-ci/cli" zeus upload -b $GITHUB_RUN_ID -j $GITHUB_RUN_NUMBER  -t "application/octet-stream" -n Cargo.toml Cargo.toml
          # npx -p "@zeus-ci/cli" zeus upload -b $GITHUB_RUN_ID -j $GITHUB_RUN_NUMBER  -t "application/octet-stream" -n relay-Linux-x86_64 target/x86_64-unknown-linux-gnu/release/relay
          # npx -p "@zeus-ci/cli" zeus upload -b $GITHUB_RUN_ID -j $GITHUB_RUN_NUMBER  -t "application/octet-stream" -n relay-Linux-x86_64-debug.zip relay-debug.zip
          npx -p "@zeus-ci/cli" zeus job update --status=passed -b $GITHUB_RUN_ID -j $GITHUB_RUN_NUMBER -r $GITHUB_SHA

  cargo_docs:
    name: Cargo Docs
    if: "!startsWith(github.ref, 'refs/heads/release')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: stable
          profile: minimal
          components: rust-docs
          override: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: doc-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}

      - run: make doc

      - name: Deploy
        if: github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: target/doc

  event_schema:
    name: Event Schema
    if: "!startsWith(github.ref, 'refs/heads/release')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: schema-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Generate Schema
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: -p generate-schema -- -o event.schema.json

      - name: Deploy
        if: github.ref == 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ secrets.DATA_SCHEMAS_GITHUB_TOKEN }}
        run: |
          git config --global user.name "$(git log -1 --pretty=format:%an $GITHUB_SHA)"
          git config --global user.email "$(git log -1 --pretty=format:%ae $GITHUB_SHA)"
          git clone https://getsentry-bot:$GITHUB_TOKEN@github.com/getsentry/sentry-data-schemas
          cd sentry-data-schemas/
          mkdir -p ./relay/
          mv ../event.schema.json relay/event.schema.json
          git add relay/event.schema.json

          echo "attempting commit"
          if ! git commit -m "getsentry/relay@$GITHUB_SHA" ; then
            echo "Stopping, no changes"
            exit 0
          fi

          for i in 1 2 3 4 5; do
            echo "git push; Attempt $i"
            if git push; then
              exit 0
            fi

            git pull --rebase
          done

          echo "Failed to push"
          exit 1

  metrics_docs:
    name: Metrics Docs
    if: "!startsWith(github.ref, 'refs/heads/release')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: metrics-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Document Metrics
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: -p document-metrics -- -o relay_metrics.json

      - name: Deploy
        if: github.ref == 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ secrets.DATA_SCHEMAS_GITHUB_TOKEN }}
        run: |
          git config --global user.name "$(git log -1 --pretty=format:%an $GITHUB_SHA)"
          git config --global user.email "$(git log -1 --pretty=format:%ae $GITHUB_SHA)"
          git clone https://getsentry-bot:$GITHUB_TOKEN@github.com/getsentry/sentry-docs
          cd sentry-docs/
          mv ../relay_metrics.json src/data/relay_metrics.json
          git add src/data/relay_metrics.json

          echo "attempting commit"
          if ! git commit -m "getsentry/relay@$GITHUB_SHA" ; then
            echo "Stopping, no changes"
            exit 0
          fi

          for i in 1 2 3 4 5; do
            echo "git push; Attempt $i"
            if git push; then
              exit 0
            fi

            git pull --rebase
          done

          echo "Failed to push"
          exit 1
