name: CI

on:
  push:
    branches:
      - master
      - release/**
      - release-library/**

  pull_request:

env:
  RUSTFLAGS: -Dwarnings

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install Dependencies
        run: pip install -U -r requirements-dev.txt

      - name: Run Black
        run: black --check py tests --exclude '\.eggs|sentry_relay/_lowlevel.*'

      - name: Run Flake8
        run: flake8 py

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: clippy, rustfmt
          override: true

      - uses: swatinem/rust-cache@v1
        with:
          key: ${{ github.job }}

      - name: Run Rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --workspace --all-features --tests -- -D clippy::all

  test:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]

    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    # Skip redundant checks for library releases
    if: "!startsWith(github.ref, 'refs/heads/release-library/')"

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: swatinem/rust-cache@v1
        with:
          key: ${{ github.job }}

      - name: Run Cargo Tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace

  test_all:
    name: Test All Features (ubuntu-latest)
    runs-on: ubuntu-latest

    # Skip redundant checks for library releases
    if: "!startsWith(github.ref, 'refs/heads/release-library/')"

    # Testing all features requires Docker container operations that are only available on
    # `ubuntu-latest`. This `test-all` job is to be seen as complementary to the `test` job. If
    # services become available on other platforms, the jobs should be consolidated. See
    # https://docs.github.com/en/actions/guides/about-service-containers

    services:
      redis: # https://docs.github.com/en/actions/guides/creating-redis-service-containers
        image: redis
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: swatinem/rust-cache@v1
        with:
          key: ${{ github.job }}

      - name: Run Cargo Tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --all-features

  test_py:
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]

    # Skip redundant checks for binary releases
    if: "!startsWith(github.ref, 'refs/heads/release/')"

    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: pip install -U pytest

      - uses: swatinem/rust-cache@v1
        with:
          key: ${{ github.job }}

      - name: Build and Install Library
        run: pip install -v --editable py
        env:
          RELAY_DEBUG: 1

      - name: Run Python Tests
        run: pytest -v py

  test_integration:
    name: Integration Tests
    runs-on: ubuntu-latest

    # Skip redundant checks for library releases
    if: "!startsWith(github.ref, 'refs/heads/release-library/')"

    services:
      redis: # https://docs.github.com/en/actions/guides/creating-redis-service-containers
        image: redis
        ports:
          - 6379:6379

      zookeeper:
        image: confluentinc/cp-zookeeper
        env:
          ZOOKEEPER_CLIENT_PORT: 2181

      kafka:
        image: confluentinc/cp-kafka
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 1
        ports:
          - 9092:9092

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: swatinem/rust-cache@v1
        with:
          key: ${{ github.job }}

      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-features

      - uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install dependencies
        run: pip install -U -r requirements-test.txt

      - name: Run tests
        run: pytest tests -n auto -v
        env:
          RELAY_VERSION_CHAIN: '20.6.0,latest'

  sentry-relay-integration-tests:
    name: Sentry-Relay Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      # https://docs.docker.com/develop/develop-images/build_enhancements/
      DOCKER_BUILDKIT: 1

    steps:
      - name: Checkout Relay
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Get branch name
        id: branch
        # strip `refs/heads/` from $GITHUB_REF and replace `/` with `-` so that
        # it can be used as a docker tag
        run: echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/} | tr / -)"

      # We are only using ghcr here for CI as `setup-gcloud` is a bit slow
      # Should revisit this when we move off of google cloud build (we may want to move these to GCR)
      - name: Registry login
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Build relay-deps images
        run: |
          docker pull ghcr.io/getsentry/relay-deps-ci:latest || true
          # We build it with BUILDKIT_INLINE_CACHE=1 in order to be usable with --cache-from
          docker build . \
            -f docker/Dockerfile.relay-deps \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -t ghcr.io/getsentry/relay-deps-ci:latest \
            --target relay-deps
          docker push ghcr.io/getsentry/relay-deps-ci:latest

      # These are pulled in order to be able to use docker layer caching
      - name: Pull images
        run: |
          docker pull ghcr.io/getsentry/relay-ci:$GITHUB_SHA || \
            docker pull ghcr.io/getsentry/relay-ci:${{ steps.branch.outputs.branch }} || \
            docker pull ghcr.io/getsentry/relay-ci:latest || true

      - name: Build Relay Docker image for CI
        id: docker
        run: |
          docker build . \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -t ghcr.io/getsentry/relay-ci:latest \
            -t ghcr.io/getsentry/relay-ci:${{ github.sha }} \
            -t ghcr.io/getsentry/relay-ci:${{ steps.branch.outputs.branch }} \
            --cache-from ghcr.io/getsentry/relay-ci:latest \
            --cache-from ghcr.io/getsentry/relay-ci:${{ steps.branch.outputs.branch }} \
            --cache-from ghcr.io/getsentry/relay-ci:${{ github.sha }}
          echo "::set-output name=image::ghcr.io/getsentry/relay-ci:$GITHUB_SHA"

      - name: Publish images for cache
        run: |
          docker push ghcr.io/getsentry/relay-ci:${{ steps.branch.outputs.branch }}
          docker push ghcr.io/getsentry/relay-ci:${{ github.sha }}
          docker push ghcr.io/getsentry/relay-ci:latest

      # Checkout Sentry and run integration tests against latest Relay
      - name: Checkout sentry
        uses: actions/checkout@v2
        with:
          repository: getsentry/sentry
          # XXX: Temporary change
          ref: armenzg/sentry-setup-action-minor-changes
          path: sentry

      - uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Setup steps
        id: setup
        run: |
          pip install --upgrade pip wheel
          echo "::set-output name=pip-cache-dir::$(pip cache dir)"
          # We cannot execute actions that are not placed under .github of the main repo
          mkdir -p .github/actions/setup-sentry/
          cp sentry/.github/actions/setup-sentry/action.yml .github/actions/setup-sentry/action.yml

      - name: Sentry's pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.setup.outputs.pip-cache-dir }}
          key: sentry-deps-${{ hashFiles('sentry/requirements**.txt') }}
          restore-keys: sentry-deps-

      - name: Setup Sentry
        uses: ./.github/actions/setup-sentry
        with:
          workdir: sentry
          snuba: true
          kafka: true

      - name: Run Sentry integration tests
        working-directory: sentry
        env:
          RELAY_TEST_IMAGE: ${{ steps.docker.outputs.image }}
        run: |
          echo "Testing against ${RELAY_TEST_IMAGE}"
          if [[ -z "$RELAY_TEST_IMAGE" ]]; then
              echo "The RELAY_TEST_IMAGE needs to be set" 1>&2
              exit 1
          fi
          make test-relay-integration
