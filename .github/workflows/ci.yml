name: CI

on:
  push:
    branches:
      - master
      - release/**
      - release-library/**

  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Install libcurl-dev
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install Dependencies
        run: pip install -U -r requirements-dev.txt

      - name: Run Black
        run: black --check py tests --exclude '\.eggs|sentry_relay/_lowlevel.*'

      - name: Run Flake8
        run: flake8 py

      - name: Install Rust Toolchain
        run: rustup toolchain install stable --profile minimal --component clippy rustfmt rust-docs --no-self-update

      - uses: swatinem/rust-cache@v2
        with:
          key: ${{ github.job }}

      - name: Run Rustfmt
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --workspace --all-targets --all-features --no-deps -- -D warnings

      - name: Check Docs
        run: cargo doc --workspace --all-features --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: -Dwarnings

  lint_default:
    name: Lint Rust Default Features
    runs-on: ubuntu-latest

    steps:
      - name: Install libcurl-dev
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Rust Toolchain
        run: rustup toolchain install stable --profile minimal --component clippy --no-self-update

      - uses: swatinem/rust-cache@v2
        with:
          key: ${{ github.job }}

      - name: Run Clippy
        run: cargo clippy --workspace --all-targets --no-deps -- -D warnings

  test:
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]

    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    # Skip redundant checks for library releases
    if: "!startsWith(github.ref, 'refs/heads/release-library/')"

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Rust Toolchain
        run: rustup toolchain install stable --profile minimal --no-self-update

      - uses: swatinem/rust-cache@v2
        with:
          key: ${{ github.job }}

      - name: Run Cargo Tests
        run: cargo test --workspace
        env:
          RUSTFLAGS: -Dwarnings

  test_all:
    timeout-minutes: 15
    name: Test All Features (ubuntu-latest)
    runs-on: ubuntu-latest

    # Skip redundant checks for library releases
    if: "!startsWith(github.ref, 'refs/heads/release-library/')"

    # Testing all features requires Docker container operations that are only available on
    # `ubuntu-latest`. This `test-all` job is to be seen as complementary to the `test` job. If
    # services become available on other platforms, the jobs should be consolidated. See
    # https://docs.github.com/en/actions/guides/about-service-containers

    services:
      redis: # https://docs.github.com/en/actions/guides/creating-redis-service-containers
        image: redis
        ports:
          - 6379:6379

    steps:
      - name: Install libcurl-dev
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Rust Toolchain
        run: rustup toolchain install stable --profile minimal --no-self-update

      - uses: swatinem/rust-cache@v2
        with:
          key: ${{ github.job }}

      - name: Run Cargo Tests
        run: cargo test --workspace --all-features

  test_py:
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8]

    # Skip redundant checks for binary releases
    if: "!startsWith(github.ref, 'refs/heads/release/')"

    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Rust Toolchain
        run: rustup toolchain install stable --profile minimal --no-self-update

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: pip install -U pytest

      - uses: swatinem/rust-cache@v2
        with:
          key: ${{ github.job }}

      - name: Build and Install Library
        run: pip install -v --editable py
        env:
          RELAY_DEBUG: 1

      - name: Run Python Tests
        run: pytest -v py

  build:
    timeout-minutes: 30
    strategy:
      matrix:
        # the arm64 build takes too long, so disable for now
        arch: [amd64]

    name: Build Docker Image (${{ matrix.arch }})
    runs-on: ubuntu-latest

    # Skip redundant checks for library releases
    if: "!startsWith(github.ref, 'refs/heads/release-library/')"

    env:
      IMG_BASE: ghcr.io/getsentry/relay
      IMG_DEPS: ghcr.io/getsentry/relay-deps:${{ matrix.arch }}
      # GITHUB_SHA in pull requests points to the merge commit
      IMG_VERSIONED: ghcr.io/getsentry/relay:${{ github.event.pull_request.head.sha || github.sha }}
      ARCH: ${{ matrix.arch }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: swatinem/rust-cache@v2
        with:
          key: ${{ github.job }}-${{ matrix.arch }}

      - run: docker run --rm --privileged tonistiigi/binfmt --install arm64
        if: matrix.arch == 'arm64'

      - name: Build
        run: ./scripts/build-docker-image.sh "$ARCH"

      - name: Export Docker Image
        run: docker save -o relay-docker-image.tgz $IMG_VERSIONED

      - name: Upload Docker Image to Artifact
        uses: actions/upload-artifact@v3
        with:
          retention-days: 1
          name: relay-docker-image
          path: relay-docker-image.tgz

      - name: Push to ghcr.io
        # Do not run this on forks as they do not have access to secrets
        if: "!github.event.pull_request.head.repo.fork && github.actor != 'dependabot[bot]'"
        run: |
          set -euxo pipefail
          docker login --username '${{ github.actor }}' --password '${{ secrets.GITHUB_TOKEN }}' ghcr.io
          docker push $IMG_DEPS
          docker push $IMG_VERSIONED

      - name: Push nightly to ghcr.io
        if: github.ref == 'refs/heads/master'
        run: |
          set -euxo pipefail
          docker tag "$IMG_VERSIONED" "$IMG_BASE:nightly"
          docker push "$IMG_BASE:nightly"

  push-prod-image:
    timeout-minutes: 5
    needs: build

    name: Push GCR Docker Image
    runs-on: ubuntu-latest

    # required for google auth
    permissions:
      contents: "read"
      id-token: "write"

    # Skip redundant checks for library releases
    # Skip for dependabot and if run on a fork
    if: "!startsWith(github.ref, 'refs/heads/release-library/') && !github.event.pull_request.head.repo.fork && github.actor != 'dependabot[bot]'"

    env:
      # GITHUB_SHA in pull requests points to the merge commit
      IMG_VERSIONED: ghcr.io/getsentry/relay:${{ github.event.pull_request.head.sha || github.sha }}

    steps:
      - name: Download Docker Image
        uses: actions/download-artifact@v3
        with:
          name: relay-docker-image

      - name: Import Docker Image
        run: docker load -i relay-docker-image.tgz

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: projects/345757944225/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider
          service_account: github-actions-gcr@sentryio.iam.gserviceaccount.com

      - name: Configure docker
        run: |
          gcloud auth configure-docker us.gcr.io

      - name: Push to us.gcr.io
        run: |
          set -euxo pipefail
          docker tag "$IMG_VERSIONED" "us.gcr.io/sentryio/relay:${{ github.event.pull_request.head.sha || github.sha }}"
          docker push "us.gcr.io/sentryio/relay:${{ github.event.pull_request.head.sha || github.sha }}"

      - name: Push nightly to us.gcr.io
        if: github.ref == 'refs/heads/master'
        run: |
          set -euxo pipefail
          docker tag "$IMG_VERSIONED" "us.gcr.io/sentryio/relay:nightly"
          docker push "us.gcr.io/sentryio/relay:nightly"

  test_integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    # Skip redundant checks for library releases
    if: "!startsWith(github.ref, 'refs/heads/release-library/')"

    services:
      redis: # https://docs.github.com/en/actions/guides/creating-redis-service-containers
        image: redis
        ports:
          - 6379:6379

      # Kafka + Zookeeper version synced with
      # https://github.com/getsentry/sentry/blob/363509c242aff197409207ce4990fb061f3534a3/.github/actions/setup-sentry/action.yml#L174

      zookeeper:
        image: confluentinc/cp-zookeeper:4.1.0
        env:
          ZOOKEEPER_CLIENT_PORT: 2181

      kafka:
        image: confluentinc/cp-kafka:5.1.2
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 1
        ports:
          - 9092:9092

    steps:
      - name: Install libcurl-dev
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Rust Toolchain
        run: rustup toolchain install stable --profile minimal --no-self-update

      - uses: swatinem/rust-cache@v2
        with:
          key: ${{ github.job }}

      - name: Cargo build
        run: cargo build --all-features

      - uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install dependencies
        run: pip install -U -r requirements-dev.txt

      - name: Run tests
        run: pytest tests -n auto -v
        env:
          RELAY_VERSION_CHAIN: "20.6.0,latest"

  sentry-relay-integration-tests:
    name: Sentry-Relay Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: build

    # Skip redundant checks for library releases
    if: "!startsWith(github.ref, 'refs/heads/release-library/')"

    steps:
      # Checkout Sentry and run integration tests against latest Relay
      - name: Checkout Sentry
        uses: actions/checkout@v3
        with:
          repository: getsentry/sentry
          path: sentry

      - name: Setup steps
        id: setup
        run: |
          # GITHUB_SHA in pull requests points to the merge commit
          RELAY_TEST_IMAGE=ghcr.io/getsentry/relay:${{ github.event.pull_request.head.sha || github.sha }}
          echo "We expected GCB to push this image $RELAY_TEST_IMAGE"
          echo "relay-test-image=$RELAY_TEST_IMAGE" >> "$GITHUB_OUTPUT"
          # We cannot execute actions that are not placed under .github of the main repo
          mkdir -p .github/actions
          cp -r sentry/.github/actions/setup-sentry .github/actions/

      - name: Setup Sentry
        uses: ./.github/actions/setup-sentry
        with:
          workdir: sentry
          cache-files-hash: ${{ hashFiles('sentry/requirements**.txt') }}
          python-version: 3.8
          snuba: true
          kafka: true

      - name: Download Docker Image
        uses: actions/download-artifact@v3
        with:
          name: relay-docker-image

      - name: Import Docker Image
        run: docker load -i relay-docker-image.tgz

      - name: Run Sentry integration tests
        working-directory: sentry
        env:
          RELAY_TEST_IMAGE: ${{ steps.setup.outputs.relay-test-image }}
        run: |
          echo "Testing against ${RELAY_TEST_IMAGE}"
          make test-relay-integration

  self-hosted-end-to-end:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build

    # Skip redundant checks for library releases
    if: "!startsWith(github.ref, 'refs/heads/release-library/')"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Download Docker Image
        uses: actions/download-artifact@v3
        with:
          name: relay-docker-image

      - name: Import Docker Image
        run: docker load -i relay-docker-image.tgz

      - name: Run Sentry self-hosted e2e CI
        # Skip for dependabot or if it's a fork as the image cannot be uploaded to ghcr since this test attempts to pull
        # the image from ghcr
        if: "!github.event.pull_request.head.repo.fork && github.actor != 'dependabot[bot]'"
        uses: getsentry/action-self-hosted-e2e-tests@77805295ebff8a603def5970e18743ded72cb304
        with:
          project_name: relay
          image_url: ghcr.io/getsentry/relay:${{ github.event.pull_request.head.sha || github.sha }}
          docker_repo: getsentry/relay
          docker_password: ${{ secrets.DOCKER_HUB_RW_TOKEN }}
