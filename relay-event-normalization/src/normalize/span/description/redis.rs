use std::sync::LazyLock;

use regex::Regex;

/// Returns the substring that matches a known redis command.
pub fn matching_redis_command(seek: &str) -> Option<&str> {
    let m = COMMAND_REGEX.captures(seek)?.get(1)?;
    Some(m.as_str())
}

/// List of redis commands.
///
/// Make sure commands with subcommands (e.g. `ACL LIST` are listed before the top-level command)
/// so that the more precise command match has priority.
///
/// See <https://redis.io/docs/latest/commands/>.
static COMMAND_REGEX: LazyLock<Regex> = LazyLock::new(|| {
    Regex::new(r"(?i)(?-u:\s*)(?P<command>ZUNIONSTORE|ZUNION|ZSCORE|ZSCAN|ZREVRANK|ZREVRANGEBYSCORE|ZREVRANGEBYLEX|ZREVRANGE|ZREMRANGEBYSCORE|ZREMRANGEBYRANK|ZREMRANGEBYLEX|ZREM|ZRANK|ZRANGESTORE|ZRANGEBYSCORE|ZRANGEBYLEX|ZRANGE|ZRANDMEMBER|ZPOPMIN|ZPOPMAX|ZMSCORE|ZMPOP|ZLEXCOUNT|ZINTERSTORE|ZINTERCARD|ZINTER|ZINCRBY|ZDIFFSTORE|ZDIFF|ZCOUNT|ZCARD|ZADD|XTRIM|XSETID|XREVRANGE|XREADGROUP|XREAD|XRANGE|XPENDING|XLEN|XINFO STREAM|XINFO HELP|XINFO GROUPS|XINFO CONSUMERS|XINFO|XGROUP SETID|XGROUP HELP|XGROUP DESTROY|XGROUP DELCONSUMER|XGROUP CREATECONSUMER|XGROUP CREATE|XGROUP|XDEL|XCLAIM|XAUTOCLAIM|XADD|XACK|WATCH|WAITAOF|WAIT|UNWATCH|UNSUBSCRIBE|UNLINK|TYPE|TTL|TS.REVRANGE|TS.RANGE|TS.QUERYINDEX|TS.MREVRANGE|TS.MRANGE|TS.MGET|TS.MADD|TS.INFO|TS.INCRBY|TS.GET|TS.DELETERULE|TS.DEL|TS.DECRBY|TS.CREATERULE|TS.CREATE|TS.ALTER|TS.ADD|TOUCH|TOPK.RESERVE|TOPK.QUERY|TOPK.LIST|TOPK.INFO|TOPK.INCRBY|TOPK.COUNT|TOPK.ADD|TIME|TDIGEST.TRIMMED_MEAN|TDIGEST.REVRANK|TDIGEST.RESET|TDIGEST.RANK|TDIGEST.QUANTILE|TDIGEST.MIN|TDIGEST.MERGE|TDIGEST.MAX|TDIGEST.INFO|TDIGEST.CREATE|TDIGEST.CDF|TDIGEST.BYREVRANK|TDIGEST.BYRANK|TDIGEST.ADD|SYNC|SWAPDB|SUNSUBSCRIBE|SUNIONSTORE|SUNION|SUBSTR|SUBSCRIBE|STRLEN|SSUBSCRIBE|SSCAN|SREM|SRANDMEMBER|SPUBLISH|SPOP|SORT_RO|SORT|SMOVE|SMISMEMBER|SMEMBERS|SLOWLOG RESET|SLOWLOG LEN|SLOWLOG HELP|SLOWLOG GET|SLOWLOG|SLAVEOF|SISMEMBER|SINTERSTORE|SINTERCARD|SINTER|SHUTDOWN|SETRANGE|SETNX|SETEX|SETBIT|SET|SELECT|SDIFFSTORE|SDIFF|SCRIPT LOAD|SCRIPT KILL|SCRIPT HELP|SCRIPT FLUSH|SCRIPT EXISTS|SCRIPT DEBUG|SCRIPT|SCARD|SCAN|SAVE|SADD|RPUSHX|RPUSH|RPOPLPUSH|RPOP|ROLE|RESTORE-ASKING|RESTORE|RESET|REPLICAOF|REPLCONF|RENAMENX|RENAME|READWRITE|READONLY|RANDOMKEY|QUIT|PUNSUBSCRIBE|PUBSUB SHARDNUMSUB|PUBSUB SHARDCHANNELS|PUBSUB NUMSUB|PUBSUB NUMPAT|PUBSUB HELP|PUBSUB CHANNELS|PUBSUB|PUBLISH|PTTL|PSYNC|PSUBSCRIBE|PSETEX|PING|PFSELFTEST|PFMERGE|PFDEBUG|PFCOUNT|PFADD|PEXPIRETIME|PEXPIREAT|PEXPIRE|PERSIST|OBJECT REFCOUNT|OBJECT IDLETIME|OBJECT HELP|OBJECT FREQ|OBJECT ENCODING|OBJECT|MULTI|MSETNX|MSET|MOVE|MONITOR|MODULE UNLOAD|MODULE LOADEX|MODULE LOAD|MODULE LIST|MODULE HELP|MODULE|MIGRATE|MGET|MEMORY USAGE|MEMORY STATS|MEMORY PURGE|MEMORY MALLOC-STATS|MEMORY HELP|MEMORY DOCTOR|MEMORY|LTRIM|LSET|LREM|LRANGE|LPUSHX|LPUSH|LPOS|LPOP|LOLWUT|LMPOP|LMOVE|LLEN|LINSERT|LINDEX|LCS|LATENCY RESET|LATENCY LATEST|LATENCY HISTORY|LATENCY HISTOGRAM|LATENCY HELP|LATENCY GRAPH|LATENCY DOCTOR|LATENCY|LASTSAVE|KEYS|JSON.TYPE|JSON.TOGGLE|JSON.STRLEN|JSON.STRAPPEND|JSON.SET|JSON.RESP|JSON.OBJLEN|JSON.OBJKEYS|JSON.NUMMULTBY|JSON.NUMINCRBY|JSON.MSET|JSON.MGET|JSON.MERGE|JSON.GET|JSON.FORGET|JSON.DEL|JSON.DEBUG MEMORY|JSON.DEBUG HELP|JSON.DEBUG|JSON.CLEAR|JSON.ARRTRIM|JSON.ARRPOP|JSON.ARRLEN|JSON.ARRINSERT|JSON.ARRINDEX|JSON.ARRAPPEND|INFO|INCRBYFLOAT|INCRBY|INCR|HVALS|HTTL|HSTRLEN|HSETNX|HSET|HSCAN|HRANDFIELD|HPTTL|HPEXPIRETIME|HPEXPIREAT|HPEXPIRE|HPERSIST|HMSET|HMGET|HLEN|HKEYS|HINCRBYFLOAT|HINCRBY|HGETALL|HGET|HEXPIRETIME|HEXPIREAT|HEXPIRE|HEXISTS|HELLO|HDEL|GETSET|GETRANGE|GETEX|GETDEL|GETBIT|GET|GEOSEARCHSTORE|GEOSEARCH|GEORADIUS_RO|GEORADIUSBYMEMBER_RO|GEORADIUSBYMEMBER|GEORADIUS|GEOPOS|GEOHASH|GEODIST|GEOADD|FUNCTION STATS|FUNCTION RESTORE|FUNCTION LOAD|FUNCTION LIST|FUNCTION KILL|FUNCTION HELP|FUNCTION FLUSH|FUNCTION DUMP|FUNCTION DELETE|FUNCTION|FT._LIST|FT.TAGVALS|FT.SYNUPDATE|FT.SYNDUMP|FT.SUGLEN|FT.SUGGET|FT.SUGDEL|FT.SUGADD|FT.SPELLCHECK|FT.SEARCH|FT.PROFILE|FT.INFO|FT.EXPLAINCLI|FT.EXPLAIN|FT.DROPINDEX|FT.DICTDUMP|FT.DICTDEL|FT.DICTADD|FT.CURSOR READ|FT.CURSOR DEL|FT.CREATE|FT.CONFIG SET|FT.CONFIG HELP|FT.CONFIG GET|FT.ALTER|FT.ALIASUPDATE|FT.ALIASDEL|FT.ALIASADD|FT.AGGREGATE|FLUSHDB|FLUSHALL|FCALL_RO|FCALL|FAILOVER|EXPIRETIME|EXPIREAT|EXPIRE|EXISTS|EXEC|EVAL_RO|EVALSHA_RO|EVALSHA|EVAL|ECHO|DUMP|DISCARD|DEL|DECRBY|DECR|DEBUG|DBSIZE|COPY|CONFIG SET|CONFIG REWRITE|CONFIG RESETSTAT|CONFIG HELP|CONFIG GET|CONFIG|COMMAND LIST|COMMAND INFO|COMMAND HELP|COMMAND GETKEYSANDFLAGS|COMMAND GETKEYS|COMMAND DOCS|COMMAND COUNT|COMMAND|CMS.QUERY|CMS.MERGE|CMS.INITBYPROB|CMS.INITBYDIM|CMS.INFO|CMS.INCRBY|CLUSTER SLOTS|CLUSTER SLAVES|CLUSTER SHARDS|CLUSTER SETSLOT|CLUSTER SET-CONFIG-EPOCH|CLUSTER SAVECONFIG|CLUSTER RESET|CLUSTER REPLICATE|CLUSTER REPLICAS|CLUSTER NODES|CLUSTER MYSHARDID|CLUSTER MYID|CLUSTER MEET|CLUSTER LINKS|CLUSTER KEYSLOT|CLUSTER INFO|CLUSTER HELP|CLUSTER GETKEYSINSLOT|CLUSTER FORGET|CLUSTER FLUSHSLOTS|CLUSTER FAILOVER|CLUSTER DELSLOTSRANGE|CLUSTER DELSLOTS|CLUSTER COUNTKEYSINSLOT|CLUSTER COUNT-FAILURE-REPORTS|CLUSTER BUMPEPOCH|CLUSTER ADDSLOTSRANGE|CLUSTER ADDSLOTS|CLUSTER|CLIENT UNPAUSE|CLIENT UNBLOCK|CLIENT TRACKINGINFO|CLIENT TRACKING|CLIENT SETNAME|CLIENT SETINFO|CLIENT REPLY|CLIENT PAUSE|CLIENT NO-TOUCH|CLIENT NO-EVICT|CLIENT LIST|CLIENT KILL|CLIENT INFO|CLIENT ID|CLIENT HELP|CLIENT GETREDIR|CLIENT GETNAME|CLIENT CACHING|CLIENT|CF.SCANDUMP|CF.RESERVE|CF.MEXISTS|CF.LOADCHUNK|CF.INSERTNX|CF.INSERT|CF.INFO|CF.EXISTS|CF.DEL|CF.COUNT|CF.ADDNX|CF.ADD|BZPOPMIN|BZPOPMAX|BZMPOP|BRPOPLPUSH|BRPOP|BLPOP|BLMPOP|BLMOVE|BITPOS|BITOP|BITFIELD_RO|BITFIELD|BITCOUNT|BGSAVE|BGREWRITEAOF|BF.SCANDUMP|BF.RESERVE|BF.MEXISTS|BF.MADD|BF.LOADCHUNK|BF.INSERT|BF.INFO|BF.EXISTS|BF.CARD|BF.ADD|AUTH|ASKING|APPEND|ACL WHOAMI|ACL USERS|ACL SETUSER|ACL SAVE|ACL LOG|ACL LOAD|ACL LIST|ACL HELP|ACL GETUSER|ACL GENPASS|ACL DRYRUN|ACL DELUSER|ACL CAT|ACL)(?-u:\s|$)").unwrap()
});

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn find_exact() {
        assert_eq!(matching_redis_command("TOPK.ADD"), Some("TOPK.ADD"));
    }

    #[test]
    fn same_length_arbitrary_case() {
        assert_eq!(matching_redis_command("TopK.add"), Some("TopK.add"));
    }

    #[test]
    fn same_length_different_content() {
        assert_eq!(matching_redis_command("_OPK.ADD"), None);
    }

    #[test]
    fn same_length_different_content2() {
        assert_eq!(matching_redis_command("T_PK.ADD"), None);
    }

    #[test]
    fn same_length_different_content3() {
        assert_eq!(matching_redis_command("TOPK.AD_"), None);
    }

    #[test]
    fn prefix() {
        assert_eq!(
            matching_redis_command("TOPK.ADD something something"),
            Some("TOPK.ADD")
        );
    }

    #[test]
    fn prefix_arbitrary_case() {
        assert_eq!(
            matching_redis_command("TopK.add Something SomeThing"),
            Some("TopK.add")
        );
    }

    #[test]
    fn needle_too_short() {
        assert_eq!(matching_redis_command("TOPK.AD"), None);
    }

    #[test]
    fn needle_too_short_arbitrary_case() {
        assert_eq!(matching_redis_command("TopK.ad"), None);
    }

    #[test]
    fn empty_needle() {
        assert_eq!(matching_redis_command(""), None);
    }

    #[test]
    fn find_word_boundary() {
        assert_eq!(matching_redis_command("ACL cattington"), Some("ACL"));
    }

    #[test]
    fn find_with_extra_word() {
        assert_eq!(matching_redis_command("ACL cat tington"), Some("ACL cat"));
    }

    #[test]
    fn find_ambiguous_prefix() {
        assert_eq!(matching_redis_command("ACL CAT"), Some("ACL CAT"));
    }
}
