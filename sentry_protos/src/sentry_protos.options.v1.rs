// This file is @generated by prost-build.
/// Used to signal that a schema is associated with the output of a kafka topic, including
/// some metadata about that.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TopicConfig {
    #[prost(string, tag = "1")]
    pub topic: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub services: ::core::option::Option<ServicesData>,
    #[prost(string, tag = "4")]
    pub pipeline: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "5")]
    pub topic_creation_config:
        ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    #[prost(oneof = "topic_config::HasEnforcedPartitionCount", tags = "6")]
    pub has_enforced_partition_count:
        ::core::option::Option<topic_config::HasEnforcedPartitionCount>,
}
/// Nested message and enum types in `TopicConfig`.
pub mod topic_config {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasEnforcedPartitionCount {
        #[prost(uint64, tag = "6")]
        EnforcedPartitionCount(u64),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServicesData {
    #[prost(string, repeated, tag = "1")]
    pub consumers: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "2")]
    pub producers: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Signals that a producer of this data intends a specific value as a potential discriminator.
/// At a protocol level, consts should not be enforced or validated, but they can be used to
/// make decisions.  They are a lightweight coordination paradigm with little more guarantee
/// than best-effort.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Const {
    #[prost(int64, tag = "1")]
    pub int: i64,
    #[prost(string, tag = "2")]
    pub string: ::prost::alloc::string::String,
}
