// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventStreamMessage {
    #[prost(
        oneof = "event_stream_message::Value",
        tags = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14"
    )]
    pub value: ::core::option::Option<event_stream_message::Value>,
}
/// Nested message and enum types in `EventStreamMessage`.
pub mod event_stream_message {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(message, tag = "1")]
        Inserteventmessage(super::Inserteventmessage),
        #[prost(message, tag = "2")]
        Startdeletegroupsmessage(super::Startdeletegroupsmessage),
        #[prost(message, tag = "3")]
        Startmergemessage(super::Startmergemessage),
        #[prost(message, tag = "4")]
        Startunmergemessage(super::Startunmergemessage),
        #[prost(message, tag = "5")]
        Startunmergehierarchicalmessage(super::Startunmergehierarchicalmessage),
        #[prost(message, tag = "6")]
        Startdeletetagmessage(super::Startdeletetagmessage),
        #[prost(message, tag = "7")]
        Enddeletegroupsmessage(super::Enddeletegroupsmessage),
        #[prost(message, tag = "8")]
        Endmergemessage(super::Endmergemessage),
        #[prost(message, tag = "9")]
        Endunmergemessage(super::Endunmergemessage),
        #[prost(message, tag = "10")]
        Endunmergehierarchicalmessage(super::Endunmergehierarchicalmessage),
        #[prost(message, tag = "11")]
        Enddeletetagmessage(super::Enddeletetagmessage),
        #[prost(message, tag = "12")]
        Tombstoneeventsmessage(super::Tombstoneeventsmessage),
        #[prost(message, tag = "13")]
        Replacegroupmessage(super::Replacegroupmessage),
        #[prost(message, tag = "14")]
        Excludegroupsmessage(super::Excludegroupsmessage),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Startmergemessage {
    #[prost(int64, tag = "1")]
    pub a0: i64,
    #[prost(string, tag = "2")]
    pub a1: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub a2: ::core::option::Option<startmergemessage::Startmergemessage2>,
}
/// Nested message and enum types in `Startmergemessage`.
pub mod startmergemessage {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Startmergemessage2 {
        #[prost(string, tag = "1")]
        pub transaction_id: ::prost::alloc::string::String,
        #[prost(int64, tag = "2")]
        pub project_id: i64,
        #[prost(int64, repeated, tag = "3")]
        pub previous_group_ids: ::prost::alloc::vec::Vec<i64>,
        #[prost(int64, tag = "4")]
        pub new_group_id: i64,
        #[prost(string, tag = "5")]
        pub datetime: ::prost::alloc::string::String,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Endmergemessage {
    #[prost(int64, tag = "1")]
    pub a0: i64,
    #[prost(string, tag = "2")]
    pub a1: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub a2: ::core::option::Option<endmergemessage::Endmergemessage2>,
}
/// Nested message and enum types in `Endmergemessage`.
pub mod endmergemessage {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Endmergemessage2 {
        #[prost(string, tag = "1")]
        pub transaction_id: ::prost::alloc::string::String,
        #[prost(int64, tag = "2")]
        pub project_id: i64,
        #[prost(int64, repeated, tag = "3")]
        pub previous_group_ids: ::prost::alloc::vec::Vec<i64>,
        #[prost(int64, tag = "4")]
        pub new_group_id: i64,
        #[prost(string, tag = "5")]
        pub datetime: ::prost::alloc::string::String,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Startdeletegroupsmessage {
    #[prost(int64, tag = "1")]
    pub a0: i64,
    #[prost(string, tag = "2")]
    pub a1: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub a2: ::core::option::Option<startdeletegroupsmessage::Startdeletegroupsmessage2>,
}
/// Nested message and enum types in `Startdeletegroupsmessage`.
pub mod startdeletegroupsmessage {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Startdeletegroupsmessage2 {
        #[prost(string, tag = "1")]
        pub transaction_id: ::prost::alloc::string::String,
        #[prost(int64, tag = "2")]
        pub project_id: i64,
        #[prost(int64, repeated, tag = "3")]
        pub group_ids: ::prost::alloc::vec::Vec<i64>,
        #[prost(string, tag = "4")]
        pub datetime: ::prost::alloc::string::String,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Enddeletegroupsmessage {
    #[prost(int64, tag = "1")]
    pub a0: i64,
    #[prost(string, tag = "2")]
    pub a1: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub a2: ::core::option::Option<enddeletegroupsmessage::Enddeletegroupsmessage2>,
}
/// Nested message and enum types in `Enddeletegroupsmessage`.
pub mod enddeletegroupsmessage {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Enddeletegroupsmessage2 {
        #[prost(string, tag = "1")]
        pub transaction_id: ::prost::alloc::string::String,
        #[prost(int64, tag = "2")]
        pub project_id: i64,
        #[prost(int64, repeated, tag = "3")]
        pub group_ids: ::prost::alloc::vec::Vec<i64>,
        #[prost(string, tag = "4")]
        pub datetime: ::prost::alloc::string::String,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Startunmergemessage {
    #[prost(int64, tag = "1")]
    pub a0: i64,
    #[prost(string, tag = "2")]
    pub a1: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub a2: ::core::option::Option<startunmergemessage::Startunmergemessage2>,
}
/// Nested message and enum types in `Startunmergemessage`.
pub mod startunmergemessage {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Startunmergemessage2 {
        #[prost(int64, tag = "1")]
        pub project_id: i64,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Startunmergehierarchicalmessage {
    #[prost(int64, tag = "1")]
    pub a0: i64,
    #[prost(string, tag = "2")]
    pub a1: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub a2:
        ::core::option::Option<startunmergehierarchicalmessage::Startunmergehierarchicalmessage2>,
}
/// Nested message and enum types in `Startunmergehierarchicalmessage`.
pub mod startunmergehierarchicalmessage {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Startunmergehierarchicalmessage2 {
        #[prost(int64, tag = "1")]
        pub project_id: i64,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Startdeletetagmessage {
    #[prost(int64, tag = "1")]
    pub a0: i64,
    #[prost(string, tag = "2")]
    pub a1: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub a2: ::core::option::Option<startdeletetagmessage::Startdeletetagmessage2>,
}
/// Nested message and enum types in `Startdeletetagmessage`.
pub mod startdeletetagmessage {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Startdeletetagmessage2 {
        #[prost(int64, tag = "1")]
        pub project_id: i64,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Endunmergemessage {
    #[prost(int64, tag = "1")]
    pub a0: i64,
    #[prost(string, tag = "2")]
    pub a1: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub a2: ::core::option::Option<endunmergemessage::Endunmergemessage2>,
}
/// Nested message and enum types in `Endunmergemessage`.
pub mod endunmergemessage {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Endunmergemessage2 {
        #[prost(string, tag = "1")]
        pub transaction_id: ::prost::alloc::string::String,
        #[prost(int64, tag = "2")]
        pub project_id: i64,
        #[prost(int64, tag = "3")]
        pub previous_group_id: i64,
        #[prost(int64, tag = "4")]
        pub new_group_id: i64,
        #[prost(string, repeated, tag = "5")]
        pub hashes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(string, tag = "6")]
        pub datetime: ::prost::alloc::string::String,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Endunmergehierarchicalmessage {
    #[prost(int64, tag = "1")]
    pub a0: i64,
    #[prost(string, tag = "2")]
    pub a1: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub a2: ::core::option::Option<endunmergehierarchicalmessage::Endunmergehierarchicalmessage2>,
}
/// Nested message and enum types in `Endunmergehierarchicalmessage`.
pub mod endunmergehierarchicalmessage {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Endunmergehierarchicalmessage2 {
        #[prost(int64, tag = "1")]
        pub project_id: i64,
        #[prost(int64, tag = "2")]
        pub previous_group_id: i64,
        #[prost(int64, tag = "3")]
        pub new_group_id: i64,
        #[prost(string, tag = "4")]
        pub primary_hash: ::prost::alloc::string::String,
        #[prost(string, tag = "5")]
        pub hierarchical_hash: ::prost::alloc::string::String,
        #[prost(string, tag = "6")]
        pub datetime: ::prost::alloc::string::String,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Enddeletetagmessage {
    #[prost(int64, tag = "1")]
    pub a0: i64,
    #[prost(string, tag = "2")]
    pub a1: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub a2: ::core::option::Option<enddeletetagmessage::Enddeletetagmessage2>,
}
/// Nested message and enum types in `Enddeletetagmessage`.
pub mod enddeletetagmessage {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Enddeletetagmessage2 {
        #[prost(string, tag = "1")]
        pub tag: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub datetime: ::prost::alloc::string::String,
        #[prost(int64, tag = "3")]
        pub project_id: i64,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Tombstoneeventsmessage {
    #[prost(int64, tag = "1")]
    pub a0: i64,
    #[prost(string, tag = "2")]
    pub a1: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub a2: ::core::option::Option<tombstoneeventsmessage::Tombstoneeventsmessage2>,
}
/// Nested message and enum types in `Tombstoneeventsmessage`.
pub mod tombstoneeventsmessage {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Tombstoneeventsmessage2 {
        #[prost(int64, tag = "1")]
        pub project_id: i64,
        #[prost(string, repeated, tag = "2")]
        pub event_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(string, tag = "4")]
        pub from_timestamp: ::prost::alloc::string::String,
        #[prost(string, tag = "5")]
        pub to_timestamp: ::prost::alloc::string::String,
        #[prost(string, tag = "6")]
        pub datetime: ::prost::alloc::string::String,
        #[prost(oneof = "tombstoneeventsmessage2::HasOldPrimaryHash", tags = "3")]
        pub has_old_primary_hash:
            ::core::option::Option<tombstoneeventsmessage2::HasOldPrimaryHash>,
    }
    /// Nested message and enum types in `Tombstoneeventsmessage2`.
    pub mod tombstoneeventsmessage2 {
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasOldPrimaryHash {
            #[prost(string, tag = "3")]
            OldPrimaryHash(::prost::alloc::string::String),
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Replacegroupmessage {
    #[prost(int64, tag = "1")]
    pub a0: i64,
    #[prost(string, tag = "2")]
    pub a1: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub a2: ::core::option::Option<replacegroupmessage::Replacegroupmessage2>,
}
/// Nested message and enum types in `Replacegroupmessage`.
pub mod replacegroupmessage {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Replacegroupmessage2 {
        #[prost(string, repeated, tag = "1")]
        pub event_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(int64, tag = "2")]
        pub project_id: i64,
        #[prost(string, tag = "3")]
        pub from_timestamp: ::prost::alloc::string::String,
        #[prost(string, tag = "4")]
        pub to_timestamp: ::prost::alloc::string::String,
        #[prost(string, tag = "5")]
        pub transaction_id: ::prost::alloc::string::String,
        #[prost(string, tag = "6")]
        pub datetime: ::prost::alloc::string::String,
        #[prost(int64, tag = "7")]
        pub new_group_id: i64,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Excludegroupsmessage {
    #[prost(int64, tag = "1")]
    pub a0: i64,
    #[prost(string, tag = "2")]
    pub a1: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub a2: ::core::option::Option<excludegroupsmessage::Excludegroupsmessage2>,
}
/// Nested message and enum types in `Excludegroupsmessage`.
pub mod excludegroupsmessage {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Excludegroupsmessage2 {
        #[prost(int64, tag = "1")]
        pub project_id: i64,
        #[prost(int64, repeated, tag = "2")]
        pub group_ids: ::prost::alloc::vec::Vec<i64>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Contexts {
    #[prost(oneof = "contexts::HasReplay", tags = "1")]
    pub has_replay: ::core::option::Option<contexts::HasReplay>,
    #[prost(oneof = "contexts::HasTrace", tags = "2")]
    pub has_trace: ::core::option::Option<contexts::HasTrace>,
}
/// Nested message and enum types in `Contexts`.
pub mod contexts {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ContextsReplay {
        #[prost(oneof = "contexts_replay::HasReplayId", tags = "1")]
        pub has_replay_id: ::core::option::Option<contexts_replay::HasReplayId>,
    }
    /// Nested message and enum types in `ContextsReplay`.
    pub mod contexts_replay {
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasReplayId {
            #[prost(string, tag = "1")]
            ReplayId(::prost::alloc::string::String),
        }
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ContextsTrace {
        #[prost(oneof = "contexts_trace::HasSampled", tags = "1")]
        pub has_sampled: ::core::option::Option<contexts_trace::HasSampled>,
        #[prost(oneof = "contexts_trace::HasSpanId", tags = "2")]
        pub has_span_id: ::core::option::Option<contexts_trace::HasSpanId>,
        #[prost(oneof = "contexts_trace::HasTraceId", tags = "3")]
        pub has_trace_id: ::core::option::Option<contexts_trace::HasTraceId>,
    }
    /// Nested message and enum types in `ContextsTrace`.
    pub mod contexts_trace {
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasSampled {
            #[prost(bool, tag = "1")]
            Sampled(bool),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasSpanId {
            #[prost(string, tag = "2")]
            SpanId(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasTraceId {
            #[prost(string, tag = "3")]
            TraceId(::prost::alloc::string::String),
        }
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasReplay {
        #[prost(message, tag = "1")]
        Replay(ContextsReplay),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasTrace {
        #[prost(message, tag = "2")]
        Trace(ContextsTrace),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Errordata {
    #[prost(message, optional, tag = "2")]
    pub culprit: ::core::option::Option<::prost_types::Value>,
    #[prost(message, repeated, tag = "3")]
    pub errors: ::prost::alloc::vec::Vec<::prost_types::Value>,
    #[prost(string, repeated, tag = "5")]
    pub hierarchical_hashes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(map = "string, string", tag = "7")]
    pub modules:
        ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    #[prost(double, tag = "8")]
    pub received: f64,
    #[prost(message, repeated, tag = "11")]
    pub tags: ::prost::alloc::vec::Vec<errordata::ErrordataTags>,
    #[prost(message, optional, tag = "13")]
    pub title: ::core::option::Option<::prost_types::Value>,
    #[prost(message, optional, tag = "14")]
    pub r#type: ::core::option::Option<::prost_types::Value>,
    #[prost(oneof = "errordata::HasContexts", tags = "1")]
    pub has_contexts: ::core::option::Option<errordata::HasContexts>,
    #[prost(oneof = "errordata::HasException", tags = "4")]
    pub has_exception: ::core::option::Option<errordata::HasException>,
    #[prost(oneof = "errordata::HasLocation", tags = "6")]
    pub has_location: ::core::option::Option<errordata::HasLocation>,
    #[prost(oneof = "errordata::HasRequest", tags = "9")]
    pub has_request: ::core::option::Option<errordata::HasRequest>,
    #[prost(oneof = "errordata::HasSdk", tags = "10")]
    pub has_sdk: ::core::option::Option<errordata::HasSdk>,
    #[prost(oneof = "errordata::HasThreads", tags = "12")]
    pub has_threads: ::core::option::Option<errordata::HasThreads>,
    #[prost(oneof = "errordata::HasUser", tags = "15")]
    pub has_user: ::core::option::Option<errordata::HasUser>,
    #[prost(oneof = "errordata::HasVersion", tags = "16")]
    pub has_version: ::core::option::Option<errordata::HasVersion>,
}
/// Nested message and enum types in `Errordata`.
pub mod errordata {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ErrordataContexts {
        #[prost(oneof = "errordata_contexts::HasReplay", tags = "1")]
        pub has_replay: ::core::option::Option<errordata_contexts::HasReplay>,
        #[prost(oneof = "errordata_contexts::HasTrace", tags = "2")]
        pub has_trace: ::core::option::Option<errordata_contexts::HasTrace>,
    }
    /// Nested message and enum types in `ErrordataContexts`.
    pub mod errordata_contexts {
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ErrordataContextsReplay {
            #[prost(oneof = "errordata_contexts_replay::HasReplayId", tags = "1")]
            pub has_replay_id: ::core::option::Option<errordata_contexts_replay::HasReplayId>,
        }
        /// Nested message and enum types in `ErrordataContextsReplay`.
        pub mod errordata_contexts_replay {
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasReplayId {
                #[prost(string, tag = "1")]
                ReplayId(::prost::alloc::string::String),
            }
        }
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ErrordataContextsTrace {
            #[prost(oneof = "errordata_contexts_trace::HasSampled", tags = "1")]
            pub has_sampled: ::core::option::Option<errordata_contexts_trace::HasSampled>,
            #[prost(oneof = "errordata_contexts_trace::HasSpanId", tags = "2")]
            pub has_span_id: ::core::option::Option<errordata_contexts_trace::HasSpanId>,
            #[prost(oneof = "errordata_contexts_trace::HasTraceId", tags = "3")]
            pub has_trace_id: ::core::option::Option<errordata_contexts_trace::HasTraceId>,
        }
        /// Nested message and enum types in `ErrordataContextsTrace`.
        pub mod errordata_contexts_trace {
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasSampled {
                #[prost(bool, tag = "1")]
                Sampled(bool),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasSpanId {
                #[prost(string, tag = "2")]
                SpanId(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasTraceId {
                #[prost(string, tag = "3")]
                TraceId(::prost::alloc::string::String),
            }
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasReplay {
            #[prost(message, tag = "1")]
            Replay(ErrordataContextsReplay),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasTrace {
            #[prost(message, tag = "2")]
            Trace(ErrordataContextsTrace),
        }
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ErrordataException {
        #[prost(message, repeated, tag = "1")]
        pub values: ::prost::alloc::vec::Vec<errordata_exception::ErrordataExceptionValues>,
    }
    /// Nested message and enum types in `ErrordataException`.
    pub mod errordata_exception {
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ErrordataExceptionValues {
            #[prost(message, optional, tag = "4")]
            pub r#type: ::core::option::Option<::prost_types::Value>,
            #[prost(message, optional, tag = "5")]
            pub value: ::core::option::Option<::prost_types::Value>,
            #[prost(oneof = "errordata_exception_values::HasMechanism", tags = "1")]
            pub has_mechanism: ::core::option::Option<errordata_exception_values::HasMechanism>,
            #[prost(oneof = "errordata_exception_values::HasStacktrace", tags = "2")]
            pub has_stacktrace: ::core::option::Option<errordata_exception_values::HasStacktrace>,
            #[prost(oneof = "errordata_exception_values::HasThreadId", tags = "3")]
            pub has_thread_id: ::core::option::Option<errordata_exception_values::HasThreadId>,
        }
        /// Nested message and enum types in `ErrordataExceptionValues`.
        pub mod errordata_exception_values {
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct ErrordataExceptionValuesMechanism {
                #[prost(message, optional, tag = "1")]
                pub handled: ::core::option::Option<::prost_types::Value>,
                #[prost(message, optional, tag = "2")]
                pub r#type: ::core::option::Option<::prost_types::Value>,
            }
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct ErrordataExceptionValuesStacktrace {
                #[prost(message, repeated, tag = "1")]
                pub frames: ::prost::alloc::vec::Vec<
                    errordata_exception_values_stacktrace::ErrordataExceptionValuesStacktraceFrames,
                >,
            }
            /// Nested message and enum types in `ErrordataExceptionValuesStacktrace`.
            pub mod errordata_exception_values_stacktrace {
                #[derive(Clone, PartialEq, ::prost::Message)]
                pub struct ErrordataExceptionValuesStacktraceFrames {
                    #[prost(message, optional, tag = "1")]
                    pub abs_path: ::core::option::Option<::prost_types::Value>,
                    #[prost(message, optional, tag = "3")]
                    pub filename: ::core::option::Option<::prost_types::Value>,
                    #[prost(message, optional, tag = "4")]
                    pub function: ::core::option::Option<::prost_types::Value>,
                    #[prost(message, optional, tag = "7")]
                    pub module: ::core::option::Option<::prost_types::Value>,
                    #[prost(message, optional, tag = "8")]
                    pub package: ::core::option::Option<::prost_types::Value>,
                    #[prost(
                        oneof = "errordata_exception_values_stacktrace_frames::HasColno",
                        tags = "2"
                    )]
                    pub has_colno: ::core::option::Option<
                        errordata_exception_values_stacktrace_frames::HasColno,
                    >,
                    #[prost(
                        oneof = "errordata_exception_values_stacktrace_frames::HasInApp",
                        tags = "5"
                    )]
                    pub has_in_app: ::core::option::Option<
                        errordata_exception_values_stacktrace_frames::HasInApp,
                    >,
                    #[prost(
                        oneof = "errordata_exception_values_stacktrace_frames::HasLineno",
                        tags = "6"
                    )]
                    pub has_lineno: ::core::option::Option<
                        errordata_exception_values_stacktrace_frames::HasLineno,
                    >,
                }
                /// Nested message and enum types in `ErrordataExceptionValuesStacktraceFrames`.
                pub mod errordata_exception_values_stacktrace_frames {
                    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                    pub enum HasColno {
                        #[prost(int64, tag = "2")]
                        Colno(i64),
                    }
                    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                    pub enum HasInApp {
                        #[prost(bool, tag = "5")]
                        InApp(bool),
                    }
                    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                    pub enum HasLineno {
                        #[prost(int64, tag = "6")]
                        Lineno(i64),
                    }
                }
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasMechanism {
                #[prost(message, tag = "1")]
                Mechanism(ErrordataExceptionValuesMechanism),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasStacktrace {
                #[prost(message, tag = "2")]
                Stacktrace(ErrordataExceptionValuesStacktrace),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasThreadId {
                #[prost(message, tag = "3")]
                ThreadId(::prost_types::Value),
            }
        }
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ErrordataRequest {
        #[prost(message, repeated, tag = "1")]
        pub headers: ::prost::alloc::vec::Vec<errordata_request::ErrordataRequestHeaders>,
        #[prost(message, optional, tag = "2")]
        pub method: ::core::option::Option<::prost_types::Value>,
    }
    /// Nested message and enum types in `ErrordataRequest`.
    pub mod errordata_request {
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ErrordataRequestHeaders {
            #[prost(string, tag = "1")]
            pub a0: ::prost::alloc::string::String,
            #[prost(message, optional, tag = "2")]
            pub a1: ::core::option::Option<::prost_types::Value>,
        }
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ErrordataSdk {
        #[prost(message, repeated, tag = "1")]
        pub integrations: ::prost::alloc::vec::Vec<::prost_types::Value>,
        #[prost(message, optional, tag = "2")]
        pub name: ::core::option::Option<::prost_types::Value>,
        #[prost(message, optional, tag = "3")]
        pub version: ::core::option::Option<::prost_types::Value>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ErrordataTags {
        #[prost(message, optional, tag = "1")]
        pub a0: ::core::option::Option<::prost_types::Value>,
        #[prost(message, optional, tag = "2")]
        pub a1: ::core::option::Option<::prost_types::Value>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ErrordataThreads {
        #[prost(message, repeated, tag = "1")]
        pub values: ::prost::alloc::vec::Vec<errordata_threads::ErrordataThreadsValues>,
    }
    /// Nested message and enum types in `ErrordataThreads`.
    pub mod errordata_threads {
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ErrordataThreadsValues {
            #[prost(oneof = "errordata_threads_values::HasId", tags = "1")]
            pub has_id: ::core::option::Option<errordata_threads_values::HasId>,
            #[prost(oneof = "errordata_threads_values::HasMain", tags = "2")]
            pub has_main: ::core::option::Option<errordata_threads_values::HasMain>,
        }
        /// Nested message and enum types in `ErrordataThreadsValues`.
        pub mod errordata_threads_values {
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasId {
                #[prost(message, tag = "1")]
                Id(::prost_types::Value),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasMain {
                #[prost(bool, tag = "2")]
                Main(bool),
            }
        }
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ErrordataUser {
        #[prost(message, optional, tag = "1")]
        pub email: ::core::option::Option<::prost_types::Value>,
        #[prost(map = "string, message", tag = "2")]
        pub geo: ::std::collections::HashMap<::prost::alloc::string::String, ::prost_types::Value>,
        #[prost(message, optional, tag = "3")]
        pub id: ::core::option::Option<::prost_types::Value>,
        #[prost(message, optional, tag = "5")]
        pub username: ::core::option::Option<::prost_types::Value>,
        #[prost(oneof = "errordata_user::HasIpAddress", tags = "4")]
        pub has_ip_address: ::core::option::Option<errordata_user::HasIpAddress>,
    }
    /// Nested message and enum types in `ErrordataUser`.
    pub mod errordata_user {
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasIpAddress {
            #[prost(string, tag = "4")]
            IpAddress(::prost::alloc::string::String),
        }
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasContexts {
        #[prost(message, tag = "1")]
        Contexts(ErrordataContexts),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasException {
        #[prost(message, tag = "4")]
        Exception(ErrordataException),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasLocation {
        #[prost(string, tag = "6")]
        Location(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasRequest {
        #[prost(message, tag = "9")]
        Request(ErrordataRequest),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasSdk {
        #[prost(message, tag = "10")]
        Sdk(ErrordataSdk),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasThreads {
        #[prost(message, tag = "12")]
        Threads(ErrordataThreads),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasUser {
        #[prost(message, tag = "15")]
        User(ErrordataUser),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasVersion {
        #[prost(string, tag = "16")]
        Version(::prost::alloc::string::String),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Errormessage {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<Errordata>,
    #[prost(string, tag = "2")]
    pub datetime: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub event_id: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub group_id: i64,
    #[prost(string, tag = "5")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub primary_hash: ::prost::alloc::string::String,
    #[prost(int64, tag = "8")]
    pub project_id: i64,
    #[prost(oneof = "errormessage::HasPlatform", tags = "6")]
    pub has_platform: ::core::option::Option<errormessage::HasPlatform>,
    #[prost(oneof = "errormessage::HasRetentionDays", tags = "9")]
    pub has_retention_days: ::core::option::Option<errormessage::HasRetentionDays>,
}
/// Nested message and enum types in `Errormessage`.
pub mod errormessage {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasPlatform {
        #[prost(string, tag = "6")]
        Platform(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasRetentionDays {
        #[prost(int64, tag = "9")]
        RetentionDays(i64),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Exception {
    #[prost(message, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<exception::ExceptionValues>,
}
/// Nested message and enum types in `Exception`.
pub mod exception {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ExceptionValues {
        #[prost(message, optional, tag = "4")]
        pub r#type: ::core::option::Option<::prost_types::Value>,
        #[prost(message, optional, tag = "5")]
        pub value: ::core::option::Option<::prost_types::Value>,
        #[prost(oneof = "exception_values::HasMechanism", tags = "1")]
        pub has_mechanism: ::core::option::Option<exception_values::HasMechanism>,
        #[prost(oneof = "exception_values::HasStacktrace", tags = "2")]
        pub has_stacktrace: ::core::option::Option<exception_values::HasStacktrace>,
        #[prost(oneof = "exception_values::HasThreadId", tags = "3")]
        pub has_thread_id: ::core::option::Option<exception_values::HasThreadId>,
    }
    /// Nested message and enum types in `ExceptionValues`.
    pub mod exception_values {
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ExceptionValuesMechanism {
            #[prost(message, optional, tag = "1")]
            pub handled: ::core::option::Option<::prost_types::Value>,
            #[prost(message, optional, tag = "2")]
            pub r#type: ::core::option::Option<::prost_types::Value>,
        }
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ExceptionValuesStacktrace {
            #[prost(message, repeated, tag = "1")]
            pub frames: ::prost::alloc::vec::Vec<
                exception_values_stacktrace::ExceptionValuesStacktraceFrames,
            >,
        }
        /// Nested message and enum types in `ExceptionValuesStacktrace`.
        pub mod exception_values_stacktrace {
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct ExceptionValuesStacktraceFrames {
                #[prost(message, optional, tag = "1")]
                pub abs_path: ::core::option::Option<::prost_types::Value>,
                #[prost(message, optional, tag = "3")]
                pub filename: ::core::option::Option<::prost_types::Value>,
                #[prost(message, optional, tag = "4")]
                pub function: ::core::option::Option<::prost_types::Value>,
                #[prost(message, optional, tag = "7")]
                pub module: ::core::option::Option<::prost_types::Value>,
                #[prost(message, optional, tag = "8")]
                pub package: ::core::option::Option<::prost_types::Value>,
                #[prost(oneof = "exception_values_stacktrace_frames::HasColno", tags = "2")]
                pub has_colno: ::core::option::Option<exception_values_stacktrace_frames::HasColno>,
                #[prost(oneof = "exception_values_stacktrace_frames::HasInApp", tags = "5")]
                pub has_in_app:
                    ::core::option::Option<exception_values_stacktrace_frames::HasInApp>,
                #[prost(oneof = "exception_values_stacktrace_frames::HasLineno", tags = "6")]
                pub has_lineno:
                    ::core::option::Option<exception_values_stacktrace_frames::HasLineno>,
            }
            /// Nested message and enum types in `ExceptionValuesStacktraceFrames`.
            pub mod exception_values_stacktrace_frames {
                #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                pub enum HasColno {
                    #[prost(int64, tag = "2")]
                    Colno(i64),
                }
                #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                pub enum HasInApp {
                    #[prost(bool, tag = "5")]
                    InApp(bool),
                }
                #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                pub enum HasLineno {
                    #[prost(int64, tag = "6")]
                    Lineno(i64),
                }
            }
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasMechanism {
            #[prost(message, tag = "1")]
            Mechanism(ExceptionValuesMechanism),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasStacktrace {
            #[prost(message, tag = "2")]
            Stacktrace(ExceptionValuesStacktrace),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasThreadId {
            #[prost(message, tag = "3")]
            ThreadId(::prost_types::Value),
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Exceptionmechanism {
    #[prost(message, optional, tag = "1")]
    pub handled: ::core::option::Option<::prost_types::Value>,
    #[prost(message, optional, tag = "2")]
    pub r#type: ::core::option::Option<::prost_types::Value>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Exceptionvalue {
    #[prost(message, optional, tag = "4")]
    pub r#type: ::core::option::Option<::prost_types::Value>,
    #[prost(message, optional, tag = "5")]
    pub value: ::core::option::Option<::prost_types::Value>,
    #[prost(oneof = "exceptionvalue::HasMechanism", tags = "1")]
    pub has_mechanism: ::core::option::Option<exceptionvalue::HasMechanism>,
    #[prost(oneof = "exceptionvalue::HasStacktrace", tags = "2")]
    pub has_stacktrace: ::core::option::Option<exceptionvalue::HasStacktrace>,
    #[prost(oneof = "exceptionvalue::HasThreadId", tags = "3")]
    pub has_thread_id: ::core::option::Option<exceptionvalue::HasThreadId>,
}
/// Nested message and enum types in `Exceptionvalue`.
pub mod exceptionvalue {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ExceptionvalueMechanism {
        #[prost(message, optional, tag = "1")]
        pub handled: ::core::option::Option<::prost_types::Value>,
        #[prost(message, optional, tag = "2")]
        pub r#type: ::core::option::Option<::prost_types::Value>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ExceptionvalueStacktrace {
        #[prost(message, repeated, tag = "1")]
        pub frames:
            ::prost::alloc::vec::Vec<exceptionvalue_stacktrace::ExceptionvalueStacktraceFrames>,
    }
    /// Nested message and enum types in `ExceptionvalueStacktrace`.
    pub mod exceptionvalue_stacktrace {
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ExceptionvalueStacktraceFrames {
            #[prost(message, optional, tag = "1")]
            pub abs_path: ::core::option::Option<::prost_types::Value>,
            #[prost(message, optional, tag = "3")]
            pub filename: ::core::option::Option<::prost_types::Value>,
            #[prost(message, optional, tag = "4")]
            pub function: ::core::option::Option<::prost_types::Value>,
            #[prost(message, optional, tag = "7")]
            pub module: ::core::option::Option<::prost_types::Value>,
            #[prost(message, optional, tag = "8")]
            pub package: ::core::option::Option<::prost_types::Value>,
            #[prost(oneof = "exceptionvalue_stacktrace_frames::HasColno", tags = "2")]
            pub has_colno: ::core::option::Option<exceptionvalue_stacktrace_frames::HasColno>,
            #[prost(oneof = "exceptionvalue_stacktrace_frames::HasInApp", tags = "5")]
            pub has_in_app: ::core::option::Option<exceptionvalue_stacktrace_frames::HasInApp>,
            #[prost(oneof = "exceptionvalue_stacktrace_frames::HasLineno", tags = "6")]
            pub has_lineno: ::core::option::Option<exceptionvalue_stacktrace_frames::HasLineno>,
        }
        /// Nested message and enum types in `ExceptionvalueStacktraceFrames`.
        pub mod exceptionvalue_stacktrace_frames {
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasColno {
                #[prost(int64, tag = "2")]
                Colno(i64),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasInApp {
                #[prost(bool, tag = "5")]
                InApp(bool),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasLineno {
                #[prost(int64, tag = "6")]
                Lineno(i64),
            }
        }
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasMechanism {
        #[prost(message, tag = "1")]
        Mechanism(ExceptionvalueMechanism),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasStacktrace {
        #[prost(message, tag = "2")]
        Stacktrace(ExceptionvalueStacktrace),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasThreadId {
        #[prost(message, tag = "3")]
        ThreadId(::prost_types::Value),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Inserteventmessage {
    #[prost(int64, tag = "1")]
    pub a0: i64,
    #[prost(string, tag = "2")]
    pub a1: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub a2: ::core::option::Option<Errormessage>,
    #[prost(message, optional, tag = "4")]
    pub a3: ::core::option::Option<::prost_types::Value>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Replaycontext {
    #[prost(oneof = "replaycontext::HasReplayId", tags = "1")]
    pub has_replay_id: ::core::option::Option<replaycontext::HasReplayId>,
}
/// Nested message and enum types in `Replaycontext`.
pub mod replaycontext {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasReplayId {
        #[prost(string, tag = "1")]
        ReplayId(::prost::alloc::string::String),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Request {
    #[prost(message, repeated, tag = "1")]
    pub headers: ::prost::alloc::vec::Vec<request::RequestHeaders>,
    #[prost(message, optional, tag = "2")]
    pub method: ::core::option::Option<::prost_types::Value>,
}
/// Nested message and enum types in `Request`.
pub mod request {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct RequestHeaders {
        #[prost(string, tag = "1")]
        pub a0: ::prost::alloc::string::String,
        #[prost(message, optional, tag = "2")]
        pub a1: ::core::option::Option<::prost_types::Value>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sdk {
    #[prost(message, repeated, tag = "1")]
    pub integrations: ::prost::alloc::vec::Vec<::prost_types::Value>,
    #[prost(message, optional, tag = "2")]
    pub name: ::core::option::Option<::prost_types::Value>,
    #[prost(message, optional, tag = "3")]
    pub version: ::core::option::Option<::prost_types::Value>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Stackframe {
    #[prost(message, optional, tag = "1")]
    pub abs_path: ::core::option::Option<::prost_types::Value>,
    #[prost(message, optional, tag = "3")]
    pub filename: ::core::option::Option<::prost_types::Value>,
    #[prost(message, optional, tag = "4")]
    pub function: ::core::option::Option<::prost_types::Value>,
    #[prost(message, optional, tag = "7")]
    pub module: ::core::option::Option<::prost_types::Value>,
    #[prost(message, optional, tag = "8")]
    pub package: ::core::option::Option<::prost_types::Value>,
    #[prost(oneof = "stackframe::HasColno", tags = "2")]
    pub has_colno: ::core::option::Option<stackframe::HasColno>,
    #[prost(oneof = "stackframe::HasInApp", tags = "5")]
    pub has_in_app: ::core::option::Option<stackframe::HasInApp>,
    #[prost(oneof = "stackframe::HasLineno", tags = "6")]
    pub has_lineno: ::core::option::Option<stackframe::HasLineno>,
}
/// Nested message and enum types in `Stackframe`.
pub mod stackframe {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasColno {
        #[prost(int64, tag = "2")]
        Colno(i64),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasInApp {
        #[prost(bool, tag = "5")]
        InApp(bool),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasLineno {
        #[prost(int64, tag = "6")]
        Lineno(i64),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Stacktrace {
    #[prost(message, repeated, tag = "1")]
    pub frames: ::prost::alloc::vec::Vec<stacktrace::StacktraceFrames>,
}
/// Nested message and enum types in `Stacktrace`.
pub mod stacktrace {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct StacktraceFrames {
        #[prost(message, optional, tag = "1")]
        pub abs_path: ::core::option::Option<::prost_types::Value>,
        #[prost(message, optional, tag = "3")]
        pub filename: ::core::option::Option<::prost_types::Value>,
        #[prost(message, optional, tag = "4")]
        pub function: ::core::option::Option<::prost_types::Value>,
        #[prost(message, optional, tag = "7")]
        pub module: ::core::option::Option<::prost_types::Value>,
        #[prost(message, optional, tag = "8")]
        pub package: ::core::option::Option<::prost_types::Value>,
        #[prost(oneof = "stacktrace_frames::HasColno", tags = "2")]
        pub has_colno: ::core::option::Option<stacktrace_frames::HasColno>,
        #[prost(oneof = "stacktrace_frames::HasInApp", tags = "5")]
        pub has_in_app: ::core::option::Option<stacktrace_frames::HasInApp>,
        #[prost(oneof = "stacktrace_frames::HasLineno", tags = "6")]
        pub has_lineno: ::core::option::Option<stacktrace_frames::HasLineno>,
    }
    /// Nested message and enum types in `StacktraceFrames`.
    pub mod stacktrace_frames {
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasColno {
            #[prost(int64, tag = "2")]
            Colno(i64),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasInApp {
            #[prost(bool, tag = "5")]
            InApp(bool),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasLineno {
            #[prost(int64, tag = "6")]
            Lineno(i64),
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Thread {
    #[prost(message, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<thread::ThreadValues>,
}
/// Nested message and enum types in `Thread`.
pub mod thread {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ThreadValues {
        #[prost(oneof = "thread_values::HasId", tags = "1")]
        pub has_id: ::core::option::Option<thread_values::HasId>,
        #[prost(oneof = "thread_values::HasMain", tags = "2")]
        pub has_main: ::core::option::Option<thread_values::HasMain>,
    }
    /// Nested message and enum types in `ThreadValues`.
    pub mod thread_values {
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasId {
            #[prost(message, tag = "1")]
            Id(::prost_types::Value),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasMain {
            #[prost(bool, tag = "2")]
            Main(bool),
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Threadvalue {
    #[prost(oneof = "threadvalue::HasId", tags = "1")]
    pub has_id: ::core::option::Option<threadvalue::HasId>,
    #[prost(oneof = "threadvalue::HasMain", tags = "2")]
    pub has_main: ::core::option::Option<threadvalue::HasMain>,
}
/// Nested message and enum types in `Threadvalue`.
pub mod threadvalue {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasId {
        #[prost(message, tag = "1")]
        Id(::prost_types::Value),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasMain {
        #[prost(bool, tag = "2")]
        Main(bool),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Tracecontext {
    #[prost(oneof = "tracecontext::HasSampled", tags = "1")]
    pub has_sampled: ::core::option::Option<tracecontext::HasSampled>,
    #[prost(oneof = "tracecontext::HasSpanId", tags = "2")]
    pub has_span_id: ::core::option::Option<tracecontext::HasSpanId>,
    #[prost(oneof = "tracecontext::HasTraceId", tags = "3")]
    pub has_trace_id: ::core::option::Option<tracecontext::HasTraceId>,
}
/// Nested message and enum types in `Tracecontext`.
pub mod tracecontext {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasSampled {
        #[prost(bool, tag = "1")]
        Sampled(bool),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasSpanId {
        #[prost(string, tag = "2")]
        SpanId(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasTraceId {
        #[prost(string, tag = "3")]
        TraceId(::prost::alloc::string::String),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct User {
    #[prost(message, optional, tag = "1")]
    pub email: ::core::option::Option<::prost_types::Value>,
    #[prost(map = "string, message", tag = "2")]
    pub geo: ::std::collections::HashMap<::prost::alloc::string::String, ::prost_types::Value>,
    #[prost(message, optional, tag = "3")]
    pub id: ::core::option::Option<::prost_types::Value>,
    #[prost(message, optional, tag = "5")]
    pub username: ::core::option::Option<::prost_types::Value>,
    #[prost(oneof = "user::HasIpAddress", tags = "4")]
    pub has_ip_address: ::core::option::Option<user::HasIpAddress>,
}
/// Nested message and enum types in `User`.
pub mod user {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasIpAddress {
        #[prost(string, tag = "4")]
        IpAddress(::prost::alloc::string::String),
    }
}
