// This file is @generated by prost-build.
///
/// The sentry v7 event structure.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Event {
    #[prost(map = "string, message", tag = "2")]
    pub contexts: ::std::collections::HashMap<::prost::alloc::string::String, ::prost_types::Value>,
    #[prost(message, repeated, tag = "7")]
    pub errors: ::prost::alloc::vec::Vec<event::EventErrors>,
    #[prost(string, repeated, tag = "11")]
    pub fingerprint: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(map = "string, string", tag = "15")]
    pub modules:
        ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    #[prost(oneof = "event::HasBreadcrumbs", tags = "1")]
    pub has_breadcrumbs: ::core::option::Option<event::HasBreadcrumbs>,
    #[prost(oneof = "event::HasCulprit", tags = "3")]
    pub has_culprit: ::core::option::Option<event::HasCulprit>,
    #[prost(oneof = "event::HasDebugMeta", tags = "4")]
    pub has_debug_meta: ::core::option::Option<event::HasDebugMeta>,
    #[prost(oneof = "event::HasDist", tags = "5")]
    pub has_dist: ::core::option::Option<event::HasDist>,
    #[prost(oneof = "event::HasEnvironment", tags = "6")]
    pub has_environment: ::core::option::Option<event::HasEnvironment>,
    #[prost(oneof = "event::HasEventId", tags = "8")]
    pub has_event_id: ::core::option::Option<event::HasEventId>,
    #[prost(oneof = "event::HasException", tags = "9")]
    pub has_exception: ::core::option::Option<event::HasException>,
    #[prost(oneof = "event::HasExtra", tags = "10")]
    pub has_extra: ::core::option::Option<event::HasExtra>,
    #[prost(oneof = "event::HasLevel", tags = "12")]
    pub has_level: ::core::option::Option<event::HasLevel>,
    #[prost(oneof = "event::HasLogentry", tags = "13")]
    pub has_logentry: ::core::option::Option<event::HasLogentry>,
    #[prost(oneof = "event::HasLogger", tags = "14")]
    pub has_logger: ::core::option::Option<event::HasLogger>,
    #[prost(oneof = "event::HasPlatform", tags = "16")]
    pub has_platform: ::core::option::Option<event::HasPlatform>,
    #[prost(oneof = "event::HasReceived", tags = "17")]
    pub has_received: ::core::option::Option<event::HasReceived>,
    #[prost(oneof = "event::HasRelease", tags = "18")]
    pub has_release: ::core::option::Option<event::HasRelease>,
    #[prost(oneof = "event::HasRequest", tags = "19")]
    pub has_request: ::core::option::Option<event::HasRequest>,
    #[prost(oneof = "event::HasSdk", tags = "20")]
    pub has_sdk: ::core::option::Option<event::HasSdk>,
    #[prost(oneof = "event::HasServerName", tags = "21")]
    pub has_server_name: ::core::option::Option<event::HasServerName>,
    #[prost(oneof = "event::HasStacktrace", tags = "22")]
    pub has_stacktrace: ::core::option::Option<event::HasStacktrace>,
    #[prost(oneof = "event::HasTags", tags = "23")]
    pub has_tags: ::core::option::Option<event::HasTags>,
    #[prost(oneof = "event::HasThreads", tags = "24")]
    pub has_threads: ::core::option::Option<event::HasThreads>,
    #[prost(oneof = "event::HasTimeSpent", tags = "25")]
    pub has_time_spent: ::core::option::Option<event::HasTimeSpent>,
    #[prost(oneof = "event::HasTimestamp", tags = "26")]
    pub has_timestamp: ::core::option::Option<event::HasTimestamp>,
    #[prost(oneof = "event::HasTransaction", tags = "27")]
    pub has_transaction: ::core::option::Option<event::HasTransaction>,
    #[prost(oneof = "event::HasTransactionInfo", tags = "28")]
    pub has_transaction_info: ::core::option::Option<event::HasTransactionInfo>,
    #[prost(oneof = "event::HasType", tags = "29")]
    pub has_type: ::core::option::Option<event::HasType>,
    #[prost(oneof = "event::HasUser", tags = "30")]
    pub has_user: ::core::option::Option<event::HasUser>,
    #[prost(oneof = "event::HasVersion", tags = "31")]
    pub has_version: ::core::option::Option<event::HasVersion>,
}
/// Nested message and enum types in `Event`.
pub mod event {
    ///
    /// List of breadcrumbs recorded before this event.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct EventBreadcrumbs {
        #[prost(message, repeated, tag = "1")]
        pub values: ::prost::alloc::vec::Vec<event_breadcrumbs::EventBreadcrumbsValues>,
    }
    /// Nested message and enum types in `EventBreadcrumbs`.
    pub mod event_breadcrumbs {
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct EventBreadcrumbsValues {
            #[prost(oneof = "event_breadcrumbs_values::HasCategory", tags = "1")]
            pub has_category: ::core::option::Option<event_breadcrumbs_values::HasCategory>,
            #[prost(oneof = "event_breadcrumbs_values::HasData", tags = "2")]
            pub has_data: ::core::option::Option<event_breadcrumbs_values::HasData>,
            #[prost(oneof = "event_breadcrumbs_values::HasEventId", tags = "3")]
            pub has_event_id: ::core::option::Option<event_breadcrumbs_values::HasEventId>,
            #[prost(oneof = "event_breadcrumbs_values::HasLevel", tags = "4")]
            pub has_level: ::core::option::Option<event_breadcrumbs_values::HasLevel>,
            #[prost(oneof = "event_breadcrumbs_values::HasMessage", tags = "5")]
            pub has_message: ::core::option::Option<event_breadcrumbs_values::HasMessage>,
            #[prost(oneof = "event_breadcrumbs_values::HasTimestamp", tags = "6")]
            pub has_timestamp: ::core::option::Option<event_breadcrumbs_values::HasTimestamp>,
            #[prost(oneof = "event_breadcrumbs_values::HasType", tags = "7")]
            pub has_type: ::core::option::Option<event_breadcrumbs_values::HasType>,
        }
        /// Nested message and enum types in `EventBreadcrumbsValues`.
        pub mod event_breadcrumbs_values {
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasCategory {
                #[prost(string, tag = "1")]
                Category(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasData {
                #[prost(message, tag = "2")]
                Data(::prost_types::Value),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasEventId {
                #[prost(string, tag = "3")]
                EventId(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasLevel {
                #[prost(string, tag = "4")]
                Level(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasMessage {
                #[prost(string, tag = "5")]
                Message(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasTimestamp {
                #[prost(message, tag = "6")]
                Timestamp(::prost_types::Value),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasType {
                #[prost(string, tag = "7")]
                Type(::prost::alloc::string::String),
            }
        }
    }
    ///
    /// Meta data for event processing and debugging.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct EventDebugMeta {
        #[prost(message, repeated, tag = "1")]
        pub images: ::prost::alloc::vec::Vec<::prost_types::Value>,
        #[prost(oneof = "event_debug_meta::HasSdkInfo", tags = "2")]
        pub has_sdk_info: ::core::option::Option<event_debug_meta::HasSdkInfo>,
    }
    /// Nested message and enum types in `EventDebugMeta`.
    pub mod event_debug_meta {
        ///
        /// Information about the system SDK (e.g. iOS SDK).
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct EventDebugMetaSdkInfo {
            #[prost(oneof = "event_debug_meta_sdk_info::HasSdkName", tags = "1")]
            pub has_sdk_name: ::core::option::Option<event_debug_meta_sdk_info::HasSdkName>,
            #[prost(oneof = "event_debug_meta_sdk_info::HasVersionMajor", tags = "2")]
            pub has_version_major:
                ::core::option::Option<event_debug_meta_sdk_info::HasVersionMajor>,
            #[prost(oneof = "event_debug_meta_sdk_info::HasVersionMinor", tags = "3")]
            pub has_version_minor:
                ::core::option::Option<event_debug_meta_sdk_info::HasVersionMinor>,
            #[prost(oneof = "event_debug_meta_sdk_info::HasVersionPatchlevel", tags = "4")]
            pub has_version_patchlevel:
                ::core::option::Option<event_debug_meta_sdk_info::HasVersionPatchlevel>,
        }
        /// Nested message and enum types in `EventDebugMetaSdkInfo`.
        pub mod event_debug_meta_sdk_info {
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasSdkName {
                #[prost(string, tag = "1")]
                SdkName(::prost::alloc::string::String),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasVersionMajor {
                #[prost(uint64, tag = "2")]
                VersionMajor(u64),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasVersionMinor {
                #[prost(uint64, tag = "3")]
                VersionMinor(u64),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasVersionPatchlevel {
                #[prost(uint64, tag = "4")]
                VersionPatchlevel(u64),
            }
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasSdkInfo {
            #[prost(message, tag = "2")]
            SdkInfo(EventDebugMetaSdkInfo),
        }
    }
    ///
    /// Errors encountered during processing. Intended to be phased out in favor of
    /// annotation/metadata system.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct EventErrors {
        #[prost(string, tag = "2")]
        pub r#type: ::prost::alloc::string::String,
        #[prost(message, optional, tag = "3")]
        pub value: ::core::option::Option<::prost_types::Value>,
        #[prost(oneof = "event_errors::HasName", tags = "1")]
        pub has_name: ::core::option::Option<event_errors::HasName>,
    }
    /// Nested message and enum types in `EventErrors`.
    pub mod event_errors {
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasName {
            #[prost(string, tag = "1")]
            Name(::prost::alloc::string::String),
        }
    }
    ///
    /// One or multiple chained (nested) exceptions.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct EventException {
        #[prost(message, repeated, tag = "1")]
        pub values: ::prost::alloc::vec::Vec<event_exception::EventExceptionValues>,
    }
    /// Nested message and enum types in `EventException`.
    pub mod event_exception {
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct EventExceptionValues {
            #[prost(oneof = "event_exception_values::HasMechanism", tags = "1")]
            pub has_mechanism: ::core::option::Option<event_exception_values::HasMechanism>,
            #[prost(oneof = "event_exception_values::HasModule", tags = "2")]
            pub has_module: ::core::option::Option<event_exception_values::HasModule>,
            #[prost(oneof = "event_exception_values::HasStacktrace", tags = "3")]
            pub has_stacktrace: ::core::option::Option<event_exception_values::HasStacktrace>,
            #[prost(oneof = "event_exception_values::HasThreadId", tags = "4")]
            pub has_thread_id: ::core::option::Option<event_exception_values::HasThreadId>,
            #[prost(oneof = "event_exception_values::HasType", tags = "5")]
            pub has_type: ::core::option::Option<event_exception_values::HasType>,
            #[prost(oneof = "event_exception_values::HasValue", tags = "6")]
            pub has_value: ::core::option::Option<event_exception_values::HasValue>,
        }
        /// Nested message and enum types in `EventExceptionValues`.
        pub mod event_exception_values {
            ///
            /// Mechanism by which this exception was generated and handled.
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct EventExceptionValuesMechanism {
                #[prost(string, tag = "11")]
                pub r#type: ::prost::alloc::string::String,
                #[prost(oneof = "event_exception_values_mechanism::HasData", tags = "1")]
                pub has_data: ::core::option::Option<event_exception_values_mechanism::HasData>,
                #[prost(oneof = "event_exception_values_mechanism::HasDescription", tags = "2")]
                pub has_description:
                    ::core::option::Option<event_exception_values_mechanism::HasDescription>,
                #[prost(oneof = "event_exception_values_mechanism::HasExceptionId", tags = "3")]
                pub has_exception_id:
                    ::core::option::Option<event_exception_values_mechanism::HasExceptionId>,
                #[prost(oneof = "event_exception_values_mechanism::HasHandled", tags = "4")]
                pub has_handled:
                    ::core::option::Option<event_exception_values_mechanism::HasHandled>,
                #[prost(oneof = "event_exception_values_mechanism::HasHelpLink", tags = "5")]
                pub has_help_link:
                    ::core::option::Option<event_exception_values_mechanism::HasHelpLink>,
                #[prost(
                    oneof = "event_exception_values_mechanism::HasIsExceptionGroup",
                    tags = "6"
                )]
                pub has_is_exception_group:
                    ::core::option::Option<event_exception_values_mechanism::HasIsExceptionGroup>,
                #[prost(oneof = "event_exception_values_mechanism::HasMeta", tags = "7")]
                pub has_meta: ::core::option::Option<event_exception_values_mechanism::HasMeta>,
                #[prost(oneof = "event_exception_values_mechanism::HasParentId", tags = "8")]
                pub has_parent_id:
                    ::core::option::Option<event_exception_values_mechanism::HasParentId>,
                #[prost(oneof = "event_exception_values_mechanism::HasSource", tags = "9")]
                pub has_source: ::core::option::Option<event_exception_values_mechanism::HasSource>,
                #[prost(oneof = "event_exception_values_mechanism::HasSynthetic", tags = "10")]
                pub has_synthetic:
                    ::core::option::Option<event_exception_values_mechanism::HasSynthetic>,
            }
            /// Nested message and enum types in `EventExceptionValuesMechanism`.
            pub mod event_exception_values_mechanism {
                ///
                /// Operating system or runtime meta information.
                #[derive(Clone, PartialEq, ::prost::Message)]
                pub struct EventExceptionValuesMechanismMeta {
                    #[prost(oneof = "event_exception_values_mechanism_meta::HasErrno", tags = "1")]
                    pub has_errno:
                        ::core::option::Option<event_exception_values_mechanism_meta::HasErrno>,
                    #[prost(
                        oneof = "event_exception_values_mechanism_meta::HasMachException",
                        tags = "2"
                    )]
                    pub has_mach_exception: ::core::option::Option<
                        event_exception_values_mechanism_meta::HasMachException,
                    >,
                    #[prost(
                        oneof = "event_exception_values_mechanism_meta::HasNsError",
                        tags = "3"
                    )]
                    pub has_ns_error:
                        ::core::option::Option<event_exception_values_mechanism_meta::HasNsError>,
                    #[prost(
                        oneof = "event_exception_values_mechanism_meta::HasSignal",
                        tags = "4"
                    )]
                    pub has_signal:
                        ::core::option::Option<event_exception_values_mechanism_meta::HasSignal>,
                }
                /// Nested message and enum types in `EventExceptionValuesMechanismMeta`.
                pub mod event_exception_values_mechanism_meta {
                    ///
                    /// Optional ISO C standard error code.
                    #[derive(Clone, PartialEq, ::prost::Message)]
                    pub struct EventExceptionValuesMechanismMetaErrno {
                        #[prost(
                            oneof = "event_exception_values_mechanism_meta_errno::HasName",
                            tags = "1"
                        )]
                        pub has_name: ::core::option::Option<
                            event_exception_values_mechanism_meta_errno::HasName,
                        >,
                        #[prost(
                            oneof = "event_exception_values_mechanism_meta_errno::HasNumber",
                            tags = "2"
                        )]
                        pub has_number: ::core::option::Option<
                            event_exception_values_mechanism_meta_errno::HasNumber,
                        >,
                    }
                    /// Nested message and enum types in `EventExceptionValuesMechanismMetaErrno`.
                    pub mod event_exception_values_mechanism_meta_errno {
                        #[derive(Clone, PartialEq, ::prost::Oneof)]
                        pub enum HasName {
                            #[prost(string, tag = "1")]
                            Name(::prost::alloc::string::String),
                        }
                        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                        pub enum HasNumber {
                            #[prost(int64, tag = "2")]
                            Number(i64),
                        }
                    }
                    ///
                    /// A Mach Exception on Apple systems comprising a code triple and optional descriptions.
                    #[derive(Clone, PartialEq, ::prost::Message)]
                    pub struct EventExceptionValuesMechanismMetaMachException {
                        #[prost(
                            oneof = "event_exception_values_mechanism_meta_mach_exception::HasCode",
                            tags = "1"
                        )]
                        pub has_code: ::core::option::Option<
                            event_exception_values_mechanism_meta_mach_exception::HasCode,
                        >,
                        #[prost(
                            oneof = "event_exception_values_mechanism_meta_mach_exception::HasException",
                            tags = "2"
                        )]
                        pub has_exception: ::core::option::Option<
                            event_exception_values_mechanism_meta_mach_exception::HasException,
                        >,
                        #[prost(
                            oneof = "event_exception_values_mechanism_meta_mach_exception::HasName",
                            tags = "3"
                        )]
                        pub has_name: ::core::option::Option<
                            event_exception_values_mechanism_meta_mach_exception::HasName,
                        >,
                        #[prost(
                            oneof = "event_exception_values_mechanism_meta_mach_exception::HasSubcode",
                            tags = "4"
                        )]
                        pub has_subcode: ::core::option::Option<
                            event_exception_values_mechanism_meta_mach_exception::HasSubcode,
                        >,
                    }
                    /// Nested message and enum types in `EventExceptionValuesMechanismMetaMachException`.
                    pub mod event_exception_values_mechanism_meta_mach_exception {
                        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                        pub enum HasCode {
                            #[prost(uint64, tag = "1")]
                            Code(u64),
                        }
                        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                        pub enum HasException {
                            #[prost(int64, tag = "2")]
                            Exception(i64),
                        }
                        #[derive(Clone, PartialEq, ::prost::Oneof)]
                        pub enum HasName {
                            #[prost(string, tag = "3")]
                            Name(::prost::alloc::string::String),
                        }
                        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                        pub enum HasSubcode {
                            #[prost(uint64, tag = "4")]
                            Subcode(u64),
                        }
                    }
                    ///
                    /// An NSError on Apple systems comprising code and signal.
                    #[derive(Clone, PartialEq, ::prost::Message)]
                    pub struct EventExceptionValuesMechanismMetaNsError {
                        #[prost(
                            oneof = "event_exception_values_mechanism_meta_ns_error::HasCode",
                            tags = "1"
                        )]
                        pub has_code: ::core::option::Option<
                            event_exception_values_mechanism_meta_ns_error::HasCode,
                        >,
                        #[prost(
                            oneof = "event_exception_values_mechanism_meta_ns_error::HasDomain",
                            tags = "2"
                        )]
                        pub has_domain: ::core::option::Option<
                            event_exception_values_mechanism_meta_ns_error::HasDomain,
                        >,
                    }
                    /// Nested message and enum types in `EventExceptionValuesMechanismMetaNsError`.
                    pub mod event_exception_values_mechanism_meta_ns_error {
                        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                        pub enum HasCode {
                            #[prost(int64, tag = "1")]
                            Code(i64),
                        }
                        #[derive(Clone, PartialEq, ::prost::Oneof)]
                        pub enum HasDomain {
                            #[prost(string, tag = "2")]
                            Domain(::prost::alloc::string::String),
                        }
                    }
                    ///
                    /// Information on the POSIX signal.
                    #[derive(Clone, PartialEq, ::prost::Message)]
                    pub struct EventExceptionValuesMechanismMetaSignal {
                        #[prost(
                            oneof = "event_exception_values_mechanism_meta_signal::HasCode",
                            tags = "1"
                        )]
                        pub has_code: ::core::option::Option<
                            event_exception_values_mechanism_meta_signal::HasCode,
                        >,
                        #[prost(
                            oneof = "event_exception_values_mechanism_meta_signal::HasCodeName",
                            tags = "2"
                        )]
                        pub has_code_name: ::core::option::Option<
                            event_exception_values_mechanism_meta_signal::HasCodeName,
                        >,
                        #[prost(
                            oneof = "event_exception_values_mechanism_meta_signal::HasName",
                            tags = "3"
                        )]
                        pub has_name: ::core::option::Option<
                            event_exception_values_mechanism_meta_signal::HasName,
                        >,
                        #[prost(
                            oneof = "event_exception_values_mechanism_meta_signal::HasNumber",
                            tags = "4"
                        )]
                        pub has_number: ::core::option::Option<
                            event_exception_values_mechanism_meta_signal::HasNumber,
                        >,
                    }
                    /// Nested message and enum types in `EventExceptionValuesMechanismMetaSignal`.
                    pub mod event_exception_values_mechanism_meta_signal {
                        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                        pub enum HasCode {
                            #[prost(int64, tag = "1")]
                            Code(i64),
                        }
                        #[derive(Clone, PartialEq, ::prost::Oneof)]
                        pub enum HasCodeName {
                            #[prost(string, tag = "2")]
                            CodeName(::prost::alloc::string::String),
                        }
                        #[derive(Clone, PartialEq, ::prost::Oneof)]
                        pub enum HasName {
                            #[prost(string, tag = "3")]
                            Name(::prost::alloc::string::String),
                        }
                        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                        pub enum HasNumber {
                            #[prost(int64, tag = "4")]
                            Number(i64),
                        }
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasErrno {
                        #[prost(message, tag = "1")]
                        Errno(EventExceptionValuesMechanismMetaErrno),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasMachException {
                        #[prost(message, tag = "2")]
                        MachException(EventExceptionValuesMechanismMetaMachException),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasNsError {
                        #[prost(message, tag = "3")]
                        NsError(EventExceptionValuesMechanismMetaNsError),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasSignal {
                        #[prost(message, tag = "4")]
                        Signal(EventExceptionValuesMechanismMetaSignal),
                    }
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasData {
                    #[prost(message, tag = "1")]
                    Data(::prost_types::Value),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasDescription {
                    #[prost(string, tag = "2")]
                    Description(::prost::alloc::string::String),
                }
                #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                pub enum HasExceptionId {
                    #[prost(uint64, tag = "3")]
                    ExceptionId(u64),
                }
                #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                pub enum HasHandled {
                    #[prost(bool, tag = "4")]
                    Handled(bool),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasHelpLink {
                    #[prost(string, tag = "5")]
                    HelpLink(::prost::alloc::string::String),
                }
                #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                pub enum HasIsExceptionGroup {
                    #[prost(bool, tag = "6")]
                    IsExceptionGroup(bool),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasMeta {
                    #[prost(message, tag = "7")]
                    Meta(EventExceptionValuesMechanismMeta),
                }
                #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                pub enum HasParentId {
                    #[prost(uint64, tag = "8")]
                    ParentId(u64),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasSource {
                    #[prost(string, tag = "9")]
                    Source(::prost::alloc::string::String),
                }
                #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                pub enum HasSynthetic {
                    #[prost(bool, tag = "10")]
                    Synthetic(bool),
                }
            }
            ///
            /// Stack trace containing frames of this exception.
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct EventExceptionValuesStacktrace {
                #[prost(message, repeated, tag = "1")]
                pub frames: ::prost::alloc::vec::Vec<
                    event_exception_values_stacktrace::EventExceptionValuesStacktraceFrames,
                >,
                #[prost(map = "string, string", tag = "4")]
                pub registers: ::std::collections::HashMap<
                    ::prost::alloc::string::String,
                    ::prost::alloc::string::String,
                >,
                #[prost(
                    oneof = "event_exception_values_stacktrace::HasInstructionAddrAdjustment",
                    tags = "2"
                )]
                pub has_instruction_addr_adjustment: ::core::option::Option<
                    event_exception_values_stacktrace::HasInstructionAddrAdjustment,
                >,
                #[prost(oneof = "event_exception_values_stacktrace::HasLang", tags = "3")]
                pub has_lang: ::core::option::Option<event_exception_values_stacktrace::HasLang>,
                #[prost(oneof = "event_exception_values_stacktrace::HasSnapshot", tags = "5")]
                pub has_snapshot:
                    ::core::option::Option<event_exception_values_stacktrace::HasSnapshot>,
            }
            /// Nested message and enum types in `EventExceptionValuesStacktrace`.
            pub mod event_exception_values_stacktrace {
                ///
                /// Required. A non-empty list of stack frames. The list is ordered from caller to callee, or
                /// oldest to youngest. The last frame is the one creating the exception.
                #[derive(Clone, PartialEq, ::prost::Message)]
                pub struct EventExceptionValuesStacktraceFrames {
                    #[prost(string, repeated, tag = "16")]
                    pub post_context: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
                    #[prost(string, repeated, tag = "17")]
                    pub pre_context: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
                    #[prost(
                        oneof = "event_exception_values_stacktrace_frames::HasAbsPath",
                        tags = "1"
                    )]
                    pub has_abs_path: ::core::option::Option<
                        event_exception_values_stacktrace_frames::HasAbsPath,
                    >,
                    #[prost(
                        oneof = "event_exception_values_stacktrace_frames::HasAddrMode",
                        tags = "2"
                    )]
                    pub has_addr_mode: ::core::option::Option<
                        event_exception_values_stacktrace_frames::HasAddrMode,
                    >,
                    #[prost(
                        oneof = "event_exception_values_stacktrace_frames::HasColno",
                        tags = "3"
                    )]
                    pub has_colno:
                        ::core::option::Option<event_exception_values_stacktrace_frames::HasColno>,
                    #[prost(
                        oneof = "event_exception_values_stacktrace_frames::HasContextLine",
                        tags = "4"
                    )]
                    pub has_context_line: ::core::option::Option<
                        event_exception_values_stacktrace_frames::HasContextLine,
                    >,
                    #[prost(
                        oneof = "event_exception_values_stacktrace_frames::HasFilename",
                        tags = "5"
                    )]
                    pub has_filename: ::core::option::Option<
                        event_exception_values_stacktrace_frames::HasFilename,
                    >,
                    #[prost(
                        oneof = "event_exception_values_stacktrace_frames::HasFunction",
                        tags = "6"
                    )]
                    pub has_function: ::core::option::Option<
                        event_exception_values_stacktrace_frames::HasFunction,
                    >,
                    #[prost(
                        oneof = "event_exception_values_stacktrace_frames::HasFunctionId",
                        tags = "7"
                    )]
                    pub has_function_id: ::core::option::Option<
                        event_exception_values_stacktrace_frames::HasFunctionId,
                    >,
                    #[prost(
                        oneof = "event_exception_values_stacktrace_frames::HasImageAddr",
                        tags = "8"
                    )]
                    pub has_image_addr: ::core::option::Option<
                        event_exception_values_stacktrace_frames::HasImageAddr,
                    >,
                    #[prost(
                        oneof = "event_exception_values_stacktrace_frames::HasInApp",
                        tags = "9"
                    )]
                    pub has_in_app:
                        ::core::option::Option<event_exception_values_stacktrace_frames::HasInApp>,
                    #[prost(
                        oneof = "event_exception_values_stacktrace_frames::HasInstructionAddr",
                        tags = "10"
                    )]
                    pub has_instruction_addr: ::core::option::Option<
                        event_exception_values_stacktrace_frames::HasInstructionAddr,
                    >,
                    #[prost(
                        oneof = "event_exception_values_stacktrace_frames::HasLineno",
                        tags = "11"
                    )]
                    pub has_lineno:
                        ::core::option::Option<event_exception_values_stacktrace_frames::HasLineno>,
                    #[prost(
                        oneof = "event_exception_values_stacktrace_frames::HasLock",
                        tags = "12"
                    )]
                    pub has_lock:
                        ::core::option::Option<event_exception_values_stacktrace_frames::HasLock>,
                    #[prost(
                        oneof = "event_exception_values_stacktrace_frames::HasModule",
                        tags = "13"
                    )]
                    pub has_module:
                        ::core::option::Option<event_exception_values_stacktrace_frames::HasModule>,
                    #[prost(
                        oneof = "event_exception_values_stacktrace_frames::HasPackage",
                        tags = "14"
                    )]
                    pub has_package: ::core::option::Option<
                        event_exception_values_stacktrace_frames::HasPackage,
                    >,
                    #[prost(
                        oneof = "event_exception_values_stacktrace_frames::HasPlatform",
                        tags = "15"
                    )]
                    pub has_platform: ::core::option::Option<
                        event_exception_values_stacktrace_frames::HasPlatform,
                    >,
                    #[prost(
                        oneof = "event_exception_values_stacktrace_frames::HasRawFunction",
                        tags = "18"
                    )]
                    pub has_raw_function: ::core::option::Option<
                        event_exception_values_stacktrace_frames::HasRawFunction,
                    >,
                    #[prost(
                        oneof = "event_exception_values_stacktrace_frames::HasStackStart",
                        tags = "19"
                    )]
                    pub has_stack_start: ::core::option::Option<
                        event_exception_values_stacktrace_frames::HasStackStart,
                    >,
                    #[prost(
                        oneof = "event_exception_values_stacktrace_frames::HasSymbol",
                        tags = "20"
                    )]
                    pub has_symbol:
                        ::core::option::Option<event_exception_values_stacktrace_frames::HasSymbol>,
                    #[prost(
                        oneof = "event_exception_values_stacktrace_frames::HasSymbolAddr",
                        tags = "21"
                    )]
                    pub has_symbol_addr: ::core::option::Option<
                        event_exception_values_stacktrace_frames::HasSymbolAddr,
                    >,
                    #[prost(
                        oneof = "event_exception_values_stacktrace_frames::HasVars",
                        tags = "22"
                    )]
                    pub has_vars:
                        ::core::option::Option<event_exception_values_stacktrace_frames::HasVars>,
                }
                /// Nested message and enum types in `EventExceptionValuesStacktraceFrames`.
                pub mod event_exception_values_stacktrace_frames {
                    ///
                    /// A possible lock (java monitor object) held by this frame.
                    #[derive(Clone, PartialEq, ::prost::Message)]
                    pub struct EventExceptionValuesStacktraceFramesLock {
                        #[prost(string, tag = "5")]
                        pub r#type: ::prost::alloc::string::String,
                        #[prost(
                            oneof = "event_exception_values_stacktrace_frames_lock::HasAddress",
                            tags = "1"
                        )]
                        pub has_address: ::core::option::Option<
                            event_exception_values_stacktrace_frames_lock::HasAddress,
                        >,
                        #[prost(
                            oneof = "event_exception_values_stacktrace_frames_lock::HasClassName",
                            tags = "2"
                        )]
                        pub has_class_name: ::core::option::Option<
                            event_exception_values_stacktrace_frames_lock::HasClassName,
                        >,
                        #[prost(
                            oneof = "event_exception_values_stacktrace_frames_lock::HasPackageName",
                            tags = "3"
                        )]
                        pub has_package_name: ::core::option::Option<
                            event_exception_values_stacktrace_frames_lock::HasPackageName,
                        >,
                        #[prost(
                            oneof = "event_exception_values_stacktrace_frames_lock::HasThreadId",
                            tags = "4"
                        )]
                        pub has_thread_id: ::core::option::Option<
                            event_exception_values_stacktrace_frames_lock::HasThreadId,
                        >,
                    }
                    /// Nested message and enum types in `EventExceptionValuesStacktraceFramesLock`.
                    pub mod event_exception_values_stacktrace_frames_lock {
                        #[derive(Clone, PartialEq, ::prost::Oneof)]
                        pub enum HasAddress {
                            #[prost(string, tag = "1")]
                            Address(::prost::alloc::string::String),
                        }
                        #[derive(Clone, PartialEq, ::prost::Oneof)]
                        pub enum HasClassName {
                            #[prost(string, tag = "2")]
                            ClassName(::prost::alloc::string::String),
                        }
                        #[derive(Clone, PartialEq, ::prost::Oneof)]
                        pub enum HasPackageName {
                            #[prost(string, tag = "3")]
                            PackageName(::prost::alloc::string::String),
                        }
                        #[derive(Clone, PartialEq, ::prost::Oneof)]
                        pub enum HasThreadId {
                            #[prost(message, tag = "4")]
                            ThreadId(::prost_types::Value),
                        }
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasAbsPath {
                        #[prost(string, tag = "1")]
                        AbsPath(::prost::alloc::string::String),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasAddrMode {
                        #[prost(string, tag = "2")]
                        AddrMode(::prost::alloc::string::String),
                    }
                    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                    pub enum HasColno {
                        #[prost(uint64, tag = "3")]
                        Colno(u64),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasContextLine {
                        #[prost(string, tag = "4")]
                        ContextLine(::prost::alloc::string::String),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasFilename {
                        #[prost(string, tag = "5")]
                        Filename(::prost::alloc::string::String),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasFunction {
                        #[prost(string, tag = "6")]
                        Function(::prost::alloc::string::String),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasFunctionId {
                        #[prost(string, tag = "7")]
                        FunctionId(::prost::alloc::string::String),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasImageAddr {
                        #[prost(string, tag = "8")]
                        ImageAddr(::prost::alloc::string::String),
                    }
                    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                    pub enum HasInApp {
                        #[prost(bool, tag = "9")]
                        InApp(bool),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasInstructionAddr {
                        #[prost(string, tag = "10")]
                        InstructionAddr(::prost::alloc::string::String),
                    }
                    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                    pub enum HasLineno {
                        #[prost(uint64, tag = "11")]
                        Lineno(u64),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasLock {
                        #[prost(message, tag = "12")]
                        Lock(EventExceptionValuesStacktraceFramesLock),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasModule {
                        #[prost(string, tag = "13")]
                        Module(::prost::alloc::string::String),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasPackage {
                        #[prost(string, tag = "14")]
                        Package(::prost::alloc::string::String),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasPlatform {
                        #[prost(string, tag = "15")]
                        Platform(::prost::alloc::string::String),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasRawFunction {
                        #[prost(string, tag = "18")]
                        RawFunction(::prost::alloc::string::String),
                    }
                    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                    pub enum HasStackStart {
                        #[prost(bool, tag = "19")]
                        StackStart(bool),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasSymbol {
                        #[prost(string, tag = "20")]
                        Symbol(::prost::alloc::string::String),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasSymbolAddr {
                        #[prost(string, tag = "21")]
                        SymbolAddr(::prost::alloc::string::String),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasVars {
                        #[prost(message, tag = "22")]
                        Vars(::prost_types::Value),
                    }
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasInstructionAddrAdjustment {
                    #[prost(string, tag = "2")]
                    InstructionAddrAdjustment(::prost::alloc::string::String),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasLang {
                    #[prost(string, tag = "3")]
                    Lang(::prost::alloc::string::String),
                }
                #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                pub enum HasSnapshot {
                    #[prost(bool, tag = "5")]
                    Snapshot(bool),
                }
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasMechanism {
                #[prost(message, tag = "1")]
                Mechanism(EventExceptionValuesMechanism),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasModule {
                #[prost(string, tag = "2")]
                Module(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasStacktrace {
                #[prost(message, tag = "3")]
                Stacktrace(EventExceptionValuesStacktrace),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasThreadId {
                #[prost(message, tag = "4")]
                ThreadId(::prost_types::Value),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasType {
                #[prost(string, tag = "5")]
                Type(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasValue {
                #[prost(string, tag = "6")]
                Value(::prost::alloc::string::String),
            }
        }
    }
    ///
    /// Custom parameterized message for this event.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct EventLogentry {
        #[prost(message, optional, tag = "3")]
        pub params: ::core::option::Option<::prost_types::Value>,
        #[prost(oneof = "event_logentry::HasFormatted", tags = "1")]
        pub has_formatted: ::core::option::Option<event_logentry::HasFormatted>,
        #[prost(oneof = "event_logentry::HasMessage", tags = "2")]
        pub has_message: ::core::option::Option<event_logentry::HasMessage>,
    }
    /// Nested message and enum types in `EventLogentry`.
    pub mod event_logentry {
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasFormatted {
            #[prost(string, tag = "1")]
            Formatted(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasMessage {
            #[prost(string, tag = "2")]
            Message(::prost::alloc::string::String),
        }
    }
    ///
    /// Information about a web request that occurred during the event.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct EventRequest {
        #[prost(message, optional, tag = "4")]
        pub data: ::core::option::Option<::prost_types::Value>,
        #[prost(oneof = "event_request::HasApiTarget", tags = "1")]
        pub has_api_target: ::core::option::Option<event_request::HasApiTarget>,
        #[prost(oneof = "event_request::HasBodySize", tags = "2")]
        pub has_body_size: ::core::option::Option<event_request::HasBodySize>,
        #[prost(oneof = "event_request::HasCookies", tags = "3")]
        pub has_cookies: ::core::option::Option<event_request::HasCookies>,
        #[prost(oneof = "event_request::HasEnv", tags = "5")]
        pub has_env: ::core::option::Option<event_request::HasEnv>,
        #[prost(oneof = "event_request::HasFragment", tags = "6")]
        pub has_fragment: ::core::option::Option<event_request::HasFragment>,
        #[prost(oneof = "event_request::HasHeaders", tags = "7")]
        pub has_headers: ::core::option::Option<event_request::HasHeaders>,
        #[prost(oneof = "event_request::HasInferredContentType", tags = "8")]
        pub has_inferred_content_type:
            ::core::option::Option<event_request::HasInferredContentType>,
        #[prost(oneof = "event_request::HasMethod", tags = "9")]
        pub has_method: ::core::option::Option<event_request::HasMethod>,
        #[prost(oneof = "event_request::HasProtocol", tags = "10")]
        pub has_protocol: ::core::option::Option<event_request::HasProtocol>,
        #[prost(oneof = "event_request::HasQueryString", tags = "11")]
        pub has_query_string: ::core::option::Option<event_request::HasQueryString>,
        #[prost(oneof = "event_request::HasUrl", tags = "12")]
        pub has_url: ::core::option::Option<event_request::HasUrl>,
    }
    /// Nested message and enum types in `EventRequest`.
    pub mod event_request {
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasApiTarget {
            #[prost(string, tag = "1")]
            ApiTarget(::prost::alloc::string::String),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasBodySize {
            #[prost(uint64, tag = "2")]
            BodySize(u64),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasCookies {
            #[prost(message, tag = "3")]
            Cookies(::prost_types::Value),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasEnv {
            #[prost(message, tag = "5")]
            Env(::prost_types::Value),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasFragment {
            #[prost(string, tag = "6")]
            Fragment(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasHeaders {
            #[prost(message, tag = "7")]
            Headers(::prost_types::Value),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasInferredContentType {
            #[prost(string, tag = "8")]
            InferredContentType(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasMethod {
            #[prost(string, tag = "9")]
            Method(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasProtocol {
            #[prost(string, tag = "10")]
            Protocol(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasQueryString {
            #[prost(message, tag = "11")]
            QueryString(::prost_types::Value),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasUrl {
            #[prost(string, tag = "12")]
            Url(::prost::alloc::string::String),
        }
    }
    ///
    /// Information about the Sentry SDK that generated this event.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct EventSdk {
        #[prost(string, repeated, tag = "1")]
        pub integrations: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(string, tag = "2")]
        pub name: ::prost::alloc::string::String,
        #[prost(message, repeated, tag = "3")]
        pub packages: ::prost::alloc::vec::Vec<event_sdk::EventSdkPackages>,
        #[prost(string, tag = "4")]
        pub version: ::prost::alloc::string::String,
    }
    /// Nested message and enum types in `EventSdk`.
    pub mod event_sdk {
        ///
        /// List of installed and loaded SDK packages. _Optional._
        ///
        /// A list of packages that were installed as part of this SDK or the activated integrations.
        /// Each package consists of a name in the format `source:identifier` and `version`. If the
        /// source is a Git repository, the `source` should be `git`, the identifier should be a
        /// checkout link and the version should be a Git reference (branch, tag or SHA).
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct EventSdkPackages {
            #[prost(oneof = "event_sdk_packages::HasName", tags = "1")]
            pub has_name: ::core::option::Option<event_sdk_packages::HasName>,
            #[prost(oneof = "event_sdk_packages::HasVersion", tags = "2")]
            pub has_version: ::core::option::Option<event_sdk_packages::HasVersion>,
        }
        /// Nested message and enum types in `EventSdkPackages`.
        pub mod event_sdk_packages {
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasName {
                #[prost(string, tag = "1")]
                Name(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasVersion {
                #[prost(string, tag = "2")]
                Version(::prost::alloc::string::String),
            }
        }
    }
    ///
    /// Event stacktrace.
    ///
    /// DEPRECATED: Prefer `threads` or `exception` depending on which is more appropriate.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct EventStacktrace {
        #[prost(message, repeated, tag = "1")]
        pub frames: ::prost::alloc::vec::Vec<event_stacktrace::EventStacktraceFrames>,
        #[prost(map = "string, string", tag = "4")]
        pub registers: ::std::collections::HashMap<
            ::prost::alloc::string::String,
            ::prost::alloc::string::String,
        >,
        #[prost(oneof = "event_stacktrace::HasInstructionAddrAdjustment", tags = "2")]
        pub has_instruction_addr_adjustment:
            ::core::option::Option<event_stacktrace::HasInstructionAddrAdjustment>,
        #[prost(oneof = "event_stacktrace::HasLang", tags = "3")]
        pub has_lang: ::core::option::Option<event_stacktrace::HasLang>,
        #[prost(oneof = "event_stacktrace::HasSnapshot", tags = "5")]
        pub has_snapshot: ::core::option::Option<event_stacktrace::HasSnapshot>,
    }
    /// Nested message and enum types in `EventStacktrace`.
    pub mod event_stacktrace {
        ///
        /// Required. A non-empty list of stack frames. The list is ordered from caller to callee, or
        /// oldest to youngest. The last frame is the one creating the exception.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct EventStacktraceFrames {
            #[prost(string, repeated, tag = "16")]
            pub post_context: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
            #[prost(string, repeated, tag = "17")]
            pub pre_context: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
            #[prost(oneof = "event_stacktrace_frames::HasAbsPath", tags = "1")]
            pub has_abs_path: ::core::option::Option<event_stacktrace_frames::HasAbsPath>,
            #[prost(oneof = "event_stacktrace_frames::HasAddrMode", tags = "2")]
            pub has_addr_mode: ::core::option::Option<event_stacktrace_frames::HasAddrMode>,
            #[prost(oneof = "event_stacktrace_frames::HasColno", tags = "3")]
            pub has_colno: ::core::option::Option<event_stacktrace_frames::HasColno>,
            #[prost(oneof = "event_stacktrace_frames::HasContextLine", tags = "4")]
            pub has_context_line: ::core::option::Option<event_stacktrace_frames::HasContextLine>,
            #[prost(oneof = "event_stacktrace_frames::HasFilename", tags = "5")]
            pub has_filename: ::core::option::Option<event_stacktrace_frames::HasFilename>,
            #[prost(oneof = "event_stacktrace_frames::HasFunction", tags = "6")]
            pub has_function: ::core::option::Option<event_stacktrace_frames::HasFunction>,
            #[prost(oneof = "event_stacktrace_frames::HasFunctionId", tags = "7")]
            pub has_function_id: ::core::option::Option<event_stacktrace_frames::HasFunctionId>,
            #[prost(oneof = "event_stacktrace_frames::HasImageAddr", tags = "8")]
            pub has_image_addr: ::core::option::Option<event_stacktrace_frames::HasImageAddr>,
            #[prost(oneof = "event_stacktrace_frames::HasInApp", tags = "9")]
            pub has_in_app: ::core::option::Option<event_stacktrace_frames::HasInApp>,
            #[prost(oneof = "event_stacktrace_frames::HasInstructionAddr", tags = "10")]
            pub has_instruction_addr:
                ::core::option::Option<event_stacktrace_frames::HasInstructionAddr>,
            #[prost(oneof = "event_stacktrace_frames::HasLineno", tags = "11")]
            pub has_lineno: ::core::option::Option<event_stacktrace_frames::HasLineno>,
            #[prost(oneof = "event_stacktrace_frames::HasLock", tags = "12")]
            pub has_lock: ::core::option::Option<event_stacktrace_frames::HasLock>,
            #[prost(oneof = "event_stacktrace_frames::HasModule", tags = "13")]
            pub has_module: ::core::option::Option<event_stacktrace_frames::HasModule>,
            #[prost(oneof = "event_stacktrace_frames::HasPackage", tags = "14")]
            pub has_package: ::core::option::Option<event_stacktrace_frames::HasPackage>,
            #[prost(oneof = "event_stacktrace_frames::HasPlatform", tags = "15")]
            pub has_platform: ::core::option::Option<event_stacktrace_frames::HasPlatform>,
            #[prost(oneof = "event_stacktrace_frames::HasRawFunction", tags = "18")]
            pub has_raw_function: ::core::option::Option<event_stacktrace_frames::HasRawFunction>,
            #[prost(oneof = "event_stacktrace_frames::HasStackStart", tags = "19")]
            pub has_stack_start: ::core::option::Option<event_stacktrace_frames::HasStackStart>,
            #[prost(oneof = "event_stacktrace_frames::HasSymbol", tags = "20")]
            pub has_symbol: ::core::option::Option<event_stacktrace_frames::HasSymbol>,
            #[prost(oneof = "event_stacktrace_frames::HasSymbolAddr", tags = "21")]
            pub has_symbol_addr: ::core::option::Option<event_stacktrace_frames::HasSymbolAddr>,
            #[prost(oneof = "event_stacktrace_frames::HasVars", tags = "22")]
            pub has_vars: ::core::option::Option<event_stacktrace_frames::HasVars>,
        }
        /// Nested message and enum types in `EventStacktraceFrames`.
        pub mod event_stacktrace_frames {
            ///
            /// A possible lock (java monitor object) held by this frame.
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct EventStacktraceFramesLock {
                #[prost(string, tag = "5")]
                pub r#type: ::prost::alloc::string::String,
                #[prost(oneof = "event_stacktrace_frames_lock::HasAddress", tags = "1")]
                pub has_address: ::core::option::Option<event_stacktrace_frames_lock::HasAddress>,
                #[prost(oneof = "event_stacktrace_frames_lock::HasClassName", tags = "2")]
                pub has_class_name:
                    ::core::option::Option<event_stacktrace_frames_lock::HasClassName>,
                #[prost(oneof = "event_stacktrace_frames_lock::HasPackageName", tags = "3")]
                pub has_package_name:
                    ::core::option::Option<event_stacktrace_frames_lock::HasPackageName>,
                #[prost(oneof = "event_stacktrace_frames_lock::HasThreadId", tags = "4")]
                pub has_thread_id:
                    ::core::option::Option<event_stacktrace_frames_lock::HasThreadId>,
            }
            /// Nested message and enum types in `EventStacktraceFramesLock`.
            pub mod event_stacktrace_frames_lock {
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasAddress {
                    #[prost(string, tag = "1")]
                    Address(::prost::alloc::string::String),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasClassName {
                    #[prost(string, tag = "2")]
                    ClassName(::prost::alloc::string::String),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasPackageName {
                    #[prost(string, tag = "3")]
                    PackageName(::prost::alloc::string::String),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasThreadId {
                    #[prost(message, tag = "4")]
                    ThreadId(::prost_types::Value),
                }
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasAbsPath {
                #[prost(string, tag = "1")]
                AbsPath(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasAddrMode {
                #[prost(string, tag = "2")]
                AddrMode(::prost::alloc::string::String),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasColno {
                #[prost(uint64, tag = "3")]
                Colno(u64),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasContextLine {
                #[prost(string, tag = "4")]
                ContextLine(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasFilename {
                #[prost(string, tag = "5")]
                Filename(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasFunction {
                #[prost(string, tag = "6")]
                Function(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasFunctionId {
                #[prost(string, tag = "7")]
                FunctionId(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasImageAddr {
                #[prost(string, tag = "8")]
                ImageAddr(::prost::alloc::string::String),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasInApp {
                #[prost(bool, tag = "9")]
                InApp(bool),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasInstructionAddr {
                #[prost(string, tag = "10")]
                InstructionAddr(::prost::alloc::string::String),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasLineno {
                #[prost(uint64, tag = "11")]
                Lineno(u64),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasLock {
                #[prost(message, tag = "12")]
                Lock(EventStacktraceFramesLock),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasModule {
                #[prost(string, tag = "13")]
                Module(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasPackage {
                #[prost(string, tag = "14")]
                Package(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasPlatform {
                #[prost(string, tag = "15")]
                Platform(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasRawFunction {
                #[prost(string, tag = "18")]
                RawFunction(::prost::alloc::string::String),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasStackStart {
                #[prost(bool, tag = "19")]
                StackStart(bool),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasSymbol {
                #[prost(string, tag = "20")]
                Symbol(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasSymbolAddr {
                #[prost(string, tag = "21")]
                SymbolAddr(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasVars {
                #[prost(message, tag = "22")]
                Vars(::prost_types::Value),
            }
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasInstructionAddrAdjustment {
            #[prost(string, tag = "2")]
            InstructionAddrAdjustment(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasLang {
            #[prost(string, tag = "3")]
            Lang(::prost::alloc::string::String),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasSnapshot {
            #[prost(bool, tag = "5")]
            Snapshot(bool),
        }
    }
    ///
    /// Threads that were active when the event occurred.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct EventThreads {
        #[prost(message, repeated, tag = "1")]
        pub values: ::prost::alloc::vec::Vec<event_threads::EventThreadsValues>,
    }
    /// Nested message and enum types in `EventThreads`.
    pub mod event_threads {
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct EventThreadsValues {
            #[prost(map = "string, message", tag = "3")]
            pub held_locks: ::std::collections::HashMap<
                ::prost::alloc::string::String,
                event_threads_values::EventThreadsValuesHeldLocks,
            >,
            #[prost(oneof = "event_threads_values::HasCrashed", tags = "1")]
            pub has_crashed: ::core::option::Option<event_threads_values::HasCrashed>,
            #[prost(oneof = "event_threads_values::HasCurrent", tags = "2")]
            pub has_current: ::core::option::Option<event_threads_values::HasCurrent>,
            #[prost(oneof = "event_threads_values::HasId", tags = "4")]
            pub has_id: ::core::option::Option<event_threads_values::HasId>,
            #[prost(oneof = "event_threads_values::HasMain", tags = "5")]
            pub has_main: ::core::option::Option<event_threads_values::HasMain>,
            #[prost(oneof = "event_threads_values::HasName", tags = "6")]
            pub has_name: ::core::option::Option<event_threads_values::HasName>,
            #[prost(oneof = "event_threads_values::HasStacktrace", tags = "7")]
            pub has_stacktrace: ::core::option::Option<event_threads_values::HasStacktrace>,
            #[prost(oneof = "event_threads_values::HasState", tags = "8")]
            pub has_state: ::core::option::Option<event_threads_values::HasState>,
        }
        /// Nested message and enum types in `EventThreadsValues`.
        pub mod event_threads_values {
            ///
            /// Represents a collection of locks (java monitor objects) held by a thread.
            ///
            /// A map of lock object addresses and their respective lock reason/details.
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct EventThreadsValuesHeldLocks {
                #[prost(string, tag = "5")]
                pub r#type: ::prost::alloc::string::String,
                #[prost(oneof = "event_threads_values_held_locks::HasAddress", tags = "1")]
                pub has_address:
                    ::core::option::Option<event_threads_values_held_locks::HasAddress>,
                #[prost(oneof = "event_threads_values_held_locks::HasClassName", tags = "2")]
                pub has_class_name:
                    ::core::option::Option<event_threads_values_held_locks::HasClassName>,
                #[prost(oneof = "event_threads_values_held_locks::HasPackageName", tags = "3")]
                pub has_package_name:
                    ::core::option::Option<event_threads_values_held_locks::HasPackageName>,
                #[prost(oneof = "event_threads_values_held_locks::HasThreadId", tags = "4")]
                pub has_thread_id:
                    ::core::option::Option<event_threads_values_held_locks::HasThreadId>,
            }
            /// Nested message and enum types in `EventThreadsValuesHeldLocks`.
            pub mod event_threads_values_held_locks {
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasAddress {
                    #[prost(string, tag = "1")]
                    Address(::prost::alloc::string::String),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasClassName {
                    #[prost(string, tag = "2")]
                    ClassName(::prost::alloc::string::String),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasPackageName {
                    #[prost(string, tag = "3")]
                    PackageName(::prost::alloc::string::String),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasThreadId {
                    #[prost(message, tag = "4")]
                    ThreadId(::prost_types::Value),
                }
            }
            ///
            /// Stack trace containing frames of this exception.
            ///
            /// The thread that crashed with an exception should not have a stack trace, but instead, the `thread_id` attribute should be set on the exception and Sentry will connect the two.
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct EventThreadsValuesStacktrace {
                #[prost(message, repeated, tag = "1")]
                pub frames: ::prost::alloc::vec::Vec<
                    event_threads_values_stacktrace::EventThreadsValuesStacktraceFrames,
                >,
                #[prost(map = "string, string", tag = "4")]
                pub registers: ::std::collections::HashMap<
                    ::prost::alloc::string::String,
                    ::prost::alloc::string::String,
                >,
                #[prost(
                    oneof = "event_threads_values_stacktrace::HasInstructionAddrAdjustment",
                    tags = "2"
                )]
                pub has_instruction_addr_adjustment: ::core::option::Option<
                    event_threads_values_stacktrace::HasInstructionAddrAdjustment,
                >,
                #[prost(oneof = "event_threads_values_stacktrace::HasLang", tags = "3")]
                pub has_lang: ::core::option::Option<event_threads_values_stacktrace::HasLang>,
                #[prost(oneof = "event_threads_values_stacktrace::HasSnapshot", tags = "5")]
                pub has_snapshot:
                    ::core::option::Option<event_threads_values_stacktrace::HasSnapshot>,
            }
            /// Nested message and enum types in `EventThreadsValuesStacktrace`.
            pub mod event_threads_values_stacktrace {
                ///
                /// Required. A non-empty list of stack frames. The list is ordered from caller to callee, or
                /// oldest to youngest. The last frame is the one creating the exception.
                #[derive(Clone, PartialEq, ::prost::Message)]
                pub struct EventThreadsValuesStacktraceFrames {
                    #[prost(string, repeated, tag = "16")]
                    pub post_context: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
                    #[prost(string, repeated, tag = "17")]
                    pub pre_context: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
                    #[prost(
                        oneof = "event_threads_values_stacktrace_frames::HasAbsPath",
                        tags = "1"
                    )]
                    pub has_abs_path:
                        ::core::option::Option<event_threads_values_stacktrace_frames::HasAbsPath>,
                    #[prost(
                        oneof = "event_threads_values_stacktrace_frames::HasAddrMode",
                        tags = "2"
                    )]
                    pub has_addr_mode:
                        ::core::option::Option<event_threads_values_stacktrace_frames::HasAddrMode>,
                    #[prost(
                        oneof = "event_threads_values_stacktrace_frames::HasColno",
                        tags = "3"
                    )]
                    pub has_colno:
                        ::core::option::Option<event_threads_values_stacktrace_frames::HasColno>,
                    #[prost(
                        oneof = "event_threads_values_stacktrace_frames::HasContextLine",
                        tags = "4"
                    )]
                    pub has_context_line: ::core::option::Option<
                        event_threads_values_stacktrace_frames::HasContextLine,
                    >,
                    #[prost(
                        oneof = "event_threads_values_stacktrace_frames::HasFilename",
                        tags = "5"
                    )]
                    pub has_filename:
                        ::core::option::Option<event_threads_values_stacktrace_frames::HasFilename>,
                    #[prost(
                        oneof = "event_threads_values_stacktrace_frames::HasFunction",
                        tags = "6"
                    )]
                    pub has_function:
                        ::core::option::Option<event_threads_values_stacktrace_frames::HasFunction>,
                    #[prost(
                        oneof = "event_threads_values_stacktrace_frames::HasFunctionId",
                        tags = "7"
                    )]
                    pub has_function_id: ::core::option::Option<
                        event_threads_values_stacktrace_frames::HasFunctionId,
                    >,
                    #[prost(
                        oneof = "event_threads_values_stacktrace_frames::HasImageAddr",
                        tags = "8"
                    )]
                    pub has_image_addr: ::core::option::Option<
                        event_threads_values_stacktrace_frames::HasImageAddr,
                    >,
                    #[prost(
                        oneof = "event_threads_values_stacktrace_frames::HasInApp",
                        tags = "9"
                    )]
                    pub has_in_app:
                        ::core::option::Option<event_threads_values_stacktrace_frames::HasInApp>,
                    #[prost(
                        oneof = "event_threads_values_stacktrace_frames::HasInstructionAddr",
                        tags = "10"
                    )]
                    pub has_instruction_addr: ::core::option::Option<
                        event_threads_values_stacktrace_frames::HasInstructionAddr,
                    >,
                    #[prost(
                        oneof = "event_threads_values_stacktrace_frames::HasLineno",
                        tags = "11"
                    )]
                    pub has_lineno:
                        ::core::option::Option<event_threads_values_stacktrace_frames::HasLineno>,
                    #[prost(
                        oneof = "event_threads_values_stacktrace_frames::HasLock",
                        tags = "12"
                    )]
                    pub has_lock:
                        ::core::option::Option<event_threads_values_stacktrace_frames::HasLock>,
                    #[prost(
                        oneof = "event_threads_values_stacktrace_frames::HasModule",
                        tags = "13"
                    )]
                    pub has_module:
                        ::core::option::Option<event_threads_values_stacktrace_frames::HasModule>,
                    #[prost(
                        oneof = "event_threads_values_stacktrace_frames::HasPackage",
                        tags = "14"
                    )]
                    pub has_package:
                        ::core::option::Option<event_threads_values_stacktrace_frames::HasPackage>,
                    #[prost(
                        oneof = "event_threads_values_stacktrace_frames::HasPlatform",
                        tags = "15"
                    )]
                    pub has_platform:
                        ::core::option::Option<event_threads_values_stacktrace_frames::HasPlatform>,
                    #[prost(
                        oneof = "event_threads_values_stacktrace_frames::HasRawFunction",
                        tags = "18"
                    )]
                    pub has_raw_function: ::core::option::Option<
                        event_threads_values_stacktrace_frames::HasRawFunction,
                    >,
                    #[prost(
                        oneof = "event_threads_values_stacktrace_frames::HasStackStart",
                        tags = "19"
                    )]
                    pub has_stack_start: ::core::option::Option<
                        event_threads_values_stacktrace_frames::HasStackStart,
                    >,
                    #[prost(
                        oneof = "event_threads_values_stacktrace_frames::HasSymbol",
                        tags = "20"
                    )]
                    pub has_symbol:
                        ::core::option::Option<event_threads_values_stacktrace_frames::HasSymbol>,
                    #[prost(
                        oneof = "event_threads_values_stacktrace_frames::HasSymbolAddr",
                        tags = "21"
                    )]
                    pub has_symbol_addr: ::core::option::Option<
                        event_threads_values_stacktrace_frames::HasSymbolAddr,
                    >,
                    #[prost(
                        oneof = "event_threads_values_stacktrace_frames::HasVars",
                        tags = "22"
                    )]
                    pub has_vars:
                        ::core::option::Option<event_threads_values_stacktrace_frames::HasVars>,
                }
                /// Nested message and enum types in `EventThreadsValuesStacktraceFrames`.
                pub mod event_threads_values_stacktrace_frames {
                    ///
                    /// A possible lock (java monitor object) held by this frame.
                    #[derive(Clone, PartialEq, ::prost::Message)]
                    pub struct EventThreadsValuesStacktraceFramesLock {
                        #[prost(string, tag = "5")]
                        pub r#type: ::prost::alloc::string::String,
                        #[prost(
                            oneof = "event_threads_values_stacktrace_frames_lock::HasAddress",
                            tags = "1"
                        )]
                        pub has_address: ::core::option::Option<
                            event_threads_values_stacktrace_frames_lock::HasAddress,
                        >,
                        #[prost(
                            oneof = "event_threads_values_stacktrace_frames_lock::HasClassName",
                            tags = "2"
                        )]
                        pub has_class_name: ::core::option::Option<
                            event_threads_values_stacktrace_frames_lock::HasClassName,
                        >,
                        #[prost(
                            oneof = "event_threads_values_stacktrace_frames_lock::HasPackageName",
                            tags = "3"
                        )]
                        pub has_package_name: ::core::option::Option<
                            event_threads_values_stacktrace_frames_lock::HasPackageName,
                        >,
                        #[prost(
                            oneof = "event_threads_values_stacktrace_frames_lock::HasThreadId",
                            tags = "4"
                        )]
                        pub has_thread_id: ::core::option::Option<
                            event_threads_values_stacktrace_frames_lock::HasThreadId,
                        >,
                    }
                    /// Nested message and enum types in `EventThreadsValuesStacktraceFramesLock`.
                    pub mod event_threads_values_stacktrace_frames_lock {
                        #[derive(Clone, PartialEq, ::prost::Oneof)]
                        pub enum HasAddress {
                            #[prost(string, tag = "1")]
                            Address(::prost::alloc::string::String),
                        }
                        #[derive(Clone, PartialEq, ::prost::Oneof)]
                        pub enum HasClassName {
                            #[prost(string, tag = "2")]
                            ClassName(::prost::alloc::string::String),
                        }
                        #[derive(Clone, PartialEq, ::prost::Oneof)]
                        pub enum HasPackageName {
                            #[prost(string, tag = "3")]
                            PackageName(::prost::alloc::string::String),
                        }
                        #[derive(Clone, PartialEq, ::prost::Oneof)]
                        pub enum HasThreadId {
                            #[prost(message, tag = "4")]
                            ThreadId(::prost_types::Value),
                        }
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasAbsPath {
                        #[prost(string, tag = "1")]
                        AbsPath(::prost::alloc::string::String),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasAddrMode {
                        #[prost(string, tag = "2")]
                        AddrMode(::prost::alloc::string::String),
                    }
                    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                    pub enum HasColno {
                        #[prost(uint64, tag = "3")]
                        Colno(u64),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasContextLine {
                        #[prost(string, tag = "4")]
                        ContextLine(::prost::alloc::string::String),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasFilename {
                        #[prost(string, tag = "5")]
                        Filename(::prost::alloc::string::String),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasFunction {
                        #[prost(string, tag = "6")]
                        Function(::prost::alloc::string::String),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasFunctionId {
                        #[prost(string, tag = "7")]
                        FunctionId(::prost::alloc::string::String),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasImageAddr {
                        #[prost(string, tag = "8")]
                        ImageAddr(::prost::alloc::string::String),
                    }
                    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                    pub enum HasInApp {
                        #[prost(bool, tag = "9")]
                        InApp(bool),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasInstructionAddr {
                        #[prost(string, tag = "10")]
                        InstructionAddr(::prost::alloc::string::String),
                    }
                    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                    pub enum HasLineno {
                        #[prost(uint64, tag = "11")]
                        Lineno(u64),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasLock {
                        #[prost(message, tag = "12")]
                        Lock(EventThreadsValuesStacktraceFramesLock),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasModule {
                        #[prost(string, tag = "13")]
                        Module(::prost::alloc::string::String),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasPackage {
                        #[prost(string, tag = "14")]
                        Package(::prost::alloc::string::String),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasPlatform {
                        #[prost(string, tag = "15")]
                        Platform(::prost::alloc::string::String),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasRawFunction {
                        #[prost(string, tag = "18")]
                        RawFunction(::prost::alloc::string::String),
                    }
                    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                    pub enum HasStackStart {
                        #[prost(bool, tag = "19")]
                        StackStart(bool),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasSymbol {
                        #[prost(string, tag = "20")]
                        Symbol(::prost::alloc::string::String),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasSymbolAddr {
                        #[prost(string, tag = "21")]
                        SymbolAddr(::prost::alloc::string::String),
                    }
                    #[derive(Clone, PartialEq, ::prost::Oneof)]
                    pub enum HasVars {
                        #[prost(message, tag = "22")]
                        Vars(::prost_types::Value),
                    }
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasInstructionAddrAdjustment {
                    #[prost(string, tag = "2")]
                    InstructionAddrAdjustment(::prost::alloc::string::String),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasLang {
                    #[prost(string, tag = "3")]
                    Lang(::prost::alloc::string::String),
                }
                #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                pub enum HasSnapshot {
                    #[prost(bool, tag = "5")]
                    Snapshot(bool),
                }
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasCrashed {
                #[prost(bool, tag = "1")]
                Crashed(bool),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasCurrent {
                #[prost(bool, tag = "2")]
                Current(bool),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasId {
                #[prost(message, tag = "4")]
                Id(::prost_types::Value),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasMain {
                #[prost(bool, tag = "5")]
                Main(bool),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasName {
                #[prost(string, tag = "6")]
                Name(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasStacktrace {
                #[prost(message, tag = "7")]
                Stacktrace(EventThreadsValuesStacktrace),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasState {
                #[prost(string, tag = "8")]
                State(::prost::alloc::string::String),
            }
        }
    }
    ///
    /// Additional information about the name of the transaction.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct EventTransactionInfo {
        #[prost(message, repeated, tag = "1")]
        pub changes: ::prost::alloc::vec::Vec<event_transaction_info::EventTransactionInfoChanges>,
        #[prost(oneof = "event_transaction_info::HasOriginal", tags = "2")]
        pub has_original: ::core::option::Option<event_transaction_info::HasOriginal>,
        #[prost(oneof = "event_transaction_info::HasPropagations", tags = "3")]
        pub has_propagations: ::core::option::Option<event_transaction_info::HasPropagations>,
        #[prost(oneof = "event_transaction_info::HasSource", tags = "4")]
        pub has_source: ::core::option::Option<event_transaction_info::HasSource>,
    }
    /// Nested message and enum types in `EventTransactionInfo`.
    pub mod event_transaction_info {
        ///
        /// A list of changes prior to the final transaction name.
        ///
        /// This list must be empty if the transaction name is set at the beginning of the transaction
        /// and never changed. There is no placeholder entry for the initial transaction name.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct EventTransactionInfoChanges {
            #[prost(oneof = "event_transaction_info_changes::HasPropagations", tags = "1")]
            pub has_propagations:
                ::core::option::Option<event_transaction_info_changes::HasPropagations>,
            #[prost(oneof = "event_transaction_info_changes::HasSource", tags = "2")]
            pub has_source: ::core::option::Option<event_transaction_info_changes::HasSource>,
            #[prost(oneof = "event_transaction_info_changes::HasTimestamp", tags = "3")]
            pub has_timestamp: ::core::option::Option<event_transaction_info_changes::HasTimestamp>,
        }
        /// Nested message and enum types in `EventTransactionInfoChanges`.
        pub mod event_transaction_info_changes {
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasPropagations {
                #[prost(uint64, tag = "1")]
                Propagations(u64),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasSource {
                #[prost(string, tag = "2")]
                Source(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasTimestamp {
                #[prost(message, tag = "3")]
                Timestamp(::prost_types::Value),
            }
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasOriginal {
            #[prost(string, tag = "2")]
            Original(::prost::alloc::string::String),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasPropagations {
            #[prost(uint64, tag = "3")]
            Propagations(u64),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasSource {
            #[prost(string, tag = "4")]
            Source(::prost::alloc::string::String),
        }
    }
    ///
    /// Information about the user who triggered this event.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct EventUser {
        #[prost(oneof = "event_user::HasData", tags = "1")]
        pub has_data: ::core::option::Option<event_user::HasData>,
        #[prost(oneof = "event_user::HasEmail", tags = "2")]
        pub has_email: ::core::option::Option<event_user::HasEmail>,
        #[prost(oneof = "event_user::HasGeo", tags = "3")]
        pub has_geo: ::core::option::Option<event_user::HasGeo>,
        #[prost(oneof = "event_user::HasId", tags = "4")]
        pub has_id: ::core::option::Option<event_user::HasId>,
        #[prost(oneof = "event_user::HasIpAddress", tags = "5")]
        pub has_ip_address: ::core::option::Option<event_user::HasIpAddress>,
        #[prost(oneof = "event_user::HasName", tags = "6")]
        pub has_name: ::core::option::Option<event_user::HasName>,
        #[prost(oneof = "event_user::HasSegment", tags = "7")]
        pub has_segment: ::core::option::Option<event_user::HasSegment>,
        #[prost(oneof = "event_user::HasSentryUser", tags = "8")]
        pub has_sentry_user: ::core::option::Option<event_user::HasSentryUser>,
        #[prost(oneof = "event_user::HasUsername", tags = "9")]
        pub has_username: ::core::option::Option<event_user::HasUsername>,
    }
    /// Nested message and enum types in `EventUser`.
    pub mod event_user {
        ///
        /// Approximate geographical location of the end user or device.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct EventUserGeo {
            #[prost(oneof = "event_user_geo::HasCity", tags = "1")]
            pub has_city: ::core::option::Option<event_user_geo::HasCity>,
            #[prost(oneof = "event_user_geo::HasCountryCode", tags = "2")]
            pub has_country_code: ::core::option::Option<event_user_geo::HasCountryCode>,
            #[prost(oneof = "event_user_geo::HasRegion", tags = "3")]
            pub has_region: ::core::option::Option<event_user_geo::HasRegion>,
            #[prost(oneof = "event_user_geo::HasSubdivision", tags = "4")]
            pub has_subdivision: ::core::option::Option<event_user_geo::HasSubdivision>,
        }
        /// Nested message and enum types in `EventUserGeo`.
        pub mod event_user_geo {
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasCity {
                #[prost(string, tag = "1")]
                City(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasCountryCode {
                #[prost(string, tag = "2")]
                CountryCode(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasRegion {
                #[prost(string, tag = "3")]
                Region(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasSubdivision {
                #[prost(string, tag = "4")]
                Subdivision(::prost::alloc::string::String),
            }
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasData {
            #[prost(message, tag = "1")]
            Data(::prost_types::Value),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasEmail {
            #[prost(string, tag = "2")]
            Email(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasGeo {
            #[prost(message, tag = "3")]
            Geo(EventUserGeo),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasId {
            #[prost(string, tag = "4")]
            Id(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasIpAddress {
            #[prost(string, tag = "5")]
            IpAddress(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasName {
            #[prost(string, tag = "6")]
            Name(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasSegment {
            #[prost(string, tag = "7")]
            Segment(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasSentryUser {
            #[prost(string, tag = "8")]
            SentryUser(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasUsername {
            #[prost(string, tag = "9")]
            Username(::prost::alloc::string::String),
        }
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasBreadcrumbs {
        #[prost(message, tag = "1")]
        Breadcrumbs(EventBreadcrumbs),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasCulprit {
        #[prost(string, tag = "3")]
        Culprit(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasDebugMeta {
        #[prost(message, tag = "4")]
        DebugMeta(EventDebugMeta),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasDist {
        #[prost(string, tag = "5")]
        Dist(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasEnvironment {
        #[prost(string, tag = "6")]
        Environment(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasEventId {
        #[prost(string, tag = "8")]
        EventId(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasException {
        #[prost(message, tag = "9")]
        Exception(EventException),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasExtra {
        #[prost(message, tag = "10")]
        Extra(::prost_types::Value),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasLevel {
        #[prost(string, tag = "12")]
        Level(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasLogentry {
        #[prost(message, tag = "13")]
        Logentry(EventLogentry),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasLogger {
        #[prost(string, tag = "14")]
        Logger(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasPlatform {
        #[prost(string, tag = "16")]
        Platform(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasReceived {
        #[prost(message, tag = "17")]
        Received(::prost_types::Value),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasRelease {
        #[prost(string, tag = "18")]
        Release(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasRequest {
        #[prost(message, tag = "19")]
        Request(EventRequest),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasSdk {
        #[prost(message, tag = "20")]
        Sdk(EventSdk),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasServerName {
        #[prost(string, tag = "21")]
        ServerName(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasStacktrace {
        #[prost(message, tag = "22")]
        Stacktrace(EventStacktrace),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasTags {
        #[prost(message, tag = "23")]
        Tags(::prost_types::Value),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasThreads {
        #[prost(message, tag = "24")]
        Threads(EventThreads),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasTimeSpent {
        #[prost(uint64, tag = "25")]
        TimeSpent(u64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasTimestamp {
        #[prost(message, tag = "26")]
        Timestamp(::prost_types::Value),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasTransaction {
        #[prost(string, tag = "27")]
        Transaction(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasTransactionInfo {
        #[prost(message, tag = "28")]
        TransactionInfo(EventTransactionInfo),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasType {
        #[prost(string, tag = "29")]
        Type(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasUser {
        #[prost(message, tag = "30")]
        User(EventUser),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasVersion {
        #[prost(string, tag = "31")]
        Version(::prost::alloc::string::String),
    }
}
///
/// Application information.
///
/// App context describes the application. As opposed to the runtime, this is the actual
/// application that was running and carries metadata about the current session.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Appcontext {
    #[prost(string, repeated, tag = "10")]
    pub view_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(oneof = "appcontext::HasAppBuild", tags = "1")]
    pub has_app_build: ::core::option::Option<appcontext::HasAppBuild>,
    #[prost(oneof = "appcontext::HasAppIdentifier", tags = "2")]
    pub has_app_identifier: ::core::option::Option<appcontext::HasAppIdentifier>,
    #[prost(oneof = "appcontext::HasAppMemory", tags = "3")]
    pub has_app_memory: ::core::option::Option<appcontext::HasAppMemory>,
    #[prost(oneof = "appcontext::HasAppName", tags = "4")]
    pub has_app_name: ::core::option::Option<appcontext::HasAppName>,
    #[prost(oneof = "appcontext::HasAppStartTime", tags = "5")]
    pub has_app_start_time: ::core::option::Option<appcontext::HasAppStartTime>,
    #[prost(oneof = "appcontext::HasAppVersion", tags = "6")]
    pub has_app_version: ::core::option::Option<appcontext::HasAppVersion>,
    #[prost(oneof = "appcontext::HasBuildType", tags = "7")]
    pub has_build_type: ::core::option::Option<appcontext::HasBuildType>,
    #[prost(oneof = "appcontext::HasDeviceAppHash", tags = "8")]
    pub has_device_app_hash: ::core::option::Option<appcontext::HasDeviceAppHash>,
    #[prost(oneof = "appcontext::HasInForeground", tags = "9")]
    pub has_in_foreground: ::core::option::Option<appcontext::HasInForeground>,
}
/// Nested message and enum types in `Appcontext`.
pub mod appcontext {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasAppBuild {
        #[prost(string, tag = "1")]
        AppBuild(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasAppIdentifier {
        #[prost(string, tag = "2")]
        AppIdentifier(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasAppMemory {
        #[prost(uint64, tag = "3")]
        AppMemory(u64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasAppName {
        #[prost(string, tag = "4")]
        AppName(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasAppStartTime {
        #[prost(string, tag = "5")]
        AppStartTime(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasAppVersion {
        #[prost(string, tag = "6")]
        AppVersion(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasBuildType {
        #[prost(string, tag = "7")]
        BuildType(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasDeviceAppHash {
        #[prost(string, tag = "8")]
        DeviceAppHash(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasInForeground {
        #[prost(bool, tag = "9")]
        InForeground(bool),
    }
}
///
/// Legacy apple debug images (MachO).
///
/// This was also used for non-apple platforms with similar debug setups.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Appledebugimage {
    #[prost(string, tag = "4")]
    pub image_addr: ::prost::alloc::string::String,
    #[prost(uint64, tag = "5")]
    pub image_size: u64,
    #[prost(string, tag = "7")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub uuid: ::prost::alloc::string::String,
    #[prost(oneof = "appledebugimage::HasArch", tags = "1")]
    pub has_arch: ::core::option::Option<appledebugimage::HasArch>,
    #[prost(oneof = "appledebugimage::HasCpuSubtype", tags = "2")]
    pub has_cpu_subtype: ::core::option::Option<appledebugimage::HasCpuSubtype>,
    #[prost(oneof = "appledebugimage::HasCpuType", tags = "3")]
    pub has_cpu_type: ::core::option::Option<appledebugimage::HasCpuType>,
    #[prost(oneof = "appledebugimage::HasImageVmaddr", tags = "6")]
    pub has_image_vmaddr: ::core::option::Option<appledebugimage::HasImageVmaddr>,
}
/// Nested message and enum types in `Appledebugimage`.
pub mod appledebugimage {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasArch {
        #[prost(string, tag = "1")]
        Arch(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasCpuSubtype {
        #[prost(uint64, tag = "2")]
        CpuSubtype(u64),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasCpuType {
        #[prost(uint64, tag = "3")]
        CpuType(u64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasImageVmaddr {
        #[prost(string, tag = "6")]
        ImageVmaddr(::prost::alloc::string::String),
    }
}
///
/// The Breadcrumbs Interface specifies a series of application events, or "breadcrumbs", that
/// occurred before an event.
///
/// An event may contain one or more breadcrumbs in an attribute named `breadcrumbs`. The entries
/// are ordered from oldest to newest. Consequently, the last entry in the list should be the last
/// entry before the event occurred.
///
/// While breadcrumb attributes are not strictly validated in Sentry, a breadcrumb is most useful
/// when it includes at least a `timestamp` and `type`, `category` or `message`. The rendering of
/// breadcrumbs in Sentry depends on what is provided.
///
/// The following example illustrates the breadcrumbs part of the event payload and omits other
/// attributes for simplicity.
///
/// ```json
/// {
/// "breadcrumbs": {
/// "values": [
/// {
/// "timestamp": "2016-04-20T20:55:53.845Z",
/// "message": "Something happened",
/// "category": "log",
/// "data": {
/// "foo": "bar",
/// "blub": "blah"
/// }
/// },
/// {
/// "timestamp": "2016-04-20T20:55:53.847Z",
/// "type": "navigation",
/// "data": {
/// "from": "/login",
/// "to": "/dashboard"
/// }
/// }
/// ]
/// }
/// }
/// ```
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Breadcrumb {
    #[prost(oneof = "breadcrumb::HasCategory", tags = "1")]
    pub has_category: ::core::option::Option<breadcrumb::HasCategory>,
    #[prost(oneof = "breadcrumb::HasData", tags = "2")]
    pub has_data: ::core::option::Option<breadcrumb::HasData>,
    #[prost(oneof = "breadcrumb::HasEventId", tags = "3")]
    pub has_event_id: ::core::option::Option<breadcrumb::HasEventId>,
    #[prost(oneof = "breadcrumb::HasLevel", tags = "4")]
    pub has_level: ::core::option::Option<breadcrumb::HasLevel>,
    #[prost(oneof = "breadcrumb::HasMessage", tags = "5")]
    pub has_message: ::core::option::Option<breadcrumb::HasMessage>,
    #[prost(oneof = "breadcrumb::HasTimestamp", tags = "6")]
    pub has_timestamp: ::core::option::Option<breadcrumb::HasTimestamp>,
    #[prost(oneof = "breadcrumb::HasType", tags = "7")]
    pub has_type: ::core::option::Option<breadcrumb::HasType>,
}
/// Nested message and enum types in `Breadcrumb`.
pub mod breadcrumb {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasCategory {
        #[prost(string, tag = "1")]
        Category(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasData {
        #[prost(message, tag = "2")]
        Data(::prost_types::Value),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasEventId {
        #[prost(string, tag = "3")]
        EventId(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasLevel {
        #[prost(string, tag = "4")]
        Level(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasMessage {
        #[prost(string, tag = "5")]
        Message(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasTimestamp {
        #[prost(message, tag = "6")]
        Timestamp(::prost_types::Value),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasType {
        #[prost(string, tag = "7")]
        Type(::prost::alloc::string::String),
    }
}
///
/// Web browser information.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Browsercontext {
    #[prost(oneof = "browsercontext::HasName", tags = "1")]
    pub has_name: ::core::option::Option<browsercontext::HasName>,
    #[prost(oneof = "browsercontext::HasVersion", tags = "2")]
    pub has_version: ::core::option::Option<browsercontext::HasVersion>,
}
/// Nested message and enum types in `Browsercontext`.
pub mod browsercontext {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasName {
        #[prost(string, tag = "1")]
        Name(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasVersion {
        #[prost(string, tag = "2")]
        Version(::prost::alloc::string::String),
    }
}
///
/// POSIX signal with optional extended data.
///
/// Error codes set by Linux system calls and some library functions as specified in ISO C99,
/// POSIX.1-2001, and POSIX.1-2008. See
/// [`errno(3)`](<https://man7.org/linux/man-pages/man3/errno.3.html>) for more information.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cerror {
    #[prost(oneof = "cerror::HasName", tags = "1")]
    pub has_name: ::core::option::Option<cerror::HasName>,
    #[prost(oneof = "cerror::HasNumber", tags = "2")]
    pub has_number: ::core::option::Option<cerror::HasNumber>,
}
/// Nested message and enum types in `Cerror`.
pub mod cerror {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasName {
        #[prost(string, tag = "1")]
        Name(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasNumber {
        #[prost(int64, tag = "2")]
        Number(i64),
    }
}
///
/// The SDK Interface describes the Sentry SDK and its configuration used to capture and transmit an event.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Clientsdkinfo {
    #[prost(string, repeated, tag = "1")]
    pub integrations: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub packages: ::prost::alloc::vec::Vec<clientsdkinfo::ClientsdkinfoPackages>,
    #[prost(string, tag = "4")]
    pub version: ::prost::alloc::string::String,
}
/// Nested message and enum types in `Clientsdkinfo`.
pub mod clientsdkinfo {
    ///
    /// List of installed and loaded SDK packages. _Optional._
    ///
    /// A list of packages that were installed as part of this SDK or the activated integrations.
    /// Each package consists of a name in the format `source:identifier` and `version`. If the
    /// source is a Git repository, the `source` should be `git`, the identifier should be a
    /// checkout link and the version should be a Git reference (branch, tag or SHA).
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ClientsdkinfoPackages {
        #[prost(oneof = "clientsdkinfo_packages::HasName", tags = "1")]
        pub has_name: ::core::option::Option<clientsdkinfo_packages::HasName>,
        #[prost(oneof = "clientsdkinfo_packages::HasVersion", tags = "2")]
        pub has_version: ::core::option::Option<clientsdkinfo_packages::HasVersion>,
    }
    /// Nested message and enum types in `ClientsdkinfoPackages`.
    pub mod clientsdkinfo_packages {
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasName {
            #[prost(string, tag = "1")]
            Name(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasVersion {
            #[prost(string, tag = "2")]
            Version(::prost::alloc::string::String),
        }
    }
}
///
/// An installed and loaded package as part of the Sentry SDK.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Clientsdkpackage {
    #[prost(oneof = "clientsdkpackage::HasName", tags = "1")]
    pub has_name: ::core::option::Option<clientsdkpackage::HasName>,
    #[prost(oneof = "clientsdkpackage::HasVersion", tags = "2")]
    pub has_version: ::core::option::Option<clientsdkpackage::HasVersion>,
}
/// Nested message and enum types in `Clientsdkpackage`.
pub mod clientsdkpackage {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasName {
        #[prost(string, tag = "1")]
        Name(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasVersion {
        #[prost(string, tag = "2")]
        Version(::prost::alloc::string::String),
    }
}
///
/// The arbitrary data on the trace.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Data {
    #[prost(oneof = "data::HasPreviousRoute", tags = "1")]
    pub has_previous_route: ::core::option::Option<data::HasPreviousRoute>,
    #[prost(oneof = "data::HasRoute", tags = "2")]
    pub has_route: ::core::option::Option<data::HasRoute>,
}
/// Nested message and enum types in `Data`.
pub mod data {
    ///
    /// The previous route in the application
    ///
    /// Set by React Native SDK.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DataPreviousroute {
        #[prost(oneof = "data_previousroute::HasName", tags = "1")]
        pub has_name: ::core::option::Option<data_previousroute::HasName>,
        #[prost(oneof = "data_previousroute::HasParams", tags = "2")]
        pub has_params: ::core::option::Option<data_previousroute::HasParams>,
    }
    /// Nested message and enum types in `DataPreviousroute`.
    pub mod data_previousroute {
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasName {
            #[prost(string, tag = "1")]
            Name(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasParams {
            #[prost(message, tag = "2")]
            Params(::prost_types::Value),
        }
    }
    ///
    /// The current route in the application.
    ///
    /// Set by React Native SDK.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DataRoute {
        #[prost(oneof = "data_route::HasName", tags = "1")]
        pub has_name: ::core::option::Option<data_route::HasName>,
        #[prost(oneof = "data_route::HasParams", tags = "2")]
        pub has_params: ::core::option::Option<data_route::HasParams>,
    }
    /// Nested message and enum types in `DataRoute`.
    pub mod data_route {
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasName {
            #[prost(string, tag = "1")]
            Name(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasParams {
            #[prost(message, tag = "2")]
            Params(::prost_types::Value),
        }
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasPreviousRoute {
        #[prost(message, tag = "1")]
        PreviousRoute(DataPreviousroute),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasRoute {
        #[prost(message, tag = "2")]
        Route(DataRoute),
    }
}
///
/// Debugging and processing meta information.
///
/// The debug meta interface carries debug information for processing errors and crash reports.
/// Sentry amends the information in this interface.
///
/// Example (look at field types to see more detail):
///
/// ```json
/// {
/// "debug_meta": {
/// "images": \[\],
/// "sdk_info": {
/// "sdk_name": "iOS",
/// "version_major": 10,
/// "version_minor": 3,
/// "version_patchlevel": 0
/// }
/// }
/// }
/// ```
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Debugmeta {
    #[prost(message, repeated, tag = "1")]
    pub images: ::prost::alloc::vec::Vec<::prost_types::Value>,
    #[prost(oneof = "debugmeta::HasSdkInfo", tags = "2")]
    pub has_sdk_info: ::core::option::Option<debugmeta::HasSdkInfo>,
}
/// Nested message and enum types in `Debugmeta`.
pub mod debugmeta {
    ///
    /// Information about the system SDK (e.g. iOS SDK).
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DebugmetaSdkInfo {
        #[prost(oneof = "debugmeta_sdk_info::HasSdkName", tags = "1")]
        pub has_sdk_name: ::core::option::Option<debugmeta_sdk_info::HasSdkName>,
        #[prost(oneof = "debugmeta_sdk_info::HasVersionMajor", tags = "2")]
        pub has_version_major: ::core::option::Option<debugmeta_sdk_info::HasVersionMajor>,
        #[prost(oneof = "debugmeta_sdk_info::HasVersionMinor", tags = "3")]
        pub has_version_minor: ::core::option::Option<debugmeta_sdk_info::HasVersionMinor>,
        #[prost(oneof = "debugmeta_sdk_info::HasVersionPatchlevel", tags = "4")]
        pub has_version_patchlevel:
            ::core::option::Option<debugmeta_sdk_info::HasVersionPatchlevel>,
    }
    /// Nested message and enum types in `DebugmetaSdkInfo`.
    pub mod debugmeta_sdk_info {
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasSdkName {
            #[prost(string, tag = "1")]
            SdkName(::prost::alloc::string::String),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasVersionMajor {
            #[prost(uint64, tag = "2")]
            VersionMajor(u64),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasVersionMinor {
            #[prost(uint64, tag = "3")]
            VersionMinor(u64),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasVersionPatchlevel {
            #[prost(uint64, tag = "4")]
            VersionPatchlevel(u64),
        }
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasSdkInfo {
        #[prost(message, tag = "2")]
        SdkInfo(DebugmetaSdkInfo),
    }
}
///
/// Device information.
///
/// Device context describes the device that caused the event. This is most appropriate for mobile
/// applications.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Devicecontext {
    #[prost(oneof = "devicecontext::HasArch", tags = "1")]
    pub has_arch: ::core::option::Option<devicecontext::HasArch>,
    #[prost(oneof = "devicecontext::HasBatteryLevel", tags = "2")]
    pub has_battery_level: ::core::option::Option<devicecontext::HasBatteryLevel>,
    #[prost(oneof = "devicecontext::HasBatteryStatus", tags = "3")]
    pub has_battery_status: ::core::option::Option<devicecontext::HasBatteryStatus>,
    #[prost(oneof = "devicecontext::HasBootTime", tags = "4")]
    pub has_boot_time: ::core::option::Option<devicecontext::HasBootTime>,
    #[prost(oneof = "devicecontext::HasBrand", tags = "5")]
    pub has_brand: ::core::option::Option<devicecontext::HasBrand>,
    #[prost(oneof = "devicecontext::HasCharging", tags = "6")]
    pub has_charging: ::core::option::Option<devicecontext::HasCharging>,
    #[prost(oneof = "devicecontext::HasCpuDescription", tags = "7")]
    pub has_cpu_description: ::core::option::Option<devicecontext::HasCpuDescription>,
    #[prost(oneof = "devicecontext::HasDeviceType", tags = "8")]
    pub has_device_type: ::core::option::Option<devicecontext::HasDeviceType>,
    #[prost(oneof = "devicecontext::HasDeviceUniqueIdentifier", tags = "9")]
    pub has_device_unique_identifier:
        ::core::option::Option<devicecontext::HasDeviceUniqueIdentifier>,
    #[prost(oneof = "devicecontext::HasExternalFreeStorage", tags = "10")]
    pub has_external_free_storage: ::core::option::Option<devicecontext::HasExternalFreeStorage>,
    #[prost(oneof = "devicecontext::HasExternalStorageSize", tags = "11")]
    pub has_external_storage_size: ::core::option::Option<devicecontext::HasExternalStorageSize>,
    #[prost(oneof = "devicecontext::HasFamily", tags = "12")]
    pub has_family: ::core::option::Option<devicecontext::HasFamily>,
    #[prost(oneof = "devicecontext::HasFreeMemory", tags = "13")]
    pub has_free_memory: ::core::option::Option<devicecontext::HasFreeMemory>,
    #[prost(oneof = "devicecontext::HasFreeStorage", tags = "14")]
    pub has_free_storage: ::core::option::Option<devicecontext::HasFreeStorage>,
    #[prost(oneof = "devicecontext::HasLocale", tags = "15")]
    pub has_locale: ::core::option::Option<devicecontext::HasLocale>,
    #[prost(oneof = "devicecontext::HasLowMemory", tags = "16")]
    pub has_low_memory: ::core::option::Option<devicecontext::HasLowMemory>,
    #[prost(oneof = "devicecontext::HasManufacturer", tags = "17")]
    pub has_manufacturer: ::core::option::Option<devicecontext::HasManufacturer>,
    #[prost(oneof = "devicecontext::HasMemorySize", tags = "18")]
    pub has_memory_size: ::core::option::Option<devicecontext::HasMemorySize>,
    #[prost(oneof = "devicecontext::HasModel", tags = "19")]
    pub has_model: ::core::option::Option<devicecontext::HasModel>,
    #[prost(oneof = "devicecontext::HasModelId", tags = "20")]
    pub has_model_id: ::core::option::Option<devicecontext::HasModelId>,
    #[prost(oneof = "devicecontext::HasName", tags = "21")]
    pub has_name: ::core::option::Option<devicecontext::HasName>,
    #[prost(oneof = "devicecontext::HasOnline", tags = "22")]
    pub has_online: ::core::option::Option<devicecontext::HasOnline>,
    #[prost(oneof = "devicecontext::HasOrientation", tags = "23")]
    pub has_orientation: ::core::option::Option<devicecontext::HasOrientation>,
    #[prost(oneof = "devicecontext::HasProcessorCount", tags = "24")]
    pub has_processor_count: ::core::option::Option<devicecontext::HasProcessorCount>,
    #[prost(oneof = "devicecontext::HasProcessorFrequency", tags = "25")]
    pub has_processor_frequency: ::core::option::Option<devicecontext::HasProcessorFrequency>,
    #[prost(oneof = "devicecontext::HasScreenDensity", tags = "26")]
    pub has_screen_density: ::core::option::Option<devicecontext::HasScreenDensity>,
    #[prost(oneof = "devicecontext::HasScreenDpi", tags = "27")]
    pub has_screen_dpi: ::core::option::Option<devicecontext::HasScreenDpi>,
    #[prost(oneof = "devicecontext::HasScreenHeightPixels", tags = "28")]
    pub has_screen_height_pixels: ::core::option::Option<devicecontext::HasScreenHeightPixels>,
    #[prost(oneof = "devicecontext::HasScreenResolution", tags = "29")]
    pub has_screen_resolution: ::core::option::Option<devicecontext::HasScreenResolution>,
    #[prost(oneof = "devicecontext::HasScreenWidthPixels", tags = "30")]
    pub has_screen_width_pixels: ::core::option::Option<devicecontext::HasScreenWidthPixels>,
    #[prost(oneof = "devicecontext::HasSimulator", tags = "31")]
    pub has_simulator: ::core::option::Option<devicecontext::HasSimulator>,
    #[prost(oneof = "devicecontext::HasStorageSize", tags = "32")]
    pub has_storage_size: ::core::option::Option<devicecontext::HasStorageSize>,
    #[prost(oneof = "devicecontext::HasSupportsAccelerometer", tags = "33")]
    pub has_supports_accelerometer: ::core::option::Option<devicecontext::HasSupportsAccelerometer>,
    #[prost(oneof = "devicecontext::HasSupportsAudio", tags = "34")]
    pub has_supports_audio: ::core::option::Option<devicecontext::HasSupportsAudio>,
    #[prost(oneof = "devicecontext::HasSupportsGyroscope", tags = "35")]
    pub has_supports_gyroscope: ::core::option::Option<devicecontext::HasSupportsGyroscope>,
    #[prost(oneof = "devicecontext::HasSupportsLocationService", tags = "36")]
    pub has_supports_location_service:
        ::core::option::Option<devicecontext::HasSupportsLocationService>,
    #[prost(oneof = "devicecontext::HasSupportsVibration", tags = "37")]
    pub has_supports_vibration: ::core::option::Option<devicecontext::HasSupportsVibration>,
    #[prost(oneof = "devicecontext::HasTimezone", tags = "38")]
    pub has_timezone: ::core::option::Option<devicecontext::HasTimezone>,
    #[prost(oneof = "devicecontext::HasUsableMemory", tags = "39")]
    pub has_usable_memory: ::core::option::Option<devicecontext::HasUsableMemory>,
    #[prost(oneof = "devicecontext::HasUuid", tags = "40")]
    pub has_uuid: ::core::option::Option<devicecontext::HasUuid>,
}
/// Nested message and enum types in `Devicecontext`.
pub mod devicecontext {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasArch {
        #[prost(string, tag = "1")]
        Arch(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasBatteryLevel {
        #[prost(double, tag = "2")]
        BatteryLevel(f64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasBatteryStatus {
        #[prost(string, tag = "3")]
        BatteryStatus(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasBootTime {
        #[prost(string, tag = "4")]
        BootTime(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasBrand {
        #[prost(string, tag = "5")]
        Brand(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasCharging {
        #[prost(bool, tag = "6")]
        Charging(bool),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasCpuDescription {
        #[prost(string, tag = "7")]
        CpuDescription(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasDeviceType {
        #[prost(string, tag = "8")]
        DeviceType(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasDeviceUniqueIdentifier {
        #[prost(string, tag = "9")]
        DeviceUniqueIdentifier(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasExternalFreeStorage {
        #[prost(uint64, tag = "10")]
        ExternalFreeStorage(u64),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasExternalStorageSize {
        #[prost(uint64, tag = "11")]
        ExternalStorageSize(u64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasFamily {
        #[prost(string, tag = "12")]
        Family(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasFreeMemory {
        #[prost(uint64, tag = "13")]
        FreeMemory(u64),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasFreeStorage {
        #[prost(uint64, tag = "14")]
        FreeStorage(u64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasLocale {
        #[prost(string, tag = "15")]
        Locale(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasLowMemory {
        #[prost(bool, tag = "16")]
        LowMemory(bool),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasManufacturer {
        #[prost(string, tag = "17")]
        Manufacturer(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasMemorySize {
        #[prost(uint64, tag = "18")]
        MemorySize(u64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasModel {
        #[prost(string, tag = "19")]
        Model(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasModelId {
        #[prost(string, tag = "20")]
        ModelId(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasName {
        #[prost(string, tag = "21")]
        Name(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasOnline {
        #[prost(bool, tag = "22")]
        Online(bool),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasOrientation {
        #[prost(string, tag = "23")]
        Orientation(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasProcessorCount {
        #[prost(uint64, tag = "24")]
        ProcessorCount(u64),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasProcessorFrequency {
        #[prost(uint64, tag = "25")]
        ProcessorFrequency(u64),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasScreenDensity {
        #[prost(double, tag = "26")]
        ScreenDensity(f64),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasScreenDpi {
        #[prost(uint64, tag = "27")]
        ScreenDpi(u64),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasScreenHeightPixels {
        #[prost(uint64, tag = "28")]
        ScreenHeightPixels(u64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasScreenResolution {
        #[prost(string, tag = "29")]
        ScreenResolution(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasScreenWidthPixels {
        #[prost(uint64, tag = "30")]
        ScreenWidthPixels(u64),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasSimulator {
        #[prost(bool, tag = "31")]
        Simulator(bool),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasStorageSize {
        #[prost(uint64, tag = "32")]
        StorageSize(u64),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasSupportsAccelerometer {
        #[prost(bool, tag = "33")]
        SupportsAccelerometer(bool),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasSupportsAudio {
        #[prost(bool, tag = "34")]
        SupportsAudio(bool),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasSupportsGyroscope {
        #[prost(bool, tag = "35")]
        SupportsGyroscope(bool),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasSupportsLocationService {
        #[prost(bool, tag = "36")]
        SupportsLocationService(bool),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasSupportsVibration {
        #[prost(bool, tag = "37")]
        SupportsVibration(bool),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasTimezone {
        #[prost(string, tag = "38")]
        Timezone(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasUsableMemory {
        #[prost(uint64, tag = "39")]
        UsableMemory(u64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasUuid {
        #[prost(string, tag = "40")]
        Uuid(::prost::alloc::string::String),
    }
}
///
/// An event processing error.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eventprocessingerror {
    #[prost(string, tag = "2")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub value: ::core::option::Option<::prost_types::Value>,
    #[prost(oneof = "eventprocessingerror::HasName", tags = "1")]
    pub has_name: ::core::option::Option<eventprocessingerror::HasName>,
}
/// Nested message and enum types in `Eventprocessingerror`.
pub mod eventprocessingerror {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasName {
        #[prost(string, tag = "1")]
        Name(::prost::alloc::string::String),
    }
}
///
/// A single exception.
///
/// Multiple values inside of an [event](#typedef-Event) represent chained exceptions and should be sorted oldest to newest. For example, consider this Python code snippet:
///
/// ```python
/// try:
/// raise Exception("random boring invariant was not met!")
/// except Exception as e:
/// raise ValueError("something went wrong, help!") from e
/// ```
///
/// `Exception` would be described first in the values list, followed by a description of `ValueError`:
///
/// ```json
/// {
/// "exception": {
/// "values": [
/// {"type": "Exception": "value": "random boring invariant was not met!"},
/// {"type": "ValueError", "value": "something went wrong, help!"},
/// ]
/// }
/// }
/// ```
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Exception {
    #[prost(oneof = "exception::HasMechanism", tags = "1")]
    pub has_mechanism: ::core::option::Option<exception::HasMechanism>,
    #[prost(oneof = "exception::HasModule", tags = "2")]
    pub has_module: ::core::option::Option<exception::HasModule>,
    #[prost(oneof = "exception::HasStacktrace", tags = "3")]
    pub has_stacktrace: ::core::option::Option<exception::HasStacktrace>,
    #[prost(oneof = "exception::HasThreadId", tags = "4")]
    pub has_thread_id: ::core::option::Option<exception::HasThreadId>,
    #[prost(oneof = "exception::HasType", tags = "5")]
    pub has_type: ::core::option::Option<exception::HasType>,
    #[prost(oneof = "exception::HasValue", tags = "6")]
    pub has_value: ::core::option::Option<exception::HasValue>,
}
/// Nested message and enum types in `Exception`.
pub mod exception {
    ///
    /// Mechanism by which this exception was generated and handled.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ExceptionMechanism {
        #[prost(string, tag = "11")]
        pub r#type: ::prost::alloc::string::String,
        #[prost(oneof = "exception_mechanism::HasData", tags = "1")]
        pub has_data: ::core::option::Option<exception_mechanism::HasData>,
        #[prost(oneof = "exception_mechanism::HasDescription", tags = "2")]
        pub has_description: ::core::option::Option<exception_mechanism::HasDescription>,
        #[prost(oneof = "exception_mechanism::HasExceptionId", tags = "3")]
        pub has_exception_id: ::core::option::Option<exception_mechanism::HasExceptionId>,
        #[prost(oneof = "exception_mechanism::HasHandled", tags = "4")]
        pub has_handled: ::core::option::Option<exception_mechanism::HasHandled>,
        #[prost(oneof = "exception_mechanism::HasHelpLink", tags = "5")]
        pub has_help_link: ::core::option::Option<exception_mechanism::HasHelpLink>,
        #[prost(oneof = "exception_mechanism::HasIsExceptionGroup", tags = "6")]
        pub has_is_exception_group:
            ::core::option::Option<exception_mechanism::HasIsExceptionGroup>,
        #[prost(oneof = "exception_mechanism::HasMeta", tags = "7")]
        pub has_meta: ::core::option::Option<exception_mechanism::HasMeta>,
        #[prost(oneof = "exception_mechanism::HasParentId", tags = "8")]
        pub has_parent_id: ::core::option::Option<exception_mechanism::HasParentId>,
        #[prost(oneof = "exception_mechanism::HasSource", tags = "9")]
        pub has_source: ::core::option::Option<exception_mechanism::HasSource>,
        #[prost(oneof = "exception_mechanism::HasSynthetic", tags = "10")]
        pub has_synthetic: ::core::option::Option<exception_mechanism::HasSynthetic>,
    }
    /// Nested message and enum types in `ExceptionMechanism`.
    pub mod exception_mechanism {
        ///
        /// Operating system or runtime meta information.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ExceptionMechanismMeta {
            #[prost(oneof = "exception_mechanism_meta::HasErrno", tags = "1")]
            pub has_errno: ::core::option::Option<exception_mechanism_meta::HasErrno>,
            #[prost(oneof = "exception_mechanism_meta::HasMachException", tags = "2")]
            pub has_mach_exception:
                ::core::option::Option<exception_mechanism_meta::HasMachException>,
            #[prost(oneof = "exception_mechanism_meta::HasNsError", tags = "3")]
            pub has_ns_error: ::core::option::Option<exception_mechanism_meta::HasNsError>,
            #[prost(oneof = "exception_mechanism_meta::HasSignal", tags = "4")]
            pub has_signal: ::core::option::Option<exception_mechanism_meta::HasSignal>,
        }
        /// Nested message and enum types in `ExceptionMechanismMeta`.
        pub mod exception_mechanism_meta {
            ///
            /// Optional ISO C standard error code.
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct ExceptionMechanismMetaErrno {
                #[prost(oneof = "exception_mechanism_meta_errno::HasName", tags = "1")]
                pub has_name: ::core::option::Option<exception_mechanism_meta_errno::HasName>,
                #[prost(oneof = "exception_mechanism_meta_errno::HasNumber", tags = "2")]
                pub has_number: ::core::option::Option<exception_mechanism_meta_errno::HasNumber>,
            }
            /// Nested message and enum types in `ExceptionMechanismMetaErrno`.
            pub mod exception_mechanism_meta_errno {
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasName {
                    #[prost(string, tag = "1")]
                    Name(::prost::alloc::string::String),
                }
                #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                pub enum HasNumber {
                    #[prost(int64, tag = "2")]
                    Number(i64),
                }
            }
            ///
            /// A Mach Exception on Apple systems comprising a code triple and optional descriptions.
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct ExceptionMechanismMetaMachException {
                #[prost(oneof = "exception_mechanism_meta_mach_exception::HasCode", tags = "1")]
                pub has_code:
                    ::core::option::Option<exception_mechanism_meta_mach_exception::HasCode>,
                #[prost(
                    oneof = "exception_mechanism_meta_mach_exception::HasException",
                    tags = "2"
                )]
                pub has_exception:
                    ::core::option::Option<exception_mechanism_meta_mach_exception::HasException>,
                #[prost(oneof = "exception_mechanism_meta_mach_exception::HasName", tags = "3")]
                pub has_name:
                    ::core::option::Option<exception_mechanism_meta_mach_exception::HasName>,
                #[prost(
                    oneof = "exception_mechanism_meta_mach_exception::HasSubcode",
                    tags = "4"
                )]
                pub has_subcode:
                    ::core::option::Option<exception_mechanism_meta_mach_exception::HasSubcode>,
            }
            /// Nested message and enum types in `ExceptionMechanismMetaMachException`.
            pub mod exception_mechanism_meta_mach_exception {
                #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                pub enum HasCode {
                    #[prost(uint64, tag = "1")]
                    Code(u64),
                }
                #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                pub enum HasException {
                    #[prost(int64, tag = "2")]
                    Exception(i64),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasName {
                    #[prost(string, tag = "3")]
                    Name(::prost::alloc::string::String),
                }
                #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                pub enum HasSubcode {
                    #[prost(uint64, tag = "4")]
                    Subcode(u64),
                }
            }
            ///
            /// An NSError on Apple systems comprising code and signal.
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct ExceptionMechanismMetaNsError {
                #[prost(oneof = "exception_mechanism_meta_ns_error::HasCode", tags = "1")]
                pub has_code: ::core::option::Option<exception_mechanism_meta_ns_error::HasCode>,
                #[prost(oneof = "exception_mechanism_meta_ns_error::HasDomain", tags = "2")]
                pub has_domain:
                    ::core::option::Option<exception_mechanism_meta_ns_error::HasDomain>,
            }
            /// Nested message and enum types in `ExceptionMechanismMetaNsError`.
            pub mod exception_mechanism_meta_ns_error {
                #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                pub enum HasCode {
                    #[prost(int64, tag = "1")]
                    Code(i64),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasDomain {
                    #[prost(string, tag = "2")]
                    Domain(::prost::alloc::string::String),
                }
            }
            ///
            /// Information on the POSIX signal.
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct ExceptionMechanismMetaSignal {
                #[prost(oneof = "exception_mechanism_meta_signal::HasCode", tags = "1")]
                pub has_code: ::core::option::Option<exception_mechanism_meta_signal::HasCode>,
                #[prost(oneof = "exception_mechanism_meta_signal::HasCodeName", tags = "2")]
                pub has_code_name:
                    ::core::option::Option<exception_mechanism_meta_signal::HasCodeName>,
                #[prost(oneof = "exception_mechanism_meta_signal::HasName", tags = "3")]
                pub has_name: ::core::option::Option<exception_mechanism_meta_signal::HasName>,
                #[prost(oneof = "exception_mechanism_meta_signal::HasNumber", tags = "4")]
                pub has_number: ::core::option::Option<exception_mechanism_meta_signal::HasNumber>,
            }
            /// Nested message and enum types in `ExceptionMechanismMetaSignal`.
            pub mod exception_mechanism_meta_signal {
                #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                pub enum HasCode {
                    #[prost(int64, tag = "1")]
                    Code(i64),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasCodeName {
                    #[prost(string, tag = "2")]
                    CodeName(::prost::alloc::string::String),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasName {
                    #[prost(string, tag = "3")]
                    Name(::prost::alloc::string::String),
                }
                #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
                pub enum HasNumber {
                    #[prost(int64, tag = "4")]
                    Number(i64),
                }
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasErrno {
                #[prost(message, tag = "1")]
                Errno(ExceptionMechanismMetaErrno),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasMachException {
                #[prost(message, tag = "2")]
                MachException(ExceptionMechanismMetaMachException),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasNsError {
                #[prost(message, tag = "3")]
                NsError(ExceptionMechanismMetaNsError),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasSignal {
                #[prost(message, tag = "4")]
                Signal(ExceptionMechanismMetaSignal),
            }
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasData {
            #[prost(message, tag = "1")]
            Data(::prost_types::Value),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasDescription {
            #[prost(string, tag = "2")]
            Description(::prost::alloc::string::String),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasExceptionId {
            #[prost(uint64, tag = "3")]
            ExceptionId(u64),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasHandled {
            #[prost(bool, tag = "4")]
            Handled(bool),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasHelpLink {
            #[prost(string, tag = "5")]
            HelpLink(::prost::alloc::string::String),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasIsExceptionGroup {
            #[prost(bool, tag = "6")]
            IsExceptionGroup(bool),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasMeta {
            #[prost(message, tag = "7")]
            Meta(ExceptionMechanismMeta),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasParentId {
            #[prost(uint64, tag = "8")]
            ParentId(u64),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasSource {
            #[prost(string, tag = "9")]
            Source(::prost::alloc::string::String),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasSynthetic {
            #[prost(bool, tag = "10")]
            Synthetic(bool),
        }
    }
    ///
    /// Stack trace containing frames of this exception.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ExceptionStacktrace {
        #[prost(message, repeated, tag = "1")]
        pub frames: ::prost::alloc::vec::Vec<exception_stacktrace::ExceptionStacktraceFrames>,
        #[prost(map = "string, string", tag = "4")]
        pub registers: ::std::collections::HashMap<
            ::prost::alloc::string::String,
            ::prost::alloc::string::String,
        >,
        #[prost(
            oneof = "exception_stacktrace::HasInstructionAddrAdjustment",
            tags = "2"
        )]
        pub has_instruction_addr_adjustment:
            ::core::option::Option<exception_stacktrace::HasInstructionAddrAdjustment>,
        #[prost(oneof = "exception_stacktrace::HasLang", tags = "3")]
        pub has_lang: ::core::option::Option<exception_stacktrace::HasLang>,
        #[prost(oneof = "exception_stacktrace::HasSnapshot", tags = "5")]
        pub has_snapshot: ::core::option::Option<exception_stacktrace::HasSnapshot>,
    }
    /// Nested message and enum types in `ExceptionStacktrace`.
    pub mod exception_stacktrace {
        ///
        /// Required. A non-empty list of stack frames. The list is ordered from caller to callee, or
        /// oldest to youngest. The last frame is the one creating the exception.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ExceptionStacktraceFrames {
            #[prost(string, repeated, tag = "16")]
            pub post_context: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
            #[prost(string, repeated, tag = "17")]
            pub pre_context: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
            #[prost(oneof = "exception_stacktrace_frames::HasAbsPath", tags = "1")]
            pub has_abs_path: ::core::option::Option<exception_stacktrace_frames::HasAbsPath>,
            #[prost(oneof = "exception_stacktrace_frames::HasAddrMode", tags = "2")]
            pub has_addr_mode: ::core::option::Option<exception_stacktrace_frames::HasAddrMode>,
            #[prost(oneof = "exception_stacktrace_frames::HasColno", tags = "3")]
            pub has_colno: ::core::option::Option<exception_stacktrace_frames::HasColno>,
            #[prost(oneof = "exception_stacktrace_frames::HasContextLine", tags = "4")]
            pub has_context_line:
                ::core::option::Option<exception_stacktrace_frames::HasContextLine>,
            #[prost(oneof = "exception_stacktrace_frames::HasFilename", tags = "5")]
            pub has_filename: ::core::option::Option<exception_stacktrace_frames::HasFilename>,
            #[prost(oneof = "exception_stacktrace_frames::HasFunction", tags = "6")]
            pub has_function: ::core::option::Option<exception_stacktrace_frames::HasFunction>,
            #[prost(oneof = "exception_stacktrace_frames::HasFunctionId", tags = "7")]
            pub has_function_id: ::core::option::Option<exception_stacktrace_frames::HasFunctionId>,
            #[prost(oneof = "exception_stacktrace_frames::HasImageAddr", tags = "8")]
            pub has_image_addr: ::core::option::Option<exception_stacktrace_frames::HasImageAddr>,
            #[prost(oneof = "exception_stacktrace_frames::HasInApp", tags = "9")]
            pub has_in_app: ::core::option::Option<exception_stacktrace_frames::HasInApp>,
            #[prost(oneof = "exception_stacktrace_frames::HasInstructionAddr", tags = "10")]
            pub has_instruction_addr:
                ::core::option::Option<exception_stacktrace_frames::HasInstructionAddr>,
            #[prost(oneof = "exception_stacktrace_frames::HasLineno", tags = "11")]
            pub has_lineno: ::core::option::Option<exception_stacktrace_frames::HasLineno>,
            #[prost(oneof = "exception_stacktrace_frames::HasLock", tags = "12")]
            pub has_lock: ::core::option::Option<exception_stacktrace_frames::HasLock>,
            #[prost(oneof = "exception_stacktrace_frames::HasModule", tags = "13")]
            pub has_module: ::core::option::Option<exception_stacktrace_frames::HasModule>,
            #[prost(oneof = "exception_stacktrace_frames::HasPackage", tags = "14")]
            pub has_package: ::core::option::Option<exception_stacktrace_frames::HasPackage>,
            #[prost(oneof = "exception_stacktrace_frames::HasPlatform", tags = "15")]
            pub has_platform: ::core::option::Option<exception_stacktrace_frames::HasPlatform>,
            #[prost(oneof = "exception_stacktrace_frames::HasRawFunction", tags = "18")]
            pub has_raw_function:
                ::core::option::Option<exception_stacktrace_frames::HasRawFunction>,
            #[prost(oneof = "exception_stacktrace_frames::HasStackStart", tags = "19")]
            pub has_stack_start: ::core::option::Option<exception_stacktrace_frames::HasStackStart>,
            #[prost(oneof = "exception_stacktrace_frames::HasSymbol", tags = "20")]
            pub has_symbol: ::core::option::Option<exception_stacktrace_frames::HasSymbol>,
            #[prost(oneof = "exception_stacktrace_frames::HasSymbolAddr", tags = "21")]
            pub has_symbol_addr: ::core::option::Option<exception_stacktrace_frames::HasSymbolAddr>,
            #[prost(oneof = "exception_stacktrace_frames::HasVars", tags = "22")]
            pub has_vars: ::core::option::Option<exception_stacktrace_frames::HasVars>,
        }
        /// Nested message and enum types in `ExceptionStacktraceFrames`.
        pub mod exception_stacktrace_frames {
            ///
            /// A possible lock (java monitor object) held by this frame.
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct ExceptionStacktraceFramesLock {
                #[prost(string, tag = "5")]
                pub r#type: ::prost::alloc::string::String,
                #[prost(oneof = "exception_stacktrace_frames_lock::HasAddress", tags = "1")]
                pub has_address:
                    ::core::option::Option<exception_stacktrace_frames_lock::HasAddress>,
                #[prost(oneof = "exception_stacktrace_frames_lock::HasClassName", tags = "2")]
                pub has_class_name:
                    ::core::option::Option<exception_stacktrace_frames_lock::HasClassName>,
                #[prost(oneof = "exception_stacktrace_frames_lock::HasPackageName", tags = "3")]
                pub has_package_name:
                    ::core::option::Option<exception_stacktrace_frames_lock::HasPackageName>,
                #[prost(oneof = "exception_stacktrace_frames_lock::HasThreadId", tags = "4")]
                pub has_thread_id:
                    ::core::option::Option<exception_stacktrace_frames_lock::HasThreadId>,
            }
            /// Nested message and enum types in `ExceptionStacktraceFramesLock`.
            pub mod exception_stacktrace_frames_lock {
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasAddress {
                    #[prost(string, tag = "1")]
                    Address(::prost::alloc::string::String),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasClassName {
                    #[prost(string, tag = "2")]
                    ClassName(::prost::alloc::string::String),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasPackageName {
                    #[prost(string, tag = "3")]
                    PackageName(::prost::alloc::string::String),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasThreadId {
                    #[prost(message, tag = "4")]
                    ThreadId(::prost_types::Value),
                }
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasAbsPath {
                #[prost(string, tag = "1")]
                AbsPath(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasAddrMode {
                #[prost(string, tag = "2")]
                AddrMode(::prost::alloc::string::String),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasColno {
                #[prost(uint64, tag = "3")]
                Colno(u64),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasContextLine {
                #[prost(string, tag = "4")]
                ContextLine(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasFilename {
                #[prost(string, tag = "5")]
                Filename(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasFunction {
                #[prost(string, tag = "6")]
                Function(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasFunctionId {
                #[prost(string, tag = "7")]
                FunctionId(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasImageAddr {
                #[prost(string, tag = "8")]
                ImageAddr(::prost::alloc::string::String),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasInApp {
                #[prost(bool, tag = "9")]
                InApp(bool),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasInstructionAddr {
                #[prost(string, tag = "10")]
                InstructionAddr(::prost::alloc::string::String),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasLineno {
                #[prost(uint64, tag = "11")]
                Lineno(u64),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasLock {
                #[prost(message, tag = "12")]
                Lock(ExceptionStacktraceFramesLock),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasModule {
                #[prost(string, tag = "13")]
                Module(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasPackage {
                #[prost(string, tag = "14")]
                Package(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasPlatform {
                #[prost(string, tag = "15")]
                Platform(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasRawFunction {
                #[prost(string, tag = "18")]
                RawFunction(::prost::alloc::string::String),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasStackStart {
                #[prost(bool, tag = "19")]
                StackStart(bool),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasSymbol {
                #[prost(string, tag = "20")]
                Symbol(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasSymbolAddr {
                #[prost(string, tag = "21")]
                SymbolAddr(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasVars {
                #[prost(message, tag = "22")]
                Vars(::prost_types::Value),
            }
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasInstructionAddrAdjustment {
            #[prost(string, tag = "2")]
            InstructionAddrAdjustment(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasLang {
            #[prost(string, tag = "3")]
            Lang(::prost::alloc::string::String),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasSnapshot {
            #[prost(bool, tag = "5")]
            Snapshot(bool),
        }
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasMechanism {
        #[prost(message, tag = "1")]
        Mechanism(ExceptionMechanism),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasModule {
        #[prost(string, tag = "2")]
        Module(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasStacktrace {
        #[prost(message, tag = "3")]
        Stacktrace(ExceptionStacktrace),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasThreadId {
        #[prost(message, tag = "4")]
        ThreadId(::prost_types::Value),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasType {
        #[prost(string, tag = "5")]
        Type(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasValue {
        #[prost(string, tag = "6")]
        Value(::prost::alloc::string::String),
    }
}
///
/// Holds information about a single stacktrace frame.
///
/// Each object should contain **at least** a `filename`, `function` or `instruction_addr`
/// attribute. All values are optional, but recommended.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Frame {
    #[prost(string, repeated, tag = "16")]
    pub post_context: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "17")]
    pub pre_context: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(oneof = "frame::HasAbsPath", tags = "1")]
    pub has_abs_path: ::core::option::Option<frame::HasAbsPath>,
    #[prost(oneof = "frame::HasAddrMode", tags = "2")]
    pub has_addr_mode: ::core::option::Option<frame::HasAddrMode>,
    #[prost(oneof = "frame::HasColno", tags = "3")]
    pub has_colno: ::core::option::Option<frame::HasColno>,
    #[prost(oneof = "frame::HasContextLine", tags = "4")]
    pub has_context_line: ::core::option::Option<frame::HasContextLine>,
    #[prost(oneof = "frame::HasFilename", tags = "5")]
    pub has_filename: ::core::option::Option<frame::HasFilename>,
    #[prost(oneof = "frame::HasFunction", tags = "6")]
    pub has_function: ::core::option::Option<frame::HasFunction>,
    #[prost(oneof = "frame::HasFunctionId", tags = "7")]
    pub has_function_id: ::core::option::Option<frame::HasFunctionId>,
    #[prost(oneof = "frame::HasImageAddr", tags = "8")]
    pub has_image_addr: ::core::option::Option<frame::HasImageAddr>,
    #[prost(oneof = "frame::HasInApp", tags = "9")]
    pub has_in_app: ::core::option::Option<frame::HasInApp>,
    #[prost(oneof = "frame::HasInstructionAddr", tags = "10")]
    pub has_instruction_addr: ::core::option::Option<frame::HasInstructionAddr>,
    #[prost(oneof = "frame::HasLineno", tags = "11")]
    pub has_lineno: ::core::option::Option<frame::HasLineno>,
    #[prost(oneof = "frame::HasLock", tags = "12")]
    pub has_lock: ::core::option::Option<frame::HasLock>,
    #[prost(oneof = "frame::HasModule", tags = "13")]
    pub has_module: ::core::option::Option<frame::HasModule>,
    #[prost(oneof = "frame::HasPackage", tags = "14")]
    pub has_package: ::core::option::Option<frame::HasPackage>,
    #[prost(oneof = "frame::HasPlatform", tags = "15")]
    pub has_platform: ::core::option::Option<frame::HasPlatform>,
    #[prost(oneof = "frame::HasRawFunction", tags = "18")]
    pub has_raw_function: ::core::option::Option<frame::HasRawFunction>,
    #[prost(oneof = "frame::HasStackStart", tags = "19")]
    pub has_stack_start: ::core::option::Option<frame::HasStackStart>,
    #[prost(oneof = "frame::HasSymbol", tags = "20")]
    pub has_symbol: ::core::option::Option<frame::HasSymbol>,
    #[prost(oneof = "frame::HasSymbolAddr", tags = "21")]
    pub has_symbol_addr: ::core::option::Option<frame::HasSymbolAddr>,
    #[prost(oneof = "frame::HasVars", tags = "22")]
    pub has_vars: ::core::option::Option<frame::HasVars>,
}
/// Nested message and enum types in `Frame`.
pub mod frame {
    ///
    /// A possible lock (java monitor object) held by this frame.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FrameLock {
        #[prost(string, tag = "5")]
        pub r#type: ::prost::alloc::string::String,
        #[prost(oneof = "frame_lock::HasAddress", tags = "1")]
        pub has_address: ::core::option::Option<frame_lock::HasAddress>,
        #[prost(oneof = "frame_lock::HasClassName", tags = "2")]
        pub has_class_name: ::core::option::Option<frame_lock::HasClassName>,
        #[prost(oneof = "frame_lock::HasPackageName", tags = "3")]
        pub has_package_name: ::core::option::Option<frame_lock::HasPackageName>,
        #[prost(oneof = "frame_lock::HasThreadId", tags = "4")]
        pub has_thread_id: ::core::option::Option<frame_lock::HasThreadId>,
    }
    /// Nested message and enum types in `FrameLock`.
    pub mod frame_lock {
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasAddress {
            #[prost(string, tag = "1")]
            Address(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasClassName {
            #[prost(string, tag = "2")]
            ClassName(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasPackageName {
            #[prost(string, tag = "3")]
            PackageName(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasThreadId {
            #[prost(message, tag = "4")]
            ThreadId(::prost_types::Value),
        }
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasAbsPath {
        #[prost(string, tag = "1")]
        AbsPath(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasAddrMode {
        #[prost(string, tag = "2")]
        AddrMode(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasColno {
        #[prost(uint64, tag = "3")]
        Colno(u64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasContextLine {
        #[prost(string, tag = "4")]
        ContextLine(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasFilename {
        #[prost(string, tag = "5")]
        Filename(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasFunction {
        #[prost(string, tag = "6")]
        Function(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasFunctionId {
        #[prost(string, tag = "7")]
        FunctionId(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasImageAddr {
        #[prost(string, tag = "8")]
        ImageAddr(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasInApp {
        #[prost(bool, tag = "9")]
        InApp(bool),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasInstructionAddr {
        #[prost(string, tag = "10")]
        InstructionAddr(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasLineno {
        #[prost(uint64, tag = "11")]
        Lineno(u64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasLock {
        #[prost(message, tag = "12")]
        Lock(FrameLock),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasModule {
        #[prost(string, tag = "13")]
        Module(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasPackage {
        #[prost(string, tag = "14")]
        Package(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasPlatform {
        #[prost(string, tag = "15")]
        Platform(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasRawFunction {
        #[prost(string, tag = "18")]
        RawFunction(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasStackStart {
        #[prost(bool, tag = "19")]
        StackStart(bool),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasSymbol {
        #[prost(string, tag = "20")]
        Symbol(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasSymbolAddr {
        #[prost(string, tag = "21")]
        SymbolAddr(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasVars {
        #[prost(message, tag = "22")]
        Vars(::prost_types::Value),
    }
}
///
/// Geographical location of the end user or device.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Geo {
    #[prost(oneof = "geo::HasCity", tags = "1")]
    pub has_city: ::core::option::Option<geo::HasCity>,
    #[prost(oneof = "geo::HasCountryCode", tags = "2")]
    pub has_country_code: ::core::option::Option<geo::HasCountryCode>,
    #[prost(oneof = "geo::HasRegion", tags = "3")]
    pub has_region: ::core::option::Option<geo::HasRegion>,
    #[prost(oneof = "geo::HasSubdivision", tags = "4")]
    pub has_subdivision: ::core::option::Option<geo::HasSubdivision>,
}
/// Nested message and enum types in `Geo`.
pub mod geo {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasCity {
        #[prost(string, tag = "1")]
        City(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasCountryCode {
        #[prost(string, tag = "2")]
        CountryCode(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasRegion {
        #[prost(string, tag = "3")]
        Region(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasSubdivision {
        #[prost(string, tag = "4")]
        Subdivision(::prost::alloc::string::String),
    }
}
///
/// GPU information.
///
/// Example:
///
/// ```json
/// "gpu": {
/// "name": "AMD Radeon Pro 560",
/// "vendor_name": "Apple",
/// "memory_size": 4096,
/// "api_type": "Metal",
/// "multi_threaded_rendering": true,
/// "version": "Metal",
/// "npot_support": "Full"
/// }
/// ```
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gpucontext {
    #[prost(message, optional, tag = "3")]
    pub id: ::core::option::Option<::prost_types::Value>,
    #[prost(oneof = "gpucontext::HasApiType", tags = "1")]
    pub has_api_type: ::core::option::Option<gpucontext::HasApiType>,
    #[prost(oneof = "gpucontext::HasGraphicsShaderLevel", tags = "2")]
    pub has_graphics_shader_level: ::core::option::Option<gpucontext::HasGraphicsShaderLevel>,
    #[prost(oneof = "gpucontext::HasMaxTextureSize", tags = "4")]
    pub has_max_texture_size: ::core::option::Option<gpucontext::HasMaxTextureSize>,
    #[prost(oneof = "gpucontext::HasMemorySize", tags = "5")]
    pub has_memory_size: ::core::option::Option<gpucontext::HasMemorySize>,
    #[prost(oneof = "gpucontext::HasMultiThreadedRendering", tags = "6")]
    pub has_multi_threaded_rendering: ::core::option::Option<gpucontext::HasMultiThreadedRendering>,
    #[prost(oneof = "gpucontext::HasName", tags = "7")]
    pub has_name: ::core::option::Option<gpucontext::HasName>,
    #[prost(oneof = "gpucontext::HasNpotSupport", tags = "8")]
    pub has_npot_support: ::core::option::Option<gpucontext::HasNpotSupport>,
    #[prost(oneof = "gpucontext::HasSupportsComputeShaders", tags = "9")]
    pub has_supports_compute_shaders: ::core::option::Option<gpucontext::HasSupportsComputeShaders>,
    #[prost(oneof = "gpucontext::HasSupportsDrawCallInstancing", tags = "10")]
    pub has_supports_draw_call_instancing:
        ::core::option::Option<gpucontext::HasSupportsDrawCallInstancing>,
    #[prost(oneof = "gpucontext::HasSupportsGeometryShaders", tags = "11")]
    pub has_supports_geometry_shaders:
        ::core::option::Option<gpucontext::HasSupportsGeometryShaders>,
    #[prost(oneof = "gpucontext::HasSupportsRayTracing", tags = "12")]
    pub has_supports_ray_tracing: ::core::option::Option<gpucontext::HasSupportsRayTracing>,
    #[prost(oneof = "gpucontext::HasVendorId", tags = "13")]
    pub has_vendor_id: ::core::option::Option<gpucontext::HasVendorId>,
    #[prost(oneof = "gpucontext::HasVendorName", tags = "14")]
    pub has_vendor_name: ::core::option::Option<gpucontext::HasVendorName>,
    #[prost(oneof = "gpucontext::HasVersion", tags = "15")]
    pub has_version: ::core::option::Option<gpucontext::HasVersion>,
}
/// Nested message and enum types in `Gpucontext`.
pub mod gpucontext {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasApiType {
        #[prost(string, tag = "1")]
        ApiType(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasGraphicsShaderLevel {
        #[prost(string, tag = "2")]
        GraphicsShaderLevel(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasMaxTextureSize {
        #[prost(uint64, tag = "4")]
        MaxTextureSize(u64),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasMemorySize {
        #[prost(uint64, tag = "5")]
        MemorySize(u64),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasMultiThreadedRendering {
        #[prost(bool, tag = "6")]
        MultiThreadedRendering(bool),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasName {
        #[prost(string, tag = "7")]
        Name(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasNpotSupport {
        #[prost(string, tag = "8")]
        NpotSupport(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasSupportsComputeShaders {
        #[prost(bool, tag = "9")]
        SupportsComputeShaders(bool),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasSupportsDrawCallInstancing {
        #[prost(bool, tag = "10")]
        SupportsDrawCallInstancing(bool),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasSupportsGeometryShaders {
        #[prost(bool, tag = "11")]
        SupportsGeometryShaders(bool),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasSupportsRayTracing {
        #[prost(bool, tag = "12")]
        SupportsRayTracing(bool),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasVendorId {
        #[prost(string, tag = "13")]
        VendorId(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasVendorName {
        #[prost(string, tag = "14")]
        VendorName(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasVersion {
        #[prost(string, tag = "15")]
        Version(::prost::alloc::string::String),
    }
}
///
/// A debug image consisting of source files for a JVM based language.
///
/// Examples:
///
/// ```json
/// {
/// "type": "jvm",
/// "debug_id": "395835f4-03e0-4436-80d3-136f0749a893"
/// }
/// ```
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jvmdebugimage {
    #[prost(string, tag = "1")]
    pub debug_id: ::prost::alloc::string::String,
}
///
/// Represents an instance of a held lock (java monitor object) in a thread.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lockreason {
    #[prost(string, tag = "5")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(oneof = "lockreason::HasAddress", tags = "1")]
    pub has_address: ::core::option::Option<lockreason::HasAddress>,
    #[prost(oneof = "lockreason::HasClassName", tags = "2")]
    pub has_class_name: ::core::option::Option<lockreason::HasClassName>,
    #[prost(oneof = "lockreason::HasPackageName", tags = "3")]
    pub has_package_name: ::core::option::Option<lockreason::HasPackageName>,
    #[prost(oneof = "lockreason::HasThreadId", tags = "4")]
    pub has_thread_id: ::core::option::Option<lockreason::HasThreadId>,
}
/// Nested message and enum types in `Lockreason`.
pub mod lockreason {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasAddress {
        #[prost(string, tag = "1")]
        Address(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasClassName {
        #[prost(string, tag = "2")]
        ClassName(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasPackageName {
        #[prost(string, tag = "3")]
        PackageName(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasThreadId {
        #[prost(message, tag = "4")]
        ThreadId(::prost_types::Value),
    }
}
///
/// A log entry message.
///
/// A log message is similar to the `message` attribute on the event itself but
/// can additionally hold optional parameters.
///
/// ```json
/// {
/// "message": {
/// "message": "My raw message with interpreted strings like %s",
/// "params": \["this"\]
/// }
/// }
/// ```
///
/// ```json
/// {
/// "message": {
/// "message": "My raw message with interpreted strings like {foo}",
/// "params": {"foo": "this"}
/// }
/// }
/// ```
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Logentry {
    #[prost(message, optional, tag = "3")]
    pub params: ::core::option::Option<::prost_types::Value>,
    #[prost(oneof = "logentry::HasFormatted", tags = "1")]
    pub has_formatted: ::core::option::Option<logentry::HasFormatted>,
    #[prost(oneof = "logentry::HasMessage", tags = "2")]
    pub has_message: ::core::option::Option<logentry::HasMessage>,
}
/// Nested message and enum types in `Logentry`.
pub mod logentry {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasFormatted {
        #[prost(string, tag = "1")]
        Formatted(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasMessage {
        #[prost(string, tag = "2")]
        Message(::prost::alloc::string::String),
    }
}
///
/// Mach exception information.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Machexception {
    #[prost(oneof = "machexception::HasCode", tags = "1")]
    pub has_code: ::core::option::Option<machexception::HasCode>,
    #[prost(oneof = "machexception::HasException", tags = "2")]
    pub has_exception: ::core::option::Option<machexception::HasException>,
    #[prost(oneof = "machexception::HasName", tags = "3")]
    pub has_name: ::core::option::Option<machexception::HasName>,
    #[prost(oneof = "machexception::HasSubcode", tags = "4")]
    pub has_subcode: ::core::option::Option<machexception::HasSubcode>,
}
/// Nested message and enum types in `Machexception`.
pub mod machexception {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasCode {
        #[prost(uint64, tag = "1")]
        Code(u64),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasException {
        #[prost(int64, tag = "2")]
        Exception(i64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasName {
        #[prost(string, tag = "3")]
        Name(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasSubcode {
        #[prost(uint64, tag = "4")]
        Subcode(u64),
    }
}
///
/// The mechanism by which an exception was generated and handled.
///
/// The exception mechanism is an optional field residing in the [exception](#typedef-Exception).
/// It carries additional information about the way the exception was created on the target system.
/// This includes general exception values obtained from the operating system or runtime APIs, as
/// well as mechanism-specific values.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mechanism {
    #[prost(string, tag = "11")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(oneof = "mechanism::HasData", tags = "1")]
    pub has_data: ::core::option::Option<mechanism::HasData>,
    #[prost(oneof = "mechanism::HasDescription", tags = "2")]
    pub has_description: ::core::option::Option<mechanism::HasDescription>,
    #[prost(oneof = "mechanism::HasExceptionId", tags = "3")]
    pub has_exception_id: ::core::option::Option<mechanism::HasExceptionId>,
    #[prost(oneof = "mechanism::HasHandled", tags = "4")]
    pub has_handled: ::core::option::Option<mechanism::HasHandled>,
    #[prost(oneof = "mechanism::HasHelpLink", tags = "5")]
    pub has_help_link: ::core::option::Option<mechanism::HasHelpLink>,
    #[prost(oneof = "mechanism::HasIsExceptionGroup", tags = "6")]
    pub has_is_exception_group: ::core::option::Option<mechanism::HasIsExceptionGroup>,
    #[prost(oneof = "mechanism::HasMeta", tags = "7")]
    pub has_meta: ::core::option::Option<mechanism::HasMeta>,
    #[prost(oneof = "mechanism::HasParentId", tags = "8")]
    pub has_parent_id: ::core::option::Option<mechanism::HasParentId>,
    #[prost(oneof = "mechanism::HasSource", tags = "9")]
    pub has_source: ::core::option::Option<mechanism::HasSource>,
    #[prost(oneof = "mechanism::HasSynthetic", tags = "10")]
    pub has_synthetic: ::core::option::Option<mechanism::HasSynthetic>,
}
/// Nested message and enum types in `Mechanism`.
pub mod mechanism {
    ///
    /// Operating system or runtime meta information.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MechanismMeta {
        #[prost(oneof = "mechanism_meta::HasErrno", tags = "1")]
        pub has_errno: ::core::option::Option<mechanism_meta::HasErrno>,
        #[prost(oneof = "mechanism_meta::HasMachException", tags = "2")]
        pub has_mach_exception: ::core::option::Option<mechanism_meta::HasMachException>,
        #[prost(oneof = "mechanism_meta::HasNsError", tags = "3")]
        pub has_ns_error: ::core::option::Option<mechanism_meta::HasNsError>,
        #[prost(oneof = "mechanism_meta::HasSignal", tags = "4")]
        pub has_signal: ::core::option::Option<mechanism_meta::HasSignal>,
    }
    /// Nested message and enum types in `MechanismMeta`.
    pub mod mechanism_meta {
        ///
        /// Optional ISO C standard error code.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct MechanismMetaErrno {
            #[prost(oneof = "mechanism_meta_errno::HasName", tags = "1")]
            pub has_name: ::core::option::Option<mechanism_meta_errno::HasName>,
            #[prost(oneof = "mechanism_meta_errno::HasNumber", tags = "2")]
            pub has_number: ::core::option::Option<mechanism_meta_errno::HasNumber>,
        }
        /// Nested message and enum types in `MechanismMetaErrno`.
        pub mod mechanism_meta_errno {
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasName {
                #[prost(string, tag = "1")]
                Name(::prost::alloc::string::String),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasNumber {
                #[prost(int64, tag = "2")]
                Number(i64),
            }
        }
        ///
        /// A Mach Exception on Apple systems comprising a code triple and optional descriptions.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct MechanismMetaMachException {
            #[prost(oneof = "mechanism_meta_mach_exception::HasCode", tags = "1")]
            pub has_code: ::core::option::Option<mechanism_meta_mach_exception::HasCode>,
            #[prost(oneof = "mechanism_meta_mach_exception::HasException", tags = "2")]
            pub has_exception: ::core::option::Option<mechanism_meta_mach_exception::HasException>,
            #[prost(oneof = "mechanism_meta_mach_exception::HasName", tags = "3")]
            pub has_name: ::core::option::Option<mechanism_meta_mach_exception::HasName>,
            #[prost(oneof = "mechanism_meta_mach_exception::HasSubcode", tags = "4")]
            pub has_subcode: ::core::option::Option<mechanism_meta_mach_exception::HasSubcode>,
        }
        /// Nested message and enum types in `MechanismMetaMachException`.
        pub mod mechanism_meta_mach_exception {
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasCode {
                #[prost(uint64, tag = "1")]
                Code(u64),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasException {
                #[prost(int64, tag = "2")]
                Exception(i64),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasName {
                #[prost(string, tag = "3")]
                Name(::prost::alloc::string::String),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasSubcode {
                #[prost(uint64, tag = "4")]
                Subcode(u64),
            }
        }
        ///
        /// An NSError on Apple systems comprising code and signal.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct MechanismMetaNsError {
            #[prost(oneof = "mechanism_meta_ns_error::HasCode", tags = "1")]
            pub has_code: ::core::option::Option<mechanism_meta_ns_error::HasCode>,
            #[prost(oneof = "mechanism_meta_ns_error::HasDomain", tags = "2")]
            pub has_domain: ::core::option::Option<mechanism_meta_ns_error::HasDomain>,
        }
        /// Nested message and enum types in `MechanismMetaNsError`.
        pub mod mechanism_meta_ns_error {
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasCode {
                #[prost(int64, tag = "1")]
                Code(i64),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasDomain {
                #[prost(string, tag = "2")]
                Domain(::prost::alloc::string::String),
            }
        }
        ///
        /// Information on the POSIX signal.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct MechanismMetaSignal {
            #[prost(oneof = "mechanism_meta_signal::HasCode", tags = "1")]
            pub has_code: ::core::option::Option<mechanism_meta_signal::HasCode>,
            #[prost(oneof = "mechanism_meta_signal::HasCodeName", tags = "2")]
            pub has_code_name: ::core::option::Option<mechanism_meta_signal::HasCodeName>,
            #[prost(oneof = "mechanism_meta_signal::HasName", tags = "3")]
            pub has_name: ::core::option::Option<mechanism_meta_signal::HasName>,
            #[prost(oneof = "mechanism_meta_signal::HasNumber", tags = "4")]
            pub has_number: ::core::option::Option<mechanism_meta_signal::HasNumber>,
        }
        /// Nested message and enum types in `MechanismMetaSignal`.
        pub mod mechanism_meta_signal {
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasCode {
                #[prost(int64, tag = "1")]
                Code(i64),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasCodeName {
                #[prost(string, tag = "2")]
                CodeName(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasName {
                #[prost(string, tag = "3")]
                Name(::prost::alloc::string::String),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasNumber {
                #[prost(int64, tag = "4")]
                Number(i64),
            }
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasErrno {
            #[prost(message, tag = "1")]
            Errno(MechanismMetaErrno),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasMachException {
            #[prost(message, tag = "2")]
            MachException(MechanismMetaMachException),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasNsError {
            #[prost(message, tag = "3")]
            NsError(MechanismMetaNsError),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasSignal {
            #[prost(message, tag = "4")]
            Signal(MechanismMetaSignal),
        }
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasData {
        #[prost(message, tag = "1")]
        Data(::prost_types::Value),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasDescription {
        #[prost(string, tag = "2")]
        Description(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasExceptionId {
        #[prost(uint64, tag = "3")]
        ExceptionId(u64),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasHandled {
        #[prost(bool, tag = "4")]
        Handled(bool),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasHelpLink {
        #[prost(string, tag = "5")]
        HelpLink(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasIsExceptionGroup {
        #[prost(bool, tag = "6")]
        IsExceptionGroup(bool),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasMeta {
        #[prost(message, tag = "7")]
        Meta(MechanismMeta),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasParentId {
        #[prost(uint64, tag = "8")]
        ParentId(u64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasSource {
        #[prost(string, tag = "9")]
        Source(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasSynthetic {
        #[prost(bool, tag = "10")]
        Synthetic(bool),
    }
}
///
/// Operating system or runtime meta information to an exception mechanism.
///
/// The mechanism metadata usually carries error codes reported by the runtime or operating system,
/// along with a platform-dependent interpretation of these codes. SDKs can safely omit code names
/// and descriptions for well-known error codes, as it will be filled out by Sentry. For
/// proprietary or vendor-specific error codes, adding these values will give additional
/// information to the user.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mechanismmeta {
    #[prost(oneof = "mechanismmeta::HasErrno", tags = "1")]
    pub has_errno: ::core::option::Option<mechanismmeta::HasErrno>,
    #[prost(oneof = "mechanismmeta::HasMachException", tags = "2")]
    pub has_mach_exception: ::core::option::Option<mechanismmeta::HasMachException>,
    #[prost(oneof = "mechanismmeta::HasNsError", tags = "3")]
    pub has_ns_error: ::core::option::Option<mechanismmeta::HasNsError>,
    #[prost(oneof = "mechanismmeta::HasSignal", tags = "4")]
    pub has_signal: ::core::option::Option<mechanismmeta::HasSignal>,
}
/// Nested message and enum types in `Mechanismmeta`.
pub mod mechanismmeta {
    ///
    /// Optional ISO C standard error code.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MechanismmetaErrno {
        #[prost(oneof = "mechanismmeta_errno::HasName", tags = "1")]
        pub has_name: ::core::option::Option<mechanismmeta_errno::HasName>,
        #[prost(oneof = "mechanismmeta_errno::HasNumber", tags = "2")]
        pub has_number: ::core::option::Option<mechanismmeta_errno::HasNumber>,
    }
    /// Nested message and enum types in `MechanismmetaErrno`.
    pub mod mechanismmeta_errno {
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasName {
            #[prost(string, tag = "1")]
            Name(::prost::alloc::string::String),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasNumber {
            #[prost(int64, tag = "2")]
            Number(i64),
        }
    }
    ///
    /// A Mach Exception on Apple systems comprising a code triple and optional descriptions.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MechanismmetaMachException {
        #[prost(oneof = "mechanismmeta_mach_exception::HasCode", tags = "1")]
        pub has_code: ::core::option::Option<mechanismmeta_mach_exception::HasCode>,
        #[prost(oneof = "mechanismmeta_mach_exception::HasException", tags = "2")]
        pub has_exception: ::core::option::Option<mechanismmeta_mach_exception::HasException>,
        #[prost(oneof = "mechanismmeta_mach_exception::HasName", tags = "3")]
        pub has_name: ::core::option::Option<mechanismmeta_mach_exception::HasName>,
        #[prost(oneof = "mechanismmeta_mach_exception::HasSubcode", tags = "4")]
        pub has_subcode: ::core::option::Option<mechanismmeta_mach_exception::HasSubcode>,
    }
    /// Nested message and enum types in `MechanismmetaMachException`.
    pub mod mechanismmeta_mach_exception {
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasCode {
            #[prost(uint64, tag = "1")]
            Code(u64),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasException {
            #[prost(int64, tag = "2")]
            Exception(i64),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasName {
            #[prost(string, tag = "3")]
            Name(::prost::alloc::string::String),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasSubcode {
            #[prost(uint64, tag = "4")]
            Subcode(u64),
        }
    }
    ///
    /// An NSError on Apple systems comprising code and signal.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MechanismmetaNsError {
        #[prost(oneof = "mechanismmeta_ns_error::HasCode", tags = "1")]
        pub has_code: ::core::option::Option<mechanismmeta_ns_error::HasCode>,
        #[prost(oneof = "mechanismmeta_ns_error::HasDomain", tags = "2")]
        pub has_domain: ::core::option::Option<mechanismmeta_ns_error::HasDomain>,
    }
    /// Nested message and enum types in `MechanismmetaNsError`.
    pub mod mechanismmeta_ns_error {
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasCode {
            #[prost(int64, tag = "1")]
            Code(i64),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasDomain {
            #[prost(string, tag = "2")]
            Domain(::prost::alloc::string::String),
        }
    }
    ///
    /// Information on the POSIX signal.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MechanismmetaSignal {
        #[prost(oneof = "mechanismmeta_signal::HasCode", tags = "1")]
        pub has_code: ::core::option::Option<mechanismmeta_signal::HasCode>,
        #[prost(oneof = "mechanismmeta_signal::HasCodeName", tags = "2")]
        pub has_code_name: ::core::option::Option<mechanismmeta_signal::HasCodeName>,
        #[prost(oneof = "mechanismmeta_signal::HasName", tags = "3")]
        pub has_name: ::core::option::Option<mechanismmeta_signal::HasName>,
        #[prost(oneof = "mechanismmeta_signal::HasNumber", tags = "4")]
        pub has_number: ::core::option::Option<mechanismmeta_signal::HasNumber>,
    }
    /// Nested message and enum types in `MechanismmetaSignal`.
    pub mod mechanismmeta_signal {
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasCode {
            #[prost(int64, tag = "1")]
            Code(i64),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasCodeName {
            #[prost(string, tag = "2")]
            CodeName(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasName {
            #[prost(string, tag = "3")]
            Name(::prost::alloc::string::String),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasNumber {
            #[prost(int64, tag = "4")]
            Number(i64),
        }
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasErrno {
        #[prost(message, tag = "1")]
        Errno(MechanismmetaErrno),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasMachException {
        #[prost(message, tag = "2")]
        MachException(MechanismmetaMachException),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasNsError {
        #[prost(message, tag = "3")]
        NsError(MechanismmetaNsError),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasSignal {
        #[prost(message, tag = "4")]
        Signal(MechanismmetaSignal),
    }
}
///
/// A generic (new-style) native platform debug information file.
///
/// The `type` key must be one of:
///
/// - `macho`
/// - `elf`: ELF images are used on Linux platforms. Their structure is identical to other native images.
/// - `pe`
///
/// Examples:
///
/// ```json
/// {
/// "type": "elf",
/// "code_id": "68220ae2c65d65c1b6aaa12fa6765a6ec2f5f434",
/// "code_file": "/lib/x86_64-linux-gnu/libgcc_s.so.1",
/// "debug_id": "e20a2268-5dc6-c165-b6aa-a12fa6765a6e",
/// "image_addr": "0x7f5140527000",
/// "image_size": 90112,
/// "image_vmaddr": "0x40000",
/// "arch": "x86_64"
/// }
/// ```
///
/// ```json
/// {
/// "type": "pe",
/// "code_id": "57898e12145000",
/// "code_file": "C:\\Windows\\System32\\dbghelp.dll",
/// "debug_id": "9c2a902b-6fdf-40ad-8308-588a41d572a0-1",
/// "debug_file": "dbghelp.pdb",
/// "image_addr": "0x70850000",
/// "image_size": "1331200",
/// "image_vmaddr": "0x40000",
/// "arch": "x86"
/// }
/// ```
///
/// ```json
/// {
/// "type": "macho",
/// "debug_id": "84a04d24-0e60-3810-a8c0-90a65e2df61a",
/// "debug_file": "libDiagnosticMessagesClient.dylib",
/// "code_file": "/usr/lib/libDiagnosticMessagesClient.dylib",
/// "image_addr": "0x7fffe668e000",
/// "image_size": 8192,
/// "image_vmaddr": "0x40000",
/// "arch": "x86_64",
/// }
/// ```
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nativedebugimage {
    #[prost(string, tag = "2")]
    pub code_file: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub debug_id: ::prost::alloc::string::String,
    #[prost(oneof = "nativedebugimage::HasArch", tags = "1")]
    pub has_arch: ::core::option::Option<nativedebugimage::HasArch>,
    #[prost(oneof = "nativedebugimage::HasCodeId", tags = "3")]
    pub has_code_id: ::core::option::Option<nativedebugimage::HasCodeId>,
    #[prost(oneof = "nativedebugimage::HasDebugChecksum", tags = "4")]
    pub has_debug_checksum: ::core::option::Option<nativedebugimage::HasDebugChecksum>,
    #[prost(oneof = "nativedebugimage::HasDebugFile", tags = "5")]
    pub has_debug_file: ::core::option::Option<nativedebugimage::HasDebugFile>,
    #[prost(oneof = "nativedebugimage::HasImageAddr", tags = "7")]
    pub has_image_addr: ::core::option::Option<nativedebugimage::HasImageAddr>,
    #[prost(oneof = "nativedebugimage::HasImageSize", tags = "8")]
    pub has_image_size: ::core::option::Option<nativedebugimage::HasImageSize>,
    #[prost(oneof = "nativedebugimage::HasImageVmaddr", tags = "9")]
    pub has_image_vmaddr: ::core::option::Option<nativedebugimage::HasImageVmaddr>,
}
/// Nested message and enum types in `Nativedebugimage`.
pub mod nativedebugimage {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasArch {
        #[prost(string, tag = "1")]
        Arch(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasCodeId {
        #[prost(string, tag = "3")]
        CodeId(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasDebugChecksum {
        #[prost(string, tag = "4")]
        DebugChecksum(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasDebugFile {
        #[prost(string, tag = "5")]
        DebugFile(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasImageAddr {
        #[prost(string, tag = "7")]
        ImageAddr(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasImageSize {
        #[prost(uint64, tag = "8")]
        ImageSize(u64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasImageVmaddr {
        #[prost(string, tag = "9")]
        ImageVmaddr(::prost::alloc::string::String),
    }
}
///
/// Contains NEL report information.
///
/// Network Error Logging (NEL) is a browser feature that allows reporting of failed network
/// requests from the client side. See the following resources for more information:
///
/// - [W3C Editor's Draft](<https://w3c.github.io/network-error-logging/>)
/// - [MDN](<https://developer.mozilla.org/en-US/docs/Web/HTTP/Network_Error_Logging>)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nelcontext {
    #[prost(oneof = "nelcontext::HasElapsedTime", tags = "1")]
    pub has_elapsed_time: ::core::option::Option<nelcontext::HasElapsedTime>,
    #[prost(oneof = "nelcontext::HasErrorType", tags = "2")]
    pub has_error_type: ::core::option::Option<nelcontext::HasErrorType>,
    #[prost(oneof = "nelcontext::HasPhase", tags = "3")]
    pub has_phase: ::core::option::Option<nelcontext::HasPhase>,
    #[prost(oneof = "nelcontext::HasSamplingFraction", tags = "4")]
    pub has_sampling_fraction: ::core::option::Option<nelcontext::HasSamplingFraction>,
    #[prost(oneof = "nelcontext::HasServerIp", tags = "5")]
    pub has_server_ip: ::core::option::Option<nelcontext::HasServerIp>,
}
/// Nested message and enum types in `Nelcontext`.
pub mod nelcontext {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasElapsedTime {
        #[prost(uint64, tag = "1")]
        ElapsedTime(u64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasErrorType {
        #[prost(string, tag = "2")]
        ErrorType(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasPhase {
        #[prost(message, tag = "3")]
        Phase(::prost_types::Value),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasSamplingFraction {
        #[prost(double, tag = "4")]
        SamplingFraction(f64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasServerIp {
        #[prost(string, tag = "5")]
        ServerIp(::prost::alloc::string::String),
    }
}
///
/// NSError informaiton.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nserror {
    #[prost(oneof = "nserror::HasCode", tags = "1")]
    pub has_code: ::core::option::Option<nserror::HasCode>,
    #[prost(oneof = "nserror::HasDomain", tags = "2")]
    pub has_domain: ::core::option::Option<nserror::HasDomain>,
}
/// Nested message and enum types in `Nserror`.
pub mod nserror {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasCode {
        #[prost(int64, tag = "1")]
        Code(i64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasDomain {
        #[prost(string, tag = "2")]
        Domain(::prost::alloc::string::String),
    }
}
///
/// Operating system information.
///
/// OS context describes the operating system on which the event was created. In web contexts, this
/// is the operating system of the browser (generally pulled from the User-Agent string).
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oscontext {
    #[prost(oneof = "oscontext::HasBuild", tags = "1")]
    pub has_build: ::core::option::Option<oscontext::HasBuild>,
    #[prost(oneof = "oscontext::HasKernelVersion", tags = "2")]
    pub has_kernel_version: ::core::option::Option<oscontext::HasKernelVersion>,
    #[prost(oneof = "oscontext::HasName", tags = "3")]
    pub has_name: ::core::option::Option<oscontext::HasName>,
    #[prost(oneof = "oscontext::HasRawDescription", tags = "4")]
    pub has_raw_description: ::core::option::Option<oscontext::HasRawDescription>,
    #[prost(oneof = "oscontext::HasRooted", tags = "5")]
    pub has_rooted: ::core::option::Option<oscontext::HasRooted>,
    #[prost(oneof = "oscontext::HasVersion", tags = "6")]
    pub has_version: ::core::option::Option<oscontext::HasVersion>,
}
/// Nested message and enum types in `Oscontext`.
pub mod oscontext {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasBuild {
        #[prost(string, tag = "1")]
        Build(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasKernelVersion {
        #[prost(string, tag = "2")]
        KernelVersion(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasName {
        #[prost(string, tag = "3")]
        Name(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasRawDescription {
        #[prost(string, tag = "4")]
        RawDescription(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasRooted {
        #[prost(bool, tag = "5")]
        Rooted(bool),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasVersion {
        #[prost(string, tag = "6")]
        Version(::prost::alloc::string::String),
    }
}
///
/// OpenTelemetry Context
///
/// If an event has this context, it was generated from an OpenTelemetry signal (trace, metric, log).
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Otelcontext {
    #[prost(oneof = "otelcontext::HasAttributes", tags = "1")]
    pub has_attributes: ::core::option::Option<otelcontext::HasAttributes>,
    #[prost(oneof = "otelcontext::HasResource", tags = "2")]
    pub has_resource: ::core::option::Option<otelcontext::HasResource>,
}
/// Nested message and enum types in `Otelcontext`.
pub mod otelcontext {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasAttributes {
        #[prost(message, tag = "1")]
        Attributes(::prost_types::Value),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasResource {
        #[prost(message, tag = "2")]
        Resource(::prost_types::Value),
    }
}
///
/// POSIX signal with optional extended data.
///
/// On Apple systems, signals also carry a code in addition to the signal number describing the
/// signal in more detail. On Linux, this code does not exist.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Posixsignal {
    #[prost(oneof = "posixsignal::HasCode", tags = "1")]
    pub has_code: ::core::option::Option<posixsignal::HasCode>,
    #[prost(oneof = "posixsignal::HasCodeName", tags = "2")]
    pub has_code_name: ::core::option::Option<posixsignal::HasCodeName>,
    #[prost(oneof = "posixsignal::HasName", tags = "3")]
    pub has_name: ::core::option::Option<posixsignal::HasName>,
    #[prost(oneof = "posixsignal::HasNumber", tags = "4")]
    pub has_number: ::core::option::Option<posixsignal::HasNumber>,
}
/// Nested message and enum types in `Posixsignal`.
pub mod posixsignal {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasCode {
        #[prost(int64, tag = "1")]
        Code(i64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasCodeName {
        #[prost(string, tag = "2")]
        CodeName(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasName {
        #[prost(string, tag = "3")]
        Name(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasNumber {
        #[prost(int64, tag = "4")]
        Number(i64),
    }
}
///
/// Profile context
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Profilecontext {
    #[prost(string, tag = "1")]
    pub profile_id: ::prost::alloc::string::String,
}
///
/// Proguard mapping file.
///
/// Proguard images refer to `mapping.txt` files generated when Proguard obfuscates function names. The Java SDK integrations assign this file a unique identifier, which has to be included in the list of images.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Proguarddebugimage {
    #[prost(string, tag = "1")]
    pub uuid: ::prost::alloc::string::String,
}
///
/// A stack trace of a single thread.
///
/// A stack trace contains a list of frames, each with various bits (most optional) describing the
/// context of that frame. Frames should be sorted from oldest to newest.
///
/// For the given example program written in Python:
///
/// ```python
/// def foo():
/// my_var = 'foo'
/// raise ValueError()
///
/// def main():
/// foo()
/// ```
///
/// A minimalistic stack trace for the above program in the correct order:
///
/// ```json
/// {
/// "frames": [
/// {"function": "main"},
/// {"function": "foo"}
/// ]
/// }
/// ```
///
/// The top frame fully symbolicated with five lines of source context:
///
/// ```json
/// {
/// "frames": [{
/// "in_app": true,
/// "function": "myfunction",
/// "abs_path": "/real/file/name.py",
/// "filename": "file/name.py",
/// "lineno": 3,
/// "vars": {
/// "my_var": "'value'"
/// },
/// "pre_context": [
/// "def foo():",
/// "  my_var = 'foo'",
/// ],
/// "context_line": "  raise ValueError()",
/// "post_context": [
/// "",
/// "def main():"
/// ],
/// }]
/// }
/// ```
///
/// A minimal native stack trace with register values. Note that the `package` event attribute must
/// be "native" for these frames to be symbolicated.
///
/// ```json
/// {
/// "frames": [
/// {"instruction_addr": "0x7fff5bf3456c"},
/// {"instruction_addr": "0x7fff5bf346c0"},
/// ],
/// "registers": {
/// "rip": "0x00007ff6eef54be2",
/// "rsp": "0x0000003b710cd9e0"
/// }
/// }
/// ```
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Rawstacktrace {
    #[prost(message, repeated, tag = "1")]
    pub frames: ::prost::alloc::vec::Vec<rawstacktrace::RawstacktraceFrames>,
    #[prost(map = "string, string", tag = "4")]
    pub registers:
        ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    #[prost(oneof = "rawstacktrace::HasInstructionAddrAdjustment", tags = "2")]
    pub has_instruction_addr_adjustment:
        ::core::option::Option<rawstacktrace::HasInstructionAddrAdjustment>,
    #[prost(oneof = "rawstacktrace::HasLang", tags = "3")]
    pub has_lang: ::core::option::Option<rawstacktrace::HasLang>,
    #[prost(oneof = "rawstacktrace::HasSnapshot", tags = "5")]
    pub has_snapshot: ::core::option::Option<rawstacktrace::HasSnapshot>,
}
/// Nested message and enum types in `Rawstacktrace`.
pub mod rawstacktrace {
    ///
    /// Required. A non-empty list of stack frames. The list is ordered from caller to callee, or
    /// oldest to youngest. The last frame is the one creating the exception.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct RawstacktraceFrames {
        #[prost(string, repeated, tag = "16")]
        pub post_context: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(string, repeated, tag = "17")]
        pub pre_context: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(oneof = "rawstacktrace_frames::HasAbsPath", tags = "1")]
        pub has_abs_path: ::core::option::Option<rawstacktrace_frames::HasAbsPath>,
        #[prost(oneof = "rawstacktrace_frames::HasAddrMode", tags = "2")]
        pub has_addr_mode: ::core::option::Option<rawstacktrace_frames::HasAddrMode>,
        #[prost(oneof = "rawstacktrace_frames::HasColno", tags = "3")]
        pub has_colno: ::core::option::Option<rawstacktrace_frames::HasColno>,
        #[prost(oneof = "rawstacktrace_frames::HasContextLine", tags = "4")]
        pub has_context_line: ::core::option::Option<rawstacktrace_frames::HasContextLine>,
        #[prost(oneof = "rawstacktrace_frames::HasFilename", tags = "5")]
        pub has_filename: ::core::option::Option<rawstacktrace_frames::HasFilename>,
        #[prost(oneof = "rawstacktrace_frames::HasFunction", tags = "6")]
        pub has_function: ::core::option::Option<rawstacktrace_frames::HasFunction>,
        #[prost(oneof = "rawstacktrace_frames::HasFunctionId", tags = "7")]
        pub has_function_id: ::core::option::Option<rawstacktrace_frames::HasFunctionId>,
        #[prost(oneof = "rawstacktrace_frames::HasImageAddr", tags = "8")]
        pub has_image_addr: ::core::option::Option<rawstacktrace_frames::HasImageAddr>,
        #[prost(oneof = "rawstacktrace_frames::HasInApp", tags = "9")]
        pub has_in_app: ::core::option::Option<rawstacktrace_frames::HasInApp>,
        #[prost(oneof = "rawstacktrace_frames::HasInstructionAddr", tags = "10")]
        pub has_instruction_addr: ::core::option::Option<rawstacktrace_frames::HasInstructionAddr>,
        #[prost(oneof = "rawstacktrace_frames::HasLineno", tags = "11")]
        pub has_lineno: ::core::option::Option<rawstacktrace_frames::HasLineno>,
        #[prost(oneof = "rawstacktrace_frames::HasLock", tags = "12")]
        pub has_lock: ::core::option::Option<rawstacktrace_frames::HasLock>,
        #[prost(oneof = "rawstacktrace_frames::HasModule", tags = "13")]
        pub has_module: ::core::option::Option<rawstacktrace_frames::HasModule>,
        #[prost(oneof = "rawstacktrace_frames::HasPackage", tags = "14")]
        pub has_package: ::core::option::Option<rawstacktrace_frames::HasPackage>,
        #[prost(oneof = "rawstacktrace_frames::HasPlatform", tags = "15")]
        pub has_platform: ::core::option::Option<rawstacktrace_frames::HasPlatform>,
        #[prost(oneof = "rawstacktrace_frames::HasRawFunction", tags = "18")]
        pub has_raw_function: ::core::option::Option<rawstacktrace_frames::HasRawFunction>,
        #[prost(oneof = "rawstacktrace_frames::HasStackStart", tags = "19")]
        pub has_stack_start: ::core::option::Option<rawstacktrace_frames::HasStackStart>,
        #[prost(oneof = "rawstacktrace_frames::HasSymbol", tags = "20")]
        pub has_symbol: ::core::option::Option<rawstacktrace_frames::HasSymbol>,
        #[prost(oneof = "rawstacktrace_frames::HasSymbolAddr", tags = "21")]
        pub has_symbol_addr: ::core::option::Option<rawstacktrace_frames::HasSymbolAddr>,
        #[prost(oneof = "rawstacktrace_frames::HasVars", tags = "22")]
        pub has_vars: ::core::option::Option<rawstacktrace_frames::HasVars>,
    }
    /// Nested message and enum types in `RawstacktraceFrames`.
    pub mod rawstacktrace_frames {
        ///
        /// A possible lock (java monitor object) held by this frame.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct RawstacktraceFramesLock {
            #[prost(string, tag = "5")]
            pub r#type: ::prost::alloc::string::String,
            #[prost(oneof = "rawstacktrace_frames_lock::HasAddress", tags = "1")]
            pub has_address: ::core::option::Option<rawstacktrace_frames_lock::HasAddress>,
            #[prost(oneof = "rawstacktrace_frames_lock::HasClassName", tags = "2")]
            pub has_class_name: ::core::option::Option<rawstacktrace_frames_lock::HasClassName>,
            #[prost(oneof = "rawstacktrace_frames_lock::HasPackageName", tags = "3")]
            pub has_package_name: ::core::option::Option<rawstacktrace_frames_lock::HasPackageName>,
            #[prost(oneof = "rawstacktrace_frames_lock::HasThreadId", tags = "4")]
            pub has_thread_id: ::core::option::Option<rawstacktrace_frames_lock::HasThreadId>,
        }
        /// Nested message and enum types in `RawstacktraceFramesLock`.
        pub mod rawstacktrace_frames_lock {
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasAddress {
                #[prost(string, tag = "1")]
                Address(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasClassName {
                #[prost(string, tag = "2")]
                ClassName(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasPackageName {
                #[prost(string, tag = "3")]
                PackageName(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasThreadId {
                #[prost(message, tag = "4")]
                ThreadId(::prost_types::Value),
            }
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasAbsPath {
            #[prost(string, tag = "1")]
            AbsPath(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasAddrMode {
            #[prost(string, tag = "2")]
            AddrMode(::prost::alloc::string::String),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasColno {
            #[prost(uint64, tag = "3")]
            Colno(u64),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasContextLine {
            #[prost(string, tag = "4")]
            ContextLine(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasFilename {
            #[prost(string, tag = "5")]
            Filename(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasFunction {
            #[prost(string, tag = "6")]
            Function(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasFunctionId {
            #[prost(string, tag = "7")]
            FunctionId(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasImageAddr {
            #[prost(string, tag = "8")]
            ImageAddr(::prost::alloc::string::String),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasInApp {
            #[prost(bool, tag = "9")]
            InApp(bool),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasInstructionAddr {
            #[prost(string, tag = "10")]
            InstructionAddr(::prost::alloc::string::String),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasLineno {
            #[prost(uint64, tag = "11")]
            Lineno(u64),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasLock {
            #[prost(message, tag = "12")]
            Lock(RawstacktraceFramesLock),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasModule {
            #[prost(string, tag = "13")]
            Module(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasPackage {
            #[prost(string, tag = "14")]
            Package(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasPlatform {
            #[prost(string, tag = "15")]
            Platform(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasRawFunction {
            #[prost(string, tag = "18")]
            RawFunction(::prost::alloc::string::String),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasStackStart {
            #[prost(bool, tag = "19")]
            StackStart(bool),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasSymbol {
            #[prost(string, tag = "20")]
            Symbol(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasSymbolAddr {
            #[prost(string, tag = "21")]
            SymbolAddr(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasVars {
            #[prost(message, tag = "22")]
            Vars(::prost_types::Value),
        }
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasInstructionAddrAdjustment {
        #[prost(string, tag = "2")]
        InstructionAddrAdjustment(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasLang {
        #[prost(string, tag = "3")]
        Lang(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasSnapshot {
        #[prost(bool, tag = "5")]
        Snapshot(bool),
    }
}
///
/// Replay context.
///
/// The replay context contains the replay_id of the session replay if the event
/// occurred during a replay. The replay_id is added onto the dynamic sampling context
/// on the javascript SDK which propagates it through the trace. In relay, we take
/// this value from the DSC and create a context which contains only the replay_id
/// This context is never set on the client for events, only on relay.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Replaycontext {
    #[prost(oneof = "replaycontext::HasReplayId", tags = "1")]
    pub has_replay_id: ::core::option::Option<replaycontext::HasReplayId>,
}
/// Nested message and enum types in `Replaycontext`.
pub mod replaycontext {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasReplayId {
        #[prost(string, tag = "1")]
        ReplayId(::prost::alloc::string::String),
    }
}
///
/// Http request information.
///
/// The Request interface contains information on a HTTP request related to the event. In client
/// SDKs, this can be an outgoing request, or the request that rendered the current web page. On
/// server SDKs, this could be the incoming web request that is being handled.
///
/// The data variable should only contain the request body (not the query string). It can either be
/// a dictionary (for standard HTTP requests) or a raw request body.
///
/// ### Ordered Maps
///
/// In the Request interface, several attributes can either be declared as string, object, or list
/// of tuples. Sentry attempts to parse structured information from the string representation in
/// such cases.
///
/// Sometimes, keys can be declared multiple times, or the order of elements matters. In such
/// cases, use the tuple representation over a plain object.
///
/// Example of request headers as object:
///
/// ```json
/// {
/// "content-type": "application/json",
/// "accept": "application/json, application/xml"
/// }
/// ```
///
/// Example of the same headers as list of tuples:
///
/// ```json
/// [
/// \["content-type", "application/json"\],
/// \["accept", "application/json"\],
/// \["accept", "application/xml"\]
/// ]
/// ```
///
/// Example of a fully populated request object:
///
/// ```json
/// {
/// "request": {
/// "method": "POST",
/// "url": "<http://absolute.uri/foo",>
/// "query_string": "query=foobar&page=2",
/// "data": {
/// "foo": "bar"
/// },
/// "cookies": "PHPSESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;",
/// "headers": {
/// "content-type": "text/html"
/// },
/// "env": {
/// "REMOTE_ADDR": "192.168.0.1"
/// }
/// }
/// }
/// ```
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Request {
    #[prost(message, optional, tag = "4")]
    pub data: ::core::option::Option<::prost_types::Value>,
    #[prost(oneof = "request::HasApiTarget", tags = "1")]
    pub has_api_target: ::core::option::Option<request::HasApiTarget>,
    #[prost(oneof = "request::HasBodySize", tags = "2")]
    pub has_body_size: ::core::option::Option<request::HasBodySize>,
    #[prost(oneof = "request::HasCookies", tags = "3")]
    pub has_cookies: ::core::option::Option<request::HasCookies>,
    #[prost(oneof = "request::HasEnv", tags = "5")]
    pub has_env: ::core::option::Option<request::HasEnv>,
    #[prost(oneof = "request::HasFragment", tags = "6")]
    pub has_fragment: ::core::option::Option<request::HasFragment>,
    #[prost(oneof = "request::HasHeaders", tags = "7")]
    pub has_headers: ::core::option::Option<request::HasHeaders>,
    #[prost(oneof = "request::HasInferredContentType", tags = "8")]
    pub has_inferred_content_type: ::core::option::Option<request::HasInferredContentType>,
    #[prost(oneof = "request::HasMethod", tags = "9")]
    pub has_method: ::core::option::Option<request::HasMethod>,
    #[prost(oneof = "request::HasProtocol", tags = "10")]
    pub has_protocol: ::core::option::Option<request::HasProtocol>,
    #[prost(oneof = "request::HasQueryString", tags = "11")]
    pub has_query_string: ::core::option::Option<request::HasQueryString>,
    #[prost(oneof = "request::HasUrl", tags = "12")]
    pub has_url: ::core::option::Option<request::HasUrl>,
}
/// Nested message and enum types in `Request`.
pub mod request {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasApiTarget {
        #[prost(string, tag = "1")]
        ApiTarget(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasBodySize {
        #[prost(uint64, tag = "2")]
        BodySize(u64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasCookies {
        #[prost(message, tag = "3")]
        Cookies(::prost_types::Value),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasEnv {
        #[prost(message, tag = "5")]
        Env(::prost_types::Value),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasFragment {
        #[prost(string, tag = "6")]
        Fragment(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasHeaders {
        #[prost(message, tag = "7")]
        Headers(::prost_types::Value),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasInferredContentType {
        #[prost(string, tag = "8")]
        InferredContentType(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasMethod {
        #[prost(string, tag = "9")]
        Method(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasProtocol {
        #[prost(string, tag = "10")]
        Protocol(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasQueryString {
        #[prost(message, tag = "11")]
        QueryString(::prost_types::Value),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasUrl {
        #[prost(string, tag = "12")]
        Url(::prost::alloc::string::String),
    }
}
///
/// Response interface that contains information on a HTTP response related to the event.
///
/// The data variable should only contain the response body. It can either be
/// a dictionary (for standard HTTP responses) or a raw response body.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Responsecontext {
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<::prost_types::Value>,
    #[prost(oneof = "responsecontext::HasBodySize", tags = "1")]
    pub has_body_size: ::core::option::Option<responsecontext::HasBodySize>,
    #[prost(oneof = "responsecontext::HasCookies", tags = "2")]
    pub has_cookies: ::core::option::Option<responsecontext::HasCookies>,
    #[prost(oneof = "responsecontext::HasHeaders", tags = "4")]
    pub has_headers: ::core::option::Option<responsecontext::HasHeaders>,
    #[prost(oneof = "responsecontext::HasInferredContentType", tags = "5")]
    pub has_inferred_content_type: ::core::option::Option<responsecontext::HasInferredContentType>,
    #[prost(oneof = "responsecontext::HasStatusCode", tags = "6")]
    pub has_status_code: ::core::option::Option<responsecontext::HasStatusCode>,
}
/// Nested message and enum types in `Responsecontext`.
pub mod responsecontext {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasBodySize {
        #[prost(uint64, tag = "1")]
        BodySize(u64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasCookies {
        #[prost(message, tag = "2")]
        Cookies(::prost_types::Value),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasHeaders {
        #[prost(message, tag = "4")]
        Headers(::prost_types::Value),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasInferredContentType {
        #[prost(string, tag = "5")]
        InferredContentType(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasStatusCode {
        #[prost(uint64, tag = "6")]
        StatusCode(u64),
    }
}
///
/// The route in the application, set by React Native SDK.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Route {
    #[prost(oneof = "route::HasName", tags = "1")]
    pub has_name: ::core::option::Option<route::HasName>,
    #[prost(oneof = "route::HasParams", tags = "2")]
    pub has_params: ::core::option::Option<route::HasParams>,
}
/// Nested message and enum types in `Route`.
pub mod route {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasName {
        #[prost(string, tag = "1")]
        Name(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasParams {
        #[prost(message, tag = "2")]
        Params(::prost_types::Value),
    }
}
///
/// Runtime information.
///
/// Runtime context describes a runtime in more detail. Typically, this context is present in
/// `contexts` multiple times if multiple runtimes are involved (for instance, if you have a
/// JavaScript application running on top of JVM).
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Runtimecontext {
    #[prost(oneof = "runtimecontext::HasBuild", tags = "1")]
    pub has_build: ::core::option::Option<runtimecontext::HasBuild>,
    #[prost(oneof = "runtimecontext::HasName", tags = "2")]
    pub has_name: ::core::option::Option<runtimecontext::HasName>,
    #[prost(oneof = "runtimecontext::HasRawDescription", tags = "3")]
    pub has_raw_description: ::core::option::Option<runtimecontext::HasRawDescription>,
    #[prost(oneof = "runtimecontext::HasVersion", tags = "4")]
    pub has_version: ::core::option::Option<runtimecontext::HasVersion>,
}
/// Nested message and enum types in `Runtimecontext`.
pub mod runtimecontext {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasBuild {
        #[prost(string, tag = "1")]
        Build(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasName {
        #[prost(string, tag = "2")]
        Name(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasRawDescription {
        #[prost(string, tag = "3")]
        RawDescription(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasVersion {
        #[prost(string, tag = "4")]
        Version(::prost::alloc::string::String),
    }
}
///
/// A debug image pointing to a source map.
///
/// Examples:
///
/// ```json
/// {
/// "type": "sourcemap",
/// "code_file": "<https://example.com/static/js/main.min.js",>
/// "debug_id": "395835f4-03e0-4436-80d3-136f0749a893"
/// }
/// ```
///
/// *Note:** Stack frames and the correlating entries in the debug image here
/// for `code_file`/`abs_path` are not PII stripped as they need to line up
/// perfectly for source map processing.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sourcemapdebugimage {
    #[prost(string, tag = "1")]
    pub code_file: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub debug_id: ::prost::alloc::string::String,
    #[prost(oneof = "sourcemapdebugimage::HasDebugFile", tags = "2")]
    pub has_debug_file: ::core::option::Option<sourcemapdebugimage::HasDebugFile>,
}
/// Nested message and enum types in `Sourcemapdebugimage`.
pub mod sourcemapdebugimage {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasDebugFile {
        #[prost(string, tag = "2")]
        DebugFile(::prost::alloc::string::String),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Stacktrace {
    #[prost(message, repeated, tag = "1")]
    pub frames: ::prost::alloc::vec::Vec<stacktrace::StacktraceFrames>,
    #[prost(map = "string, string", tag = "4")]
    pub registers:
        ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    #[prost(oneof = "stacktrace::HasInstructionAddrAdjustment", tags = "2")]
    pub has_instruction_addr_adjustment:
        ::core::option::Option<stacktrace::HasInstructionAddrAdjustment>,
    #[prost(oneof = "stacktrace::HasLang", tags = "3")]
    pub has_lang: ::core::option::Option<stacktrace::HasLang>,
    #[prost(oneof = "stacktrace::HasSnapshot", tags = "5")]
    pub has_snapshot: ::core::option::Option<stacktrace::HasSnapshot>,
}
/// Nested message and enum types in `Stacktrace`.
pub mod stacktrace {
    ///
    /// Required. A non-empty list of stack frames. The list is ordered from caller to callee, or
    /// oldest to youngest. The last frame is the one creating the exception.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct StacktraceFrames {
        #[prost(string, repeated, tag = "16")]
        pub post_context: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(string, repeated, tag = "17")]
        pub pre_context: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(oneof = "stacktrace_frames::HasAbsPath", tags = "1")]
        pub has_abs_path: ::core::option::Option<stacktrace_frames::HasAbsPath>,
        #[prost(oneof = "stacktrace_frames::HasAddrMode", tags = "2")]
        pub has_addr_mode: ::core::option::Option<stacktrace_frames::HasAddrMode>,
        #[prost(oneof = "stacktrace_frames::HasColno", tags = "3")]
        pub has_colno: ::core::option::Option<stacktrace_frames::HasColno>,
        #[prost(oneof = "stacktrace_frames::HasContextLine", tags = "4")]
        pub has_context_line: ::core::option::Option<stacktrace_frames::HasContextLine>,
        #[prost(oneof = "stacktrace_frames::HasFilename", tags = "5")]
        pub has_filename: ::core::option::Option<stacktrace_frames::HasFilename>,
        #[prost(oneof = "stacktrace_frames::HasFunction", tags = "6")]
        pub has_function: ::core::option::Option<stacktrace_frames::HasFunction>,
        #[prost(oneof = "stacktrace_frames::HasFunctionId", tags = "7")]
        pub has_function_id: ::core::option::Option<stacktrace_frames::HasFunctionId>,
        #[prost(oneof = "stacktrace_frames::HasImageAddr", tags = "8")]
        pub has_image_addr: ::core::option::Option<stacktrace_frames::HasImageAddr>,
        #[prost(oneof = "stacktrace_frames::HasInApp", tags = "9")]
        pub has_in_app: ::core::option::Option<stacktrace_frames::HasInApp>,
        #[prost(oneof = "stacktrace_frames::HasInstructionAddr", tags = "10")]
        pub has_instruction_addr: ::core::option::Option<stacktrace_frames::HasInstructionAddr>,
        #[prost(oneof = "stacktrace_frames::HasLineno", tags = "11")]
        pub has_lineno: ::core::option::Option<stacktrace_frames::HasLineno>,
        #[prost(oneof = "stacktrace_frames::HasLock", tags = "12")]
        pub has_lock: ::core::option::Option<stacktrace_frames::HasLock>,
        #[prost(oneof = "stacktrace_frames::HasModule", tags = "13")]
        pub has_module: ::core::option::Option<stacktrace_frames::HasModule>,
        #[prost(oneof = "stacktrace_frames::HasPackage", tags = "14")]
        pub has_package: ::core::option::Option<stacktrace_frames::HasPackage>,
        #[prost(oneof = "stacktrace_frames::HasPlatform", tags = "15")]
        pub has_platform: ::core::option::Option<stacktrace_frames::HasPlatform>,
        #[prost(oneof = "stacktrace_frames::HasRawFunction", tags = "18")]
        pub has_raw_function: ::core::option::Option<stacktrace_frames::HasRawFunction>,
        #[prost(oneof = "stacktrace_frames::HasStackStart", tags = "19")]
        pub has_stack_start: ::core::option::Option<stacktrace_frames::HasStackStart>,
        #[prost(oneof = "stacktrace_frames::HasSymbol", tags = "20")]
        pub has_symbol: ::core::option::Option<stacktrace_frames::HasSymbol>,
        #[prost(oneof = "stacktrace_frames::HasSymbolAddr", tags = "21")]
        pub has_symbol_addr: ::core::option::Option<stacktrace_frames::HasSymbolAddr>,
        #[prost(oneof = "stacktrace_frames::HasVars", tags = "22")]
        pub has_vars: ::core::option::Option<stacktrace_frames::HasVars>,
    }
    /// Nested message and enum types in `StacktraceFrames`.
    pub mod stacktrace_frames {
        ///
        /// A possible lock (java monitor object) held by this frame.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct StacktraceFramesLock {
            #[prost(string, tag = "5")]
            pub r#type: ::prost::alloc::string::String,
            #[prost(oneof = "stacktrace_frames_lock::HasAddress", tags = "1")]
            pub has_address: ::core::option::Option<stacktrace_frames_lock::HasAddress>,
            #[prost(oneof = "stacktrace_frames_lock::HasClassName", tags = "2")]
            pub has_class_name: ::core::option::Option<stacktrace_frames_lock::HasClassName>,
            #[prost(oneof = "stacktrace_frames_lock::HasPackageName", tags = "3")]
            pub has_package_name: ::core::option::Option<stacktrace_frames_lock::HasPackageName>,
            #[prost(oneof = "stacktrace_frames_lock::HasThreadId", tags = "4")]
            pub has_thread_id: ::core::option::Option<stacktrace_frames_lock::HasThreadId>,
        }
        /// Nested message and enum types in `StacktraceFramesLock`.
        pub mod stacktrace_frames_lock {
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasAddress {
                #[prost(string, tag = "1")]
                Address(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasClassName {
                #[prost(string, tag = "2")]
                ClassName(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasPackageName {
                #[prost(string, tag = "3")]
                PackageName(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasThreadId {
                #[prost(message, tag = "4")]
                ThreadId(::prost_types::Value),
            }
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasAbsPath {
            #[prost(string, tag = "1")]
            AbsPath(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasAddrMode {
            #[prost(string, tag = "2")]
            AddrMode(::prost::alloc::string::String),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasColno {
            #[prost(uint64, tag = "3")]
            Colno(u64),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasContextLine {
            #[prost(string, tag = "4")]
            ContextLine(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasFilename {
            #[prost(string, tag = "5")]
            Filename(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasFunction {
            #[prost(string, tag = "6")]
            Function(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasFunctionId {
            #[prost(string, tag = "7")]
            FunctionId(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasImageAddr {
            #[prost(string, tag = "8")]
            ImageAddr(::prost::alloc::string::String),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasInApp {
            #[prost(bool, tag = "9")]
            InApp(bool),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasInstructionAddr {
            #[prost(string, tag = "10")]
            InstructionAddr(::prost::alloc::string::String),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasLineno {
            #[prost(uint64, tag = "11")]
            Lineno(u64),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasLock {
            #[prost(message, tag = "12")]
            Lock(StacktraceFramesLock),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasModule {
            #[prost(string, tag = "13")]
            Module(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasPackage {
            #[prost(string, tag = "14")]
            Package(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasPlatform {
            #[prost(string, tag = "15")]
            Platform(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasRawFunction {
            #[prost(string, tag = "18")]
            RawFunction(::prost::alloc::string::String),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasStackStart {
            #[prost(bool, tag = "19")]
            StackStart(bool),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasSymbol {
            #[prost(string, tag = "20")]
            Symbol(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasSymbolAddr {
            #[prost(string, tag = "21")]
            SymbolAddr(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasVars {
            #[prost(message, tag = "22")]
            Vars(::prost_types::Value),
        }
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasInstructionAddrAdjustment {
        #[prost(string, tag = "2")]
        InstructionAddrAdjustment(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasLang {
        #[prost(string, tag = "3")]
        Lang(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasSnapshot {
        #[prost(bool, tag = "5")]
        Snapshot(bool),
    }
}
///
/// Holds information about the system SDK.
///
/// This is relevant for iOS and other platforms that have a system
/// SDK.  Not to be confused with the client SDK.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Systemsdkinfo {
    #[prost(oneof = "systemsdkinfo::HasSdkName", tags = "1")]
    pub has_sdk_name: ::core::option::Option<systemsdkinfo::HasSdkName>,
    #[prost(oneof = "systemsdkinfo::HasVersionMajor", tags = "2")]
    pub has_version_major: ::core::option::Option<systemsdkinfo::HasVersionMajor>,
    #[prost(oneof = "systemsdkinfo::HasVersionMinor", tags = "3")]
    pub has_version_minor: ::core::option::Option<systemsdkinfo::HasVersionMinor>,
    #[prost(oneof = "systemsdkinfo::HasVersionPatchlevel", tags = "4")]
    pub has_version_patchlevel: ::core::option::Option<systemsdkinfo::HasVersionPatchlevel>,
}
/// Nested message and enum types in `Systemsdkinfo`.
pub mod systemsdkinfo {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasSdkName {
        #[prost(string, tag = "1")]
        SdkName(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasVersionMajor {
        #[prost(uint64, tag = "2")]
        VersionMajor(u64),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasVersionMinor {
        #[prost(uint64, tag = "3")]
        VersionMinor(u64),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasVersionPatchlevel {
        #[prost(uint64, tag = "4")]
        VersionPatchlevel(u64),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Tagentry {
    #[prost(oneof = "tagentry::HasA0", tags = "1")]
    pub has_a0: ::core::option::Option<tagentry::HasA0>,
    #[prost(oneof = "tagentry::HasA1", tags = "2")]
    pub has_a1: ::core::option::Option<tagentry::HasA1>,
}
/// Nested message and enum types in `Tagentry`.
pub mod tagentry {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasA0 {
        #[prost(string, tag = "1")]
        A0(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasA1 {
        #[prost(string, tag = "2")]
        A1(::prost::alloc::string::String),
    }
}
///
/// A process thread of an event.
///
/// The Threads Interface specifies threads that were running at the time an event happened. These threads can also contain stack traces.
///
/// An event may contain one or more threads in an attribute named `threads`.
///
/// The following example illustrates the threads part of the event payload and omits other attributes for simplicity.
///
/// ```json
/// {
/// "threads": {
/// "values": [
/// {
/// "id": "0",
/// "name": "main",
/// "crashed": true,
/// "stacktrace": {}
/// }
/// ]
/// }
/// }
/// ```
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Thread {
    #[prost(map = "string, message", tag = "3")]
    pub held_locks:
        ::std::collections::HashMap<::prost::alloc::string::String, thread::ThreadHeldLocks>,
    #[prost(oneof = "thread::HasCrashed", tags = "1")]
    pub has_crashed: ::core::option::Option<thread::HasCrashed>,
    #[prost(oneof = "thread::HasCurrent", tags = "2")]
    pub has_current: ::core::option::Option<thread::HasCurrent>,
    #[prost(oneof = "thread::HasId", tags = "4")]
    pub has_id: ::core::option::Option<thread::HasId>,
    #[prost(oneof = "thread::HasMain", tags = "5")]
    pub has_main: ::core::option::Option<thread::HasMain>,
    #[prost(oneof = "thread::HasName", tags = "6")]
    pub has_name: ::core::option::Option<thread::HasName>,
    #[prost(oneof = "thread::HasStacktrace", tags = "7")]
    pub has_stacktrace: ::core::option::Option<thread::HasStacktrace>,
    #[prost(oneof = "thread::HasState", tags = "8")]
    pub has_state: ::core::option::Option<thread::HasState>,
}
/// Nested message and enum types in `Thread`.
pub mod thread {
    ///
    /// Represents a collection of locks (java monitor objects) held by a thread.
    ///
    /// A map of lock object addresses and their respective lock reason/details.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ThreadHeldLocks {
        #[prost(string, tag = "5")]
        pub r#type: ::prost::alloc::string::String,
        #[prost(oneof = "thread_held_locks::HasAddress", tags = "1")]
        pub has_address: ::core::option::Option<thread_held_locks::HasAddress>,
        #[prost(oneof = "thread_held_locks::HasClassName", tags = "2")]
        pub has_class_name: ::core::option::Option<thread_held_locks::HasClassName>,
        #[prost(oneof = "thread_held_locks::HasPackageName", tags = "3")]
        pub has_package_name: ::core::option::Option<thread_held_locks::HasPackageName>,
        #[prost(oneof = "thread_held_locks::HasThreadId", tags = "4")]
        pub has_thread_id: ::core::option::Option<thread_held_locks::HasThreadId>,
    }
    /// Nested message and enum types in `ThreadHeldLocks`.
    pub mod thread_held_locks {
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasAddress {
            #[prost(string, tag = "1")]
            Address(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasClassName {
            #[prost(string, tag = "2")]
            ClassName(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasPackageName {
            #[prost(string, tag = "3")]
            PackageName(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasThreadId {
            #[prost(message, tag = "4")]
            ThreadId(::prost_types::Value),
        }
    }
    ///
    /// Stack trace containing frames of this exception.
    ///
    /// The thread that crashed with an exception should not have a stack trace, but instead, the `thread_id` attribute should be set on the exception and Sentry will connect the two.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ThreadStacktrace {
        #[prost(message, repeated, tag = "1")]
        pub frames: ::prost::alloc::vec::Vec<thread_stacktrace::ThreadStacktraceFrames>,
        #[prost(map = "string, string", tag = "4")]
        pub registers: ::std::collections::HashMap<
            ::prost::alloc::string::String,
            ::prost::alloc::string::String,
        >,
        #[prost(oneof = "thread_stacktrace::HasInstructionAddrAdjustment", tags = "2")]
        pub has_instruction_addr_adjustment:
            ::core::option::Option<thread_stacktrace::HasInstructionAddrAdjustment>,
        #[prost(oneof = "thread_stacktrace::HasLang", tags = "3")]
        pub has_lang: ::core::option::Option<thread_stacktrace::HasLang>,
        #[prost(oneof = "thread_stacktrace::HasSnapshot", tags = "5")]
        pub has_snapshot: ::core::option::Option<thread_stacktrace::HasSnapshot>,
    }
    /// Nested message and enum types in `ThreadStacktrace`.
    pub mod thread_stacktrace {
        ///
        /// Required. A non-empty list of stack frames. The list is ordered from caller to callee, or
        /// oldest to youngest. The last frame is the one creating the exception.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ThreadStacktraceFrames {
            #[prost(string, repeated, tag = "16")]
            pub post_context: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
            #[prost(string, repeated, tag = "17")]
            pub pre_context: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
            #[prost(oneof = "thread_stacktrace_frames::HasAbsPath", tags = "1")]
            pub has_abs_path: ::core::option::Option<thread_stacktrace_frames::HasAbsPath>,
            #[prost(oneof = "thread_stacktrace_frames::HasAddrMode", tags = "2")]
            pub has_addr_mode: ::core::option::Option<thread_stacktrace_frames::HasAddrMode>,
            #[prost(oneof = "thread_stacktrace_frames::HasColno", tags = "3")]
            pub has_colno: ::core::option::Option<thread_stacktrace_frames::HasColno>,
            #[prost(oneof = "thread_stacktrace_frames::HasContextLine", tags = "4")]
            pub has_context_line: ::core::option::Option<thread_stacktrace_frames::HasContextLine>,
            #[prost(oneof = "thread_stacktrace_frames::HasFilename", tags = "5")]
            pub has_filename: ::core::option::Option<thread_stacktrace_frames::HasFilename>,
            #[prost(oneof = "thread_stacktrace_frames::HasFunction", tags = "6")]
            pub has_function: ::core::option::Option<thread_stacktrace_frames::HasFunction>,
            #[prost(oneof = "thread_stacktrace_frames::HasFunctionId", tags = "7")]
            pub has_function_id: ::core::option::Option<thread_stacktrace_frames::HasFunctionId>,
            #[prost(oneof = "thread_stacktrace_frames::HasImageAddr", tags = "8")]
            pub has_image_addr: ::core::option::Option<thread_stacktrace_frames::HasImageAddr>,
            #[prost(oneof = "thread_stacktrace_frames::HasInApp", tags = "9")]
            pub has_in_app: ::core::option::Option<thread_stacktrace_frames::HasInApp>,
            #[prost(oneof = "thread_stacktrace_frames::HasInstructionAddr", tags = "10")]
            pub has_instruction_addr:
                ::core::option::Option<thread_stacktrace_frames::HasInstructionAddr>,
            #[prost(oneof = "thread_stacktrace_frames::HasLineno", tags = "11")]
            pub has_lineno: ::core::option::Option<thread_stacktrace_frames::HasLineno>,
            #[prost(oneof = "thread_stacktrace_frames::HasLock", tags = "12")]
            pub has_lock: ::core::option::Option<thread_stacktrace_frames::HasLock>,
            #[prost(oneof = "thread_stacktrace_frames::HasModule", tags = "13")]
            pub has_module: ::core::option::Option<thread_stacktrace_frames::HasModule>,
            #[prost(oneof = "thread_stacktrace_frames::HasPackage", tags = "14")]
            pub has_package: ::core::option::Option<thread_stacktrace_frames::HasPackage>,
            #[prost(oneof = "thread_stacktrace_frames::HasPlatform", tags = "15")]
            pub has_platform: ::core::option::Option<thread_stacktrace_frames::HasPlatform>,
            #[prost(oneof = "thread_stacktrace_frames::HasRawFunction", tags = "18")]
            pub has_raw_function: ::core::option::Option<thread_stacktrace_frames::HasRawFunction>,
            #[prost(oneof = "thread_stacktrace_frames::HasStackStart", tags = "19")]
            pub has_stack_start: ::core::option::Option<thread_stacktrace_frames::HasStackStart>,
            #[prost(oneof = "thread_stacktrace_frames::HasSymbol", tags = "20")]
            pub has_symbol: ::core::option::Option<thread_stacktrace_frames::HasSymbol>,
            #[prost(oneof = "thread_stacktrace_frames::HasSymbolAddr", tags = "21")]
            pub has_symbol_addr: ::core::option::Option<thread_stacktrace_frames::HasSymbolAddr>,
            #[prost(oneof = "thread_stacktrace_frames::HasVars", tags = "22")]
            pub has_vars: ::core::option::Option<thread_stacktrace_frames::HasVars>,
        }
        /// Nested message and enum types in `ThreadStacktraceFrames`.
        pub mod thread_stacktrace_frames {
            ///
            /// A possible lock (java monitor object) held by this frame.
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct ThreadStacktraceFramesLock {
                #[prost(string, tag = "5")]
                pub r#type: ::prost::alloc::string::String,
                #[prost(oneof = "thread_stacktrace_frames_lock::HasAddress", tags = "1")]
                pub has_address: ::core::option::Option<thread_stacktrace_frames_lock::HasAddress>,
                #[prost(oneof = "thread_stacktrace_frames_lock::HasClassName", tags = "2")]
                pub has_class_name:
                    ::core::option::Option<thread_stacktrace_frames_lock::HasClassName>,
                #[prost(oneof = "thread_stacktrace_frames_lock::HasPackageName", tags = "3")]
                pub has_package_name:
                    ::core::option::Option<thread_stacktrace_frames_lock::HasPackageName>,
                #[prost(oneof = "thread_stacktrace_frames_lock::HasThreadId", tags = "4")]
                pub has_thread_id:
                    ::core::option::Option<thread_stacktrace_frames_lock::HasThreadId>,
            }
            /// Nested message and enum types in `ThreadStacktraceFramesLock`.
            pub mod thread_stacktrace_frames_lock {
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasAddress {
                    #[prost(string, tag = "1")]
                    Address(::prost::alloc::string::String),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasClassName {
                    #[prost(string, tag = "2")]
                    ClassName(::prost::alloc::string::String),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasPackageName {
                    #[prost(string, tag = "3")]
                    PackageName(::prost::alloc::string::String),
                }
                #[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum HasThreadId {
                    #[prost(message, tag = "4")]
                    ThreadId(::prost_types::Value),
                }
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasAbsPath {
                #[prost(string, tag = "1")]
                AbsPath(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasAddrMode {
                #[prost(string, tag = "2")]
                AddrMode(::prost::alloc::string::String),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasColno {
                #[prost(uint64, tag = "3")]
                Colno(u64),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasContextLine {
                #[prost(string, tag = "4")]
                ContextLine(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasFilename {
                #[prost(string, tag = "5")]
                Filename(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasFunction {
                #[prost(string, tag = "6")]
                Function(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasFunctionId {
                #[prost(string, tag = "7")]
                FunctionId(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasImageAddr {
                #[prost(string, tag = "8")]
                ImageAddr(::prost::alloc::string::String),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasInApp {
                #[prost(bool, tag = "9")]
                InApp(bool),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasInstructionAddr {
                #[prost(string, tag = "10")]
                InstructionAddr(::prost::alloc::string::String),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasLineno {
                #[prost(uint64, tag = "11")]
                Lineno(u64),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasLock {
                #[prost(message, tag = "12")]
                Lock(ThreadStacktraceFramesLock),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasModule {
                #[prost(string, tag = "13")]
                Module(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasPackage {
                #[prost(string, tag = "14")]
                Package(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasPlatform {
                #[prost(string, tag = "15")]
                Platform(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasRawFunction {
                #[prost(string, tag = "18")]
                RawFunction(::prost::alloc::string::String),
            }
            #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
            pub enum HasStackStart {
                #[prost(bool, tag = "19")]
                StackStart(bool),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasSymbol {
                #[prost(string, tag = "20")]
                Symbol(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasSymbolAddr {
                #[prost(string, tag = "21")]
                SymbolAddr(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasVars {
                #[prost(message, tag = "22")]
                Vars(::prost_types::Value),
            }
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasInstructionAddrAdjustment {
            #[prost(string, tag = "2")]
            InstructionAddrAdjustment(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasLang {
            #[prost(string, tag = "3")]
            Lang(::prost::alloc::string::String),
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasSnapshot {
            #[prost(bool, tag = "5")]
            Snapshot(bool),
        }
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasCrashed {
        #[prost(bool, tag = "1")]
        Crashed(bool),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasCurrent {
        #[prost(bool, tag = "2")]
        Current(bool),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasId {
        #[prost(message, tag = "4")]
        Id(::prost_types::Value),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasMain {
        #[prost(bool, tag = "5")]
        Main(bool),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasName {
        #[prost(string, tag = "6")]
        Name(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasStacktrace {
        #[prost(message, tag = "7")]
        Stacktrace(ThreadStacktrace),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasState {
        #[prost(string, tag = "8")]
        State(::prost::alloc::string::String),
    }
}
///
/// Trace context
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Tracecontext {
    #[prost(string, tag = "8")]
    pub span_id: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub trace_id: ::prost::alloc::string::String,
    #[prost(oneof = "tracecontext::HasClientSampleRate", tags = "1")]
    pub has_client_sample_rate: ::core::option::Option<tracecontext::HasClientSampleRate>,
    #[prost(oneof = "tracecontext::HasData", tags = "2")]
    pub has_data: ::core::option::Option<tracecontext::HasData>,
    #[prost(oneof = "tracecontext::HasExclusiveTime", tags = "3")]
    pub has_exclusive_time: ::core::option::Option<tracecontext::HasExclusiveTime>,
    #[prost(oneof = "tracecontext::HasOp", tags = "4")]
    pub has_op: ::core::option::Option<tracecontext::HasOp>,
    #[prost(oneof = "tracecontext::HasOrigin", tags = "5")]
    pub has_origin: ::core::option::Option<tracecontext::HasOrigin>,
    #[prost(oneof = "tracecontext::HasParentSpanId", tags = "6")]
    pub has_parent_span_id: ::core::option::Option<tracecontext::HasParentSpanId>,
    #[prost(oneof = "tracecontext::HasSampled", tags = "7")]
    pub has_sampled: ::core::option::Option<tracecontext::HasSampled>,
    #[prost(oneof = "tracecontext::HasStatus", tags = "9")]
    pub has_status: ::core::option::Option<tracecontext::HasStatus>,
}
/// Nested message and enum types in `Tracecontext`.
pub mod tracecontext {
    ///
    /// Arbitrary additional data on a trace.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TracecontextData {
        #[prost(oneof = "tracecontext_data::HasPreviousRoute", tags = "1")]
        pub has_previous_route: ::core::option::Option<tracecontext_data::HasPreviousRoute>,
        #[prost(oneof = "tracecontext_data::HasRoute", tags = "2")]
        pub has_route: ::core::option::Option<tracecontext_data::HasRoute>,
    }
    /// Nested message and enum types in `TracecontextData`.
    pub mod tracecontext_data {
        ///
        /// The previous route in the application
        ///
        /// Set by React Native SDK.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct TracecontextDataPreviousroute {
            #[prost(oneof = "tracecontext_data_previousroute::HasName", tags = "1")]
            pub has_name: ::core::option::Option<tracecontext_data_previousroute::HasName>,
            #[prost(oneof = "tracecontext_data_previousroute::HasParams", tags = "2")]
            pub has_params: ::core::option::Option<tracecontext_data_previousroute::HasParams>,
        }
        /// Nested message and enum types in `TracecontextDataPreviousroute`.
        pub mod tracecontext_data_previousroute {
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasName {
                #[prost(string, tag = "1")]
                Name(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasParams {
                #[prost(message, tag = "2")]
                Params(::prost_types::Value),
            }
        }
        ///
        /// The current route in the application.
        ///
        /// Set by React Native SDK.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct TracecontextDataRoute {
            #[prost(oneof = "tracecontext_data_route::HasName", tags = "1")]
            pub has_name: ::core::option::Option<tracecontext_data_route::HasName>,
            #[prost(oneof = "tracecontext_data_route::HasParams", tags = "2")]
            pub has_params: ::core::option::Option<tracecontext_data_route::HasParams>,
        }
        /// Nested message and enum types in `TracecontextDataRoute`.
        pub mod tracecontext_data_route {
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasName {
                #[prost(string, tag = "1")]
                Name(::prost::alloc::string::String),
            }
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum HasParams {
                #[prost(message, tag = "2")]
                Params(::prost_types::Value),
            }
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasPreviousRoute {
            #[prost(message, tag = "1")]
            PreviousRoute(TracecontextDataPreviousroute),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasRoute {
            #[prost(message, tag = "2")]
            Route(TracecontextDataRoute),
        }
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasClientSampleRate {
        #[prost(double, tag = "1")]
        ClientSampleRate(f64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasData {
        #[prost(message, tag = "2")]
        Data(TracecontextData),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasExclusiveTime {
        #[prost(double, tag = "3")]
        ExclusiveTime(f64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasOp {
        #[prost(string, tag = "4")]
        Op(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasOrigin {
        #[prost(string, tag = "5")]
        Origin(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasParentSpanId {
        #[prost(string, tag = "6")]
        ParentSpanId(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasSampled {
        #[prost(bool, tag = "7")]
        Sampled(bool),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasStatus {
        #[prost(string, tag = "9")]
        Status(::prost::alloc::string::String),
    }
}
///
/// Additional information about the name of the transaction.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transactioninfo {
    #[prost(message, repeated, tag = "1")]
    pub changes: ::prost::alloc::vec::Vec<transactioninfo::TransactioninfoChanges>,
    #[prost(oneof = "transactioninfo::HasOriginal", tags = "2")]
    pub has_original: ::core::option::Option<transactioninfo::HasOriginal>,
    #[prost(oneof = "transactioninfo::HasPropagations", tags = "3")]
    pub has_propagations: ::core::option::Option<transactioninfo::HasPropagations>,
    #[prost(oneof = "transactioninfo::HasSource", tags = "4")]
    pub has_source: ::core::option::Option<transactioninfo::HasSource>,
}
/// Nested message and enum types in `Transactioninfo`.
pub mod transactioninfo {
    ///
    /// A list of changes prior to the final transaction name.
    ///
    /// This list must be empty if the transaction name is set at the beginning of the transaction
    /// and never changed. There is no placeholder entry for the initial transaction name.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TransactioninfoChanges {
        #[prost(oneof = "transactioninfo_changes::HasPropagations", tags = "1")]
        pub has_propagations: ::core::option::Option<transactioninfo_changes::HasPropagations>,
        #[prost(oneof = "transactioninfo_changes::HasSource", tags = "2")]
        pub has_source: ::core::option::Option<transactioninfo_changes::HasSource>,
        #[prost(oneof = "transactioninfo_changes::HasTimestamp", tags = "3")]
        pub has_timestamp: ::core::option::Option<transactioninfo_changes::HasTimestamp>,
    }
    /// Nested message and enum types in `TransactioninfoChanges`.
    pub mod transactioninfo_changes {
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum HasPropagations {
            #[prost(uint64, tag = "1")]
            Propagations(u64),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasSource {
            #[prost(string, tag = "2")]
            Source(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasTimestamp {
            #[prost(message, tag = "3")]
            Timestamp(::prost_types::Value),
        }
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasOriginal {
        #[prost(string, tag = "2")]
        Original(::prost::alloc::string::String),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasPropagations {
        #[prost(uint64, tag = "3")]
        Propagations(u64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasSource {
        #[prost(string, tag = "4")]
        Source(::prost::alloc::string::String),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transactionnamechange {
    #[prost(oneof = "transactionnamechange::HasPropagations", tags = "1")]
    pub has_propagations: ::core::option::Option<transactionnamechange::HasPropagations>,
    #[prost(oneof = "transactionnamechange::HasSource", tags = "2")]
    pub has_source: ::core::option::Option<transactionnamechange::HasSource>,
    #[prost(oneof = "transactionnamechange::HasTimestamp", tags = "3")]
    pub has_timestamp: ::core::option::Option<transactionnamechange::HasTimestamp>,
}
/// Nested message and enum types in `Transactionnamechange`.
pub mod transactionnamechange {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum HasPropagations {
        #[prost(uint64, tag = "1")]
        Propagations(u64),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasSource {
        #[prost(string, tag = "2")]
        Source(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasTimestamp {
        #[prost(message, tag = "3")]
        Timestamp(::prost_types::Value),
    }
}
///
/// Information about the user who triggered an event.
///
/// ```json
/// {
/// "user": {
/// "id": "unique_id",
/// "username": "my_user",
/// "email": "foo@example.com",
/// "ip_address": "127.0.0.1",
/// "subscription": "basic"
/// }
/// }
/// ```
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct User {
    #[prost(oneof = "user::HasData", tags = "1")]
    pub has_data: ::core::option::Option<user::HasData>,
    #[prost(oneof = "user::HasEmail", tags = "2")]
    pub has_email: ::core::option::Option<user::HasEmail>,
    #[prost(oneof = "user::HasGeo", tags = "3")]
    pub has_geo: ::core::option::Option<user::HasGeo>,
    #[prost(oneof = "user::HasId", tags = "4")]
    pub has_id: ::core::option::Option<user::HasId>,
    #[prost(oneof = "user::HasIpAddress", tags = "5")]
    pub has_ip_address: ::core::option::Option<user::HasIpAddress>,
    #[prost(oneof = "user::HasName", tags = "6")]
    pub has_name: ::core::option::Option<user::HasName>,
    #[prost(oneof = "user::HasSegment", tags = "7")]
    pub has_segment: ::core::option::Option<user::HasSegment>,
    #[prost(oneof = "user::HasSentryUser", tags = "8")]
    pub has_sentry_user: ::core::option::Option<user::HasSentryUser>,
    #[prost(oneof = "user::HasUsername", tags = "9")]
    pub has_username: ::core::option::Option<user::HasUsername>,
}
/// Nested message and enum types in `User`.
pub mod user {
    ///
    /// Approximate geographical location of the end user or device.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct UserGeo {
        #[prost(oneof = "user_geo::HasCity", tags = "1")]
        pub has_city: ::core::option::Option<user_geo::HasCity>,
        #[prost(oneof = "user_geo::HasCountryCode", tags = "2")]
        pub has_country_code: ::core::option::Option<user_geo::HasCountryCode>,
        #[prost(oneof = "user_geo::HasRegion", tags = "3")]
        pub has_region: ::core::option::Option<user_geo::HasRegion>,
        #[prost(oneof = "user_geo::HasSubdivision", tags = "4")]
        pub has_subdivision: ::core::option::Option<user_geo::HasSubdivision>,
    }
    /// Nested message and enum types in `UserGeo`.
    pub mod user_geo {
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasCity {
            #[prost(string, tag = "1")]
            City(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasCountryCode {
            #[prost(string, tag = "2")]
            CountryCode(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasRegion {
            #[prost(string, tag = "3")]
            Region(::prost::alloc::string::String),
        }
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum HasSubdivision {
            #[prost(string, tag = "4")]
            Subdivision(::prost::alloc::string::String),
        }
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasData {
        #[prost(message, tag = "1")]
        Data(::prost_types::Value),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasEmail {
        #[prost(string, tag = "2")]
        Email(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasGeo {
        #[prost(message, tag = "3")]
        Geo(UserGeo),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasId {
        #[prost(string, tag = "4")]
        Id(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasIpAddress {
        #[prost(string, tag = "5")]
        IpAddress(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasName {
        #[prost(string, tag = "6")]
        Name(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasSegment {
        #[prost(string, tag = "7")]
        Segment(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasSentryUser {
        #[prost(string, tag = "8")]
        SentryUser(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasUsername {
        #[prost(string, tag = "9")]
        Username(::prost::alloc::string::String),
    }
}
///
/// Feedback context.
///
/// This contexts contains user feedback specific attributes.
/// We don't PII scrub contact_email as that is provided by the user.
/// TODO(jferg): rename to FeedbackContext once old UserReport logic is deprecated.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Userreportv2Context {
    #[prost(oneof = "userreportv2_context::HasContactEmail", tags = "1")]
    pub has_contact_email: ::core::option::Option<userreportv2_context::HasContactEmail>,
    #[prost(oneof = "userreportv2_context::HasMessage", tags = "2")]
    pub has_message: ::core::option::Option<userreportv2_context::HasMessage>,
}
/// Nested message and enum types in `Userreportv2Context`.
pub mod userreportv2_context {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasContactEmail {
        #[prost(string, tag = "1")]
        ContactEmail(::prost::alloc::string::String),
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HasMessage {
        #[prost(string, tag = "2")]
        Message(::prost::alloc::string::String),
    }
}
