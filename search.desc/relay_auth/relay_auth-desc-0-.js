searchState.loadedDescShard("relay_auth", 0, "Authentication and crypto for Relay.\nInvalid key encoding.\nInvalid key encoding.\nInvalid key data.\nRaised if deserializing of data failed.\nRaised if the signature is invalid.\nRaised if a key could not be parsed.\nRaised if Relay cannot parse the provided version.\nPre-hashed signature which allows incremental hashing.\nRepresents the public key of a Relay.\nRepresents the response the server is supposed to send to …\nRepresents a request for registration with the upstream.\nRepresents a response to a register challenge.\nA state structure containing relevant information from …\nRepresents the final registration.\nRegular signature creation which clones the data …\nAlias for Relay IDs (UUIDs).\nThe version of a Relay.\nRepresents the secret key of an Relay.\nA wrapper around a String that represents a signature.\nUsed to tell which algorithm was used for signature …\nRaised on unpacking if the data is too old.\nA wrapper around packed data that adds a timestamp.\nA borrowed reference to a signature string used for …\nAn encoded and signed <code>RegisterState</code>.\nRaised to indicate failure on unpacking.\nReturns a borrowed view of the signature as a <code>SignatureRef</code>.\nReturns the string representation of the token.\nUnpacks a signed register request for bootstrapping.\nReturns the current Relay version.\nChecks if the signature expired.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a secret + public key pair.\nGenerates an Relay ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a register challenge for this request.\nCreates a register response.\nCreates a new version with the given components.\nCreates a new request to register an Relay upstream.\nReturns the oldest compatible Relay version.\nReturns <code>true</code> if this version is older than the current …\nPacks some serializable data into JSON and signs it with …\nPacks some serializable data into JSON and signs it with …\nReturns the public key of the requesting downstream Relay.\nReturns the new public key of registering Relay.\nReturns the identifier of the requesting downstream Relay.\nReturns the Relay ID of the registering Relay.\nReturns the Relay ID of the registering Relay.\nReturns the Relay ID of the registering Relay.\nSigns some data with the secret key and returns the …\nSigns some data with the secret key and a specific header …\nRepresents how this signature was created and how it needs …\nReturns <code>true</code> if this version is still supported.\nReturns the timestamp at which the challenge was created.\nThe timestamp of when the data was packed and signed.\nReturns the token that needs signing.\nReturns the token that needs signing.\nUnpacks the data and verifies that it’s not too old, then\nUnpacks the encoded state and validates the signature.\nUnpacks the register response and validates signatures.\nUnpacks signed data and returns it with header.\nVerifies a signature but discards the header.\nVerifies the signature using the specified public key.\nVerifies the signature against any of the provided public …\nVerifies the signature against the given data and public …\nVerifies the signature and returns the embedded signature …\nVerifies a signature and checks the timestamp.\nReturns the version of the registering Relay.")