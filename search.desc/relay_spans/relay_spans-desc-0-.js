searchState.loadedDescShard("relay_spans", 0, "Structs and functions needed to ingest OpenTelemetry spans.\nConstructs a name attribute for a span, following the …\nTransforms an OTEL span to a Sentry span.\nTransform an OTEL span to a Sentry span V2.\nConverts a legacy span to the new Span V2 schema.\nTransforms a Sentry span V2 to a Sentry span V1.\nBits 8 and 9 are used to indicate that the parent span or …\nThe zero value for the enum. Should not be used for …\nA collection of ScopeSpans from a Resource.\nA collection of Spans produced by an InstrumentationScope.\nA Span represents a single operation performed by a single …\nSpanFlags represents constants used to interpret the …\nThe Status type defines a logical error model that is …\nBits 0-7 are used for trace flags.\nTracesData represents the traces data that can be stored …\nString value of the enum field names used in the ProtoBuf …\nattributes is a collection of key/value pairs. Note, …\nReturns the enum value of <code>code</code>, or the default if the …\nThe status code.\ndropped_attributes_count is the number of attributes that …\ndropped_events_count is the number of dropped events. If …\ndropped_links_count is the number of dropped links after …\nend_time_unix_nano is the end time of the span. On the …\nevents is a collection of Event items.\nFlags, a bit field.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>SpanFlags</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>SpanFlags</code>.\nReturns the enum value of <code>kind</code>, or the default if the …\nDistinguishes between spans generated in a particular …\nlinks is a collection of Links, which are references from …\nA developer-facing human readable error message.\nA description of the span’s operation.\nThe <code>span_id</code> of this span’s parent span. If this is a …\nThe resource for the spans in this message. If this field …\nAn array of ResourceSpans. For data coming from a single …\nThe Schema URL, if known. This is the identifier of the …\nThe Schema URL, if known. This is the identifier of the …\nThe instrumentation scope information for the spans in …\nA list of ScopeSpans that originate from a resource.\nSets <code>code</code> to the provided enum value.\nSets <code>kind</code> to the provided enum value.\nNested message and enum types in <code>Span</code>.\nA unique identifier for a span within a trace, assigned …\nA list of Spans that originate from an instrumentation …\nstart_time_unix_nano is the start time of the span. On the …\nNested message and enum types in <code>Status</code>.\nAn optional final status for this span. Semantically when …\nA unique identifier for a trace. All spans from the same …\ntrace_state conveys information about request position in …\nIndicates that the span describes a request to some remote …\nIndicates that the span describes consumer receiving a …\nEvent is a time-stamped annotation of the span, consisting …\nIndicates that the span represents an internal operation …\nA pointer from the current span to another span in the …\nIndicates that the span describes a producer sending a …\nIndicates that the span covers server-side handling of an …\nSpanKind is the type of span. Can be used to specify …\nUnspecified. Do NOT use as default. Implementations MAY …\nString value of the enum field names used in the ProtoBuf …\nattributes is a collection of attribute key/value pairs on …\nattributes is a collection of attribute key/value pairs on …\ndropped_attributes_count is the number of dropped …\ndropped_attributes_count is the number of dropped …\nFlags, a bit field.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>SpanKind</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>SpanKind</code>.\nname of the event. This field is semantically required to …\nA unique identifier for the linked span. The ID is an …\ntime_unix_nano is the time the event occurred.\nA unique identifier of a trace that this linked span is …\nThe trace_state associated with the link.\nThe Span contains an error.\nThe Span has been validated by an Application developer or …\nFor the semantics of status codes see …\nThe default status.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>StatusCode</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>StatusCode</code>.")