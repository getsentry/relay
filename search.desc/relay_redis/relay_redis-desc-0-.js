searchState.loadedDescShard("relay_redis", 0, "Abstraction over Redis caches.\nClient that wraps a <code>AsyncRedisConnection</code>.\nA wrapper Type for async redis connections. Conceptually it…\nPool that is connected to a Redis cluster.\nPool that is connected to a Redis cluster.\nVariant for <code>ClusterConnection</code>.\nFailure to configure Redis.\nA reference to a pooled connection from <code>PooledClient</code>.\nMultiple pools that are used for multi-write.\nMultiple pools that are used for multi-write.\nMulti write is not supported for the specified part.\nFailure in r2d2 pool.\nA pooled Redis client.\nFailure in Redis communication.\nAdditional configuration options for a redis client.\nAn error returned from <code>RedisPool</code>.\nAbstraction over cluster vs non-cluster mode.\nThe various <code>RedisPool</code>s used within Relay.\nA collection of static methods to load predefined Redis …\nPool that is connected to a single Redis instance.\nPool that is connected to a single Redis instance.\nVariant for <code>ConnectionManager</code> using …\nStats about how the <code>RedisPool</code> is performing.\nReturns all <code>Script</code>s.\nThe pool used for cardinality limits.\nReturns a pooled connection to a client.\nCreates a <code>RedisPool</code> in cluster configuration.\nCreates a new <code>AsyncRedisClient</code> in cluster mode.\nCreates a <code>AsyncRedisConnection</code> in cluster mode.\nReturns a pooled connection to this client.\nSets the connection timeout used by the pool, in seconds.\nThe number of connections currently being managed by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a shared <code>AsyncRedisConnection</code>.\nThe number of idle connections.\nSets the idle timeout used by the pool, in seconds.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the cardinality Redis script.\nLoads the global quota Redis script.\nLoads the rate limiting check Redis script.\nMaximum number of connections managed by the pool.\nSets the maximum lifetime of connections in the pool, in …\nMinimum amount of idle connections kept alive in the pool.\nCreates a <code>RedisPool</code> in multi write configuration.\nThe pool used for project configurations\nThe pool used for rate limiting/quotas.\nSets the read timeout out on the connection, in seconds.\nCreates a <code>RedisPool</code> in single-node configuration.\nCreates a new <code>AsyncRedisClient</code> in single mode.\nCreate a <code>AsyncRedisConnection</code> in single mode.\nReturns information about the current state of the pool.\nReturn <code>Stats</code> for <code>AsyncRedisClient</code>.\nSets the write timeout on the connection, in seconds.\nPrimary <code>PooledClient</code>.\nArray of secondary <code>PooledClient</code>s.\nPrimary <code>RedisPool</code>.\nArray of secondary <code>RedisPool</code>s.")