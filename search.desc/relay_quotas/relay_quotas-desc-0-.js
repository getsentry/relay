searchState.loadedDescShard("relay_quotas", 0, "Quotas and rate limiting for Relay.\nThe item contains metrics of any namespace.\nAn attachment. Quantity is the size of the attachment in …\nCounts the number of individual attachments, as opposed to …\nCounts the number of bytes across items.\nA thread-safe cache of rate limits with automatic …\nThe unit in which a data category is measured.\nCounts the number of discrete items.\nAn efficient container for data categories that avoids …\nClassifies the type of data that is being ingested.\nReserved and unused.\nReplay Video\nError events and Events with an <code>event_type</code> not explicitly …\nGlobal scope, matching all data regardless of origin.\nGlobal scope.\nA trait that exposes methods to check global rate limits.\nA rate limiter for global rate limits.\nThe supplied delay in seconds was not valid.\nError that occurs when parsing a <code>RetryAfter</code> from a string …\nData categorization and scoping information for a single …\nThe project key level (corresponds to a DSN).\nA DSN public key.\nLogByte\nLogItem\nMetric buckets.\nDescribes the metric namespace scoping of an item.\nMetricSecond\nCounts the accumulated time in milliseconds across items.\nMonitor check-ins.\nMonitor Seat\nThe item does not contain metrics of any namespace.\nThe organization level.\nAn organization with identifier.\nOwned version of <code>RedisQuota</code>.\nProfile\nProfileChunk\nUI Profile Chunk.\nProfileDuration\nProfile duration of a UI profile.\nIndexed Profile\nThe project level.\nA project with identifier.\nConfiguration for a data ingestion quota.\nThe scope at which a quota is applied.\nAn active rate limit that restricts data ingestion.\nThe scope that a rate limit applies to.\nAn error returned by <code>RedisRateLimiter</code>.\nA collection of scoped rate limits.\nAn iterator that consumes a <code>RateLimits</code> collection.\nAn iterator over rate limit references.\nA machine-readable reason code for rate limits.\nFailed to communicate with Redis.\nReference to information required for tracking quotas in …\nA service that executes quotas and checks for rate limits …\nSession Replays\nA monotonic expiration marker for rate limits.\nData scoping information for rate limiting and quota …\nEvents with an event type of <code>csp</code>, <code>hpkp</code>, <code>expectct</code> and …\nThis is the data category to count Seer Autofix run events.\nThis is the data category to count Seer Scanner run events.\nSession updates. Quantity is the number of updates in the …\nThe item contains metrics of a specific namespace.\nSpan\nSpanIndexed\nTransaction events.\nIndexed transaction events.\nDEPRECATED: A transaction for which metrics were extracted.\nAny other data category not known by this Relay.\nAny scope type not recognized by this Relay.\nFailed to check global rate limits via the service.\nThis is the data category for Uptime monitors.\nUser Feedback\nAdds a limit to this collection.\nAdds a rate limit to this collection.\nReturns the string representation of this reason code.\nConverts this <code>RedisQuota</code> to an <code>OwnedRedisQuota</code> leaving the …\nReturns an instance of <code>RedisQuota</code> which borrows from this …\nData categories this quota applies to.\nA set of data categories that this quota applies to. If …\nThe data category of the item.\nChecks whether any rate limits apply to the given scoping.\nReturns the <code>RedisQuota</code>s that should be rate limited.\nChecks whether any rate limits or static quotas apply to …\nRemoves expired rate limits from this instance.\nReturns a reference to the current rate limits.\nReturns whether this rate limit has expired at the current …\nReturns whether this rate limit has expired at the …\nReturns the timestamp when the current quota window will …\nReturns the <code>RedisQuota</code>s that should be rate limited.\nCreates a rate limiting scope from the given item scoping …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the data category corresponding to the given name.\nReturns the quota scope corresponding to the given name …\nCreates a new rate limit from the given <code>Quota</code>.\nCreates a new <code>RetryAfter</code> instance that expires after the …\nThe unique identifier for counting this quota.\nReturns a dedicated category for indexing if this data can …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if there are no rate limits in this …\nReturns true if the DataCategory refers to an error (i.e …\nReturns <code>true</code> if this data category is an indexed data …\nReturns <code>true</code> if this instance contains any active rate …\nReturns <code>true</code> if this instance contains no active limits.\nChecks whether any of the quotas in effect have been …\nReturns whether this quota is valid for tracking.\nCreates an <code>ItemScoping</code> for a specific data category in …\nReturns an iterator over all rate limits in this …\nReturns the Redis key for this quota.\nReturns when the Redis key should expire.\nThe public key’s internal id.\nReturns the limit value formatted for Redis.\nMaximum number of events allowed within the time window.\nReturns the rate limit with the latest expiration time.\nChecks if the given namespace matches this namespace …\nChecks whether the quota’s constraints match the current …\nChecks whether this rate limit applies to the given item.\nSets the maximum rate limit in seconds.\nMerges all limits from another <code>RateLimits</code> instance into …\nMerges rate limits from another collection into this one.\nMerges all limits from another <code>RateLimits</code> with this one.\nCreates an <code>ItemScoping</code> specifically for metric buckets in …\nReturns the canonical name of this data category.\nReturns the canonical string name of this scope.\nReturns the canonical name of this scope.\nNamespace for metric items, requiring …\nThe metric namespace this quota applies to.\nThe metric namespace of this rate limit.\nCreates a new reason code from a string.\nCreates an empty <code>RateLimits</code> instance.\nCreates a new, empty instance without any rate limits.\nCreates a new <code>RedisQuota</code> from a <code>Quota</code>, item scoping, and …\nCreates a new <code>RedisRateLimiter</code> instance.\nThe organization id.\nReturns the prefix of the quota used for Redis key …\nThe project id.\nThe DSN public key.\nA machine-readable reason code returned when this quota is …\nA machine-readable reason indicating which quota caused …\nReturns the remaining duration until the rate limit …\nReturns the remaining duration until the rate limit …\nReturns the remaining seconds until the rate limit expires.\nReturns the remaining seconds until the rate limit expires …\nA marker when this rate limit expires.\nThe scope level at which this quota is enforced.\nThe scope of this rate limit.\nReturns the identifier for the given quota scope.\nSpecific scope instance identifier this quota applies to.\nScoping of the data.\nReturns the current time slot of the quota based on the …\nReturns the numeric value for this outcome.\nReturns the window size of the quota in seconds.\nThe time window in seconds for quota enforcement.")