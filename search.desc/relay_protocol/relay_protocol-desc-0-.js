searchState.loadedDescShard("relay_protocol", 0, "Types and traits for building JSON-based protocols and …\nWrapper for data fields with optional meta data.\nThe remark just annotates a value but the value did not …\nBorrowed version of <code>Array</code>.\nAlias for typed arrays.\nAn array of annotated values.\nAn array of annotated values.\nA boolean value.\nA boolean value.\nClock-drift of the SDK has been corrected in all …\nAn utility to de-serialize annotated objects with payload.\nA value that can be empty.\nDo not serialize empty objects as indicated by the <code>Empty</code> …\nThe original value was encrypted (not implemented yet).\nAn error with an enumerable kind and optional data.\nThe kind of an <code>Error</code>.\nA floating point value.\nA floating point value.\nImplemented for all meta structures which can be created …\nImplemented for all meta structures.\nThe timestamp lies in the future, likely due to clock …\nA type that supports field access by paths.\nA type-erased iterator over a collection of <code>Getter</code>s.\nA signed integer value.\nA signed integer value.\nImplemented for all meta structures which can be …\nImplemented for all meta structures.\nThe attribute is not allowed in this structure.\nThe data does not fit the schema or is semantically …\nAlias for maps.\nThe original value was masked.\nMeta information for a data field in the event payload.\nMeta for children.\nRepresents a tree of meta objects.\nThe structure is missing a required attribute.\nSerialize all values. Missing values will be serialized as …\nDo not serialize <code>null</code> values but keep empty collections.\nBorrowed version of <code>Object</code>.\nAlias for typed objects.\nA mapping of strings to annotated values.\nA mapping of strings to annotated values.\nThe timestamp is too old.\nThe original value was replaced through pseudonymization.\nThe start (inclusive) and end (exclusive) indices of a …\nInformation on a modified section in a string.\nGives an indication about the type of remark.\nThe original value was removed entirely.\nAn utility to serialize annotated objects with payload.\nDefines behavior for skipping the serialization of fields.\nA string value.\nA string value.\nThe original value was substituted by a replacement value.\nAn unsigned integer value.\nAn unsigned integer value.\nAny other unknown error for forward compatibility.\nA UUID.\nBorrowed version of <code>Value</code>.\nRepresents a boxed value.\nHelper type that renders out a description of the value.\nThis value was too long and removed entirely.\nMutable reference to errors of this field.\nAdds a remark.\nCalls <code>f</code> with the stored value if available and merges meta …\nReturns the value if it is a boolean, otherwise <code>None</code>.\nRepresents the value as <code>f64</code> if possible. Returns <code>None</code> …\nRepresents the value as <code>f64</code> if possible. Returns <code>None</code> …\nReturns a reference to the string value if set.\nReturns a reference to the string value if this value is a …\nReturns the string representation of this error kind.\nReturns the string if this value is a string, otherwise …\nReturns the string if this value is a string, otherwise …\nRepresents the value as <code>f64</code> if possible. Returns <code>None</code> …\nReturns the UUID if this value is a UUID, otherwise <code>None</code>.\nAsserts the snapshot of an annotated structure using <code>insta</code>.\nReferences to the children.\nClears all remarks\nTypes to specify conditions on data.\nReturns an iterator over the data of this error.\nDerives the <code>FromValue</code>, <code>IntoValue</code>, and <code>Empty</code> traits using …\nReturns the serialization behavior for child elements.\nReturns a formattable that gives a helper description of …\nDeserializes an annotated from a deserializer\nCreates an empty annotated value without meta data.\nEstimates the size in bytes this would be in JSON.\nEstimates the size in bytes this would be in JSON, but …\nCreates an error that describes an invalid value.\nExtracts children meta map out of a value.\nExtracts children meta map out of a value.\nExtracts the meta tree out of annotated value.\nExtracts the meta tree out of annotated value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an empty annotated value with error attached.\nFrom an error\nDeserializes an annotated from a JSON string.\nDeserializes an annotated from JSON bytes.\nCreates a meta structure from key value pairs.\nCreates a meta structure from an annotated boxed value.\nRetrieves a key from the data bag of this error.\nReturns an iterator over the array pointed to by a <code>path</code>.\nReturns an iterator over the array pointed to by a <code>path</code>.\nInserts a value computed from <code>f</code> into the value if it is …\nReturns a reference to the typed <code>Annotated</code> value at a …\nReturns the serialized value of a field pointed to by a …\nReturns a reference to the typed value at a given path in …\nChecks if the tree has any errors.\nIndicates whether this field has errors.\nInserts a new key into the data bag of this error.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBoxes the meta structure back into an object of values.\nBoxes the meta structure back into a value.\nReturns the stored value and drops all meta data.\nCreates an invalid data error with a plain text reason.\nReturns whether this value is empty or all of its …\nReturns whether this value is empty or all of its …\nReturns if this object contains nested data to be …\nReturns whether this value is empty.\nChecks if the tree is empty.\nReturns if this object contains data to be serialized.\nIndicates if the remark refers to an empty range\nIndicates whether this field has meta data attached.\nIterates errors on this field.\nIterates all remarks on this field.\nReturns the kind of this error.\nThe length of this range.\nMaps an <code>Annotated&lt;T&gt;</code> to an <code>Annotated&lt;U&gt;</code> and keeps the …\nMerges the supplied <code>Annotated</code> in the left <code>Annotated</code>.\nMerges this meta with another one.\nReturns a reference to the meta data attached to this …\nThe node’s meta data\nReturns a mutable reference to the meta data attached to …\nCreates a new <code>GetterIter</code> given an iterator of a type that …\nCreates a new annotated value without meta data.\nCreates a new remark.\nCreates a new error without data.\nCreates a new <code>GetterIter</code> given a collection of <code>Annotated</code>s …\nCreates an error that describes an expected non-empty …\nCreates an error that describes an expected non-empty …\nThe original length of this field, if applicable.\nReturns a reference to the original value, if any.\nReturns a mutable reference to the original value, if any.\nSerializes an annotated value into a JSON string.\nSerializes an annotated value into a pretty JSON string.\nThe range of this remark.\nThe inclusive start and exclusive end indices of this …\nThe note of this remark.\nUnique identifier of the data scrubbing or normalization …\nEfficiently serializes the payload directly.\nSerializes an annotated value into a serializer.\nUpdates the original length of this annotation.\nSets the original value.\nReplaces the stored value.\nReturns whether this value should be skipped during …\nTake out the original value.\nSerializes an annotated value into a JSON string.\nSerializes an annotated value into a pretty JSON string.\nConvert <code>T</code> into a <code>Value</code>.\nReturns the type.\nThe kind of redaction that has been applied on the target …\nReturns a reference to the value.\nReturns a mutable reference to the value.\nCreates a new error and allows instant modification in a …\nCreates a new text remark with range indices.\nLoops over an array field and returns true if all elements …\nApplies the ALL operation to an array field.\nCombines multiple conditions using logical AND.\nCombines multiple conditions using logical AND.\nLoops over an array field and returns true if at least one …\nApplies the ANY operation to an array field.\nA condition that compares values for equality.\nOptions for <code>EqCondition</code>.\nA condition that compares values for equality.\nA condition that uses glob matching.\nA condition that uses glob matching.\nA condition that applies <code>&gt;</code>.\nA condition that applies <code>&gt;</code>.\nA condition that applies <code>&gt;=</code>.\nA condition that applies <code>&gt;=</code>.\nA type that can be converted to a list of strings.\nA condition that applies <code>&lt;</code>.\nA condition that applies <code>&lt;</code>.\nA condition that applies <code>&lt;=</code>.\nA condition that applies <code>&lt;=</code>.\nApplies logical NOT to a condition.\nApplies logical NOT to a condition.\nCombines multiple conditions using logical OR.\nCombines multiple conditions using logical OR.\nA condition that can be evaluated on structured data.\nAn unsupported condition for future compatibility.\nReturns a condition that always matches.\nCombines this condition and another condition with a …\nCreates a condition that compares values for equality.\nCreates a condition that compares values for equality …\nCreates an <code>AllCondition</code>.\nCreates an <code>AnyCondition</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a condition that matches one or more glob patterns.\nCreates a condition that applies <code>&gt;</code>.\nCreates a condition that applies <code>&gt;=</code>.\nEnables case-insensitive comparisions for this rule.\nIf <code>true</code>, string values are compared in case-insensitive …\nInner rules to combine.\nInner rules to combine.\nAn inner rule to negate.\nInner rule to match on each element.\nInner rule to match on each element.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a list of strings from this type.\nCreates a condition that applies <code>&lt;</code>.\nCreates a condition that applies <code>&lt;=</code>.\nReturns <code>true</code> if the rule matches the given value instance.\nPath of the field that should match the value.\nPath of the field that should match the value.\nPath of the field that should match the value.\nPath of the field that should match the value.\nPath of the field that should match the value.\nPath of the field that should match the value.\nPath of the field that should match the value.\nPath of the field that should match the value.\nNegates this condition with logical NOT.\nReturns a condition that never matches.\nCreates a new condition that checks for equality.\nCreates a new condition that comparison condition.\nCreates a new condition that comparison condition.\nCreates a new condition that comparison condition.\nCreates a new condition that comparison condition.\nCreates a condition that matches one or more glob patterns.\nCreates a condition that matches any element in the array …\nCreates a condition that matches all the elements in the …\nConfiguration options for the condition.\nCombines this condition and another condition with a …\nChecks if Relay supports this condition (in other words if …\nThe value to check against.\nThe numeric value to check against.\nThe numeric value to check against.\nThe numeric value to check against.\nThe numeric value to check against.\nA list of glob patterns to check.")