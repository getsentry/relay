searchState.loadedDescShard("relay_event_normalization", 0, "Event normalization and processing.\nBorrowed version of <code>SpanOpDefaults</code>.\nConfiguration to define breakdown to be generated based on …\nConfiguration for computing breakdowns from data in the …\nDefines a builtin measurement.\nThe client hint variable names mirror the name of the “…\nCorrects clock drift based on the sender’s and receivers …\nContainer for global and project level <code>MeasurementsConfig</code>. …\nConfiguration for <code>validate_event</code>.\nComputes a <code>Context</code> from either a user agent string and …\nAn error in the <code>GeoIpLookup</code>.\nA geo ip lookup helper based on maxmind db files.\nThe length of a full measurement MRI, minus the name and …\nConfiguration for measurements normalization.\nA single mapping of (AI model ID, input/output, cost)\nA mapping of AI model types (like GPT-4) to their …\nConfiguration for <code>normalize_event</code>.\nDefines the performance configuration for the project.\nDefines a profile for performance score.\nDefines a weighted component for a performance score.\nA container housing both the user-agent string and the …\nDescribes what to do with the matched pattern.\nRemoves unknown, internal and deprecated fields from a …\nReplaces the matched pattern with a placeholder.\nProvides the user agent’s branding and significant …\nIndicates the device model on which the browser is running.\nProvides the platform or operating system on which the …\nProvides the version of the operating system on which the …\nValidates constraints such as empty strings or arrays and …\nThe rule describes how span descriptions should be changed.\nObject containing transaction attributes the rules must …\nA rule to infer <code>Span::op</code> from other span fields.\nRules used to infer <code>span.op</code> from other span fields.\nCompute breakdowns based on span operation name.\nConfiguration to define breakdowns based on span operation …\nA time window declared by its start and end timestamp.\nEnsures an event’s timestamps are not stale.\nConfiguration for sanitizing unparameterized transaction …\nThe rule describes how transaction name should be changed.\nRejects transactions based on required fields.\nLimits properties to a maximum size and depth.\nThe name of the user agent HTTP header.\nUnsupported redaction rule for forward compatibility.\nAn unknown rule ignored for forward compatibility.\nConfiguration for calculating the cost of AI model runs\nReturn true if the built in measurement key allows …\nApplies the rule if any found to the transaction name.\nConverts to a borrowed <code>RawUserAgentInfo</code>.\nReturns an instance of <code>ClientHints</code> that borrows from the …\nLimits clock drift correction to a minimum duration.\nGets a borrowed version of this config.\nComputation of breakdowns from event data.\nEmit breakdowns based on given configuration.\nThe sec-ch-ua field looks something like this: “Not_A …\nReturns an iterator over the merged builtin measurement …\nA list of measurements that are built-in and are not …\nThe name and version of the SDK that sent the event.\nUser-Agent client hints.\nThe IP address of the SDK that sent the event.\nThe SDK’s sample rate as communicated via envelope …\nSee <code>RuleCondition</code> for all available options to specify and …\nWhen to set the given value.\nComputation and normalization of contexts from event data.\nChecks every field of a passed-in ClientHints instance if …\nGets the cost per 1000 tokens, if defined for the given …\nThe mappings of model ID =&gt; cost\nWhen <code>true</code>, infers the device class from CPU and model.\nReturns the duration from start to end.\nWhen enabled, adds errors in the meta to the event’s …\nWhen <code>Some(true)</code>, individual parts of the event payload is …\nThe exclusive end timestamp of the span.\nWhen <code>true</code>, extracts tags from event and spans and …\nUse the given error kind for the attached eventerror …\nDate time when the rule expires and it should not be …\nDate time when the rule expires and it should not be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes a borrowed <code>RawUserAgentInfo</code> from the given HTTP …\nTries to populate the context from client hints or a user …\nTries to populate the context from client hints or a user …\nAn initialized GeoIP lookup.\nConfiguration for issue grouping.\nSpecifies whether the client_ip should be used to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the clocks are significantly drifted.\nReturns <code>true</code>, if neither a user agent nor client hints are …\nChecks if every field is of value None.\n<code>false</code> if measurement and metrics extraction should be …\nReturns <code>true</code> if the event’s transaction name is known to …\nWhen <code>true</code>, it is assumed that the event has been …\nReturns <code>true</code> if the given platform string is a known …\nControls whether the event has been validated before, in …\nThe internal identifier of the DSN, which gets added to …\nLooks up an IP address.\nApplies the span description rule to the given string, if …\nChecks is the current rule matches and tries to apply it.\n<code>true</code> if this cost definition matches the given model.\nA list of declarations for span operations to extract …\nGets the max custom measurements value from the …\nThe maximum number of measurements allowed per event that …\nThe maximum length for names of custom measurements.\nThe maximum amount of seconds an event can be predated …\nThe maximum amount of seconds an event can be dated in the …\nThe maximum allowed size of tag values in bytes. Longer …\nMeasurement (eg. measurements.lcp) to be matched against. …\nConfiguration for measurement normalization in transaction …\nReturns the name of the built in measurement key.\nName of the profile, used for debugging and faceting …\nContains helper function for NEL reports.\nCreates a new <code>ClockDriftProcessor</code>.\nCreates a new time span with the given <code>start</code> and <code>end</code> date.\nCreates a new <code>BuiltinMeasurementKey</code>.\nConstructor for <code>CombinedMeasurementsConfig</code>.\nCreates a new <code>TransactionsProcessor</code> instance.\nCreates a new trimming processor.\nReplaces snake_case app start spans op with dot.case op.\nComputes breakdowns for an event based on the given …\nNormalizes an event.\nEnsure only valid measurements are ingested.\nComputes performance score measurements for an event.\nControls whether spans should be normalized (e.g. …\nApply parametrization to transaction.\nGenerates context data from client hints or user agent.\nWhen <code>Some(true)</code>, context information is extracted from the …\nLow-level version of <code>normalize_user_agent</code> operating on …\nThe span operation type to match on.\nOpens a maxminddb file by path.\nWhether the measurement is optional. If the measurement is …\np10 used to define the log-normal for calculation\nMedian used to define the log-normal for calculation\nTries to populate the context from client hints.\nTries to populate the context from a user agent header …\nThe pattern which will be applied to the span description.\nThe pattern which will be applied to transaction name.\nConfiguration for generating performance score …\nConvert user-agent info to HTTP headers as stored in the …\nProcesses the given <code>DateTime</code>.\nProcesses the given <code>UnixTimestamp</code> by applying clock drift …\nList of performance profiles, only the first with matching …\nThe identifier of the target project, which gets added to …\nThe version of the protocol.\nThe time at which the event was received in this Relay.\nObject describing what to do with the matched pattern.\nObject describing what to do with the matched pattern.\nOverrides the default flag for other removal.\nValidation and normalization of <code>Replay</code> events.\nThe identifier of the Replay running while this event was …\nNormalization of the <code>Request</code> interface.\nRules for identifier replacement that were discovered by …\nList of rules to apply. First match wins.\nObject containing transaction attributes the rules must …\nScore components\nName of the client’s web browser and its version.\nDevice model, e.g. samsung galaxy 3.\nThe client’s OS, e.g. macos, android…\nThe version number of the client’s OS.\nSet a default transaction source if it is missing, but …\nChecks if key matches a user agent header, in which case …\nSpan normalization logic.\nControls list of hosts to be excluded from scrubbing\nConfiguration for replacing identifiers in the span …\nRules to infer <code>span.op</code> from other span fields.\nThe inclusive start timestamp of the span.\nConfiguration to apply to transaction names, especially …\nTimestamp range in which a transaction must end.\nReturns the unit of the built in measurement key.\nGenerate context data from user agent and client hints.\nThe user-agent and client hints obtained from the …\nThe “old style” of a single UA string.\n<strong>Deprecated.</strong> Utilities for extracting common event fields.\nGiven a string checks if the environment name is generally …\nValidates an event.\nGiven a string checks if the release is generally valid.\nValidates a span.\nValue for the <code>Span::op</code>. Only set if omitted by the SDK.\nThe version of the profile, used to isolate changes to …\nThe version of the model cost struct\nWeight [0,1.0] of this component in the performance score\nThe string to substitute with.\nConfiguration to define breakdown to be generated based on …\nConfiguration for computing breakdowns from data in the …\nCompute breakdowns based on span operation name.\nConfiguration to define breakdowns based on span operation …\nA time window declared by its start and end timestamp.\nAn unknown rule ignored for forward compatibility.\nThe exclusive end timestamp of the span.\nA list of declarations for span operations to extract …\nComputes breakdowns for an event based on the given …\nThe inclusive start timestamp of the span.\nReturns the API version of an Android description.\nNormalizes the given context.\nEnriches the event with new values using the provided …\nThe Replay event could not be parsed from JSON.\nAn error occurred during PII scrubbing of the Replay.\nThe Replay contains invalid data or is missing a required …\nThe Replay event was parsed but did not match the schema.\nReplay validation or normalization error.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdds default fields and normalizes all values in to their …\nChecks if the Replay event is structurally valid.\nNormalizes the <code>Request</code> interface.\nRegex used to scrub hex IDs and multi-digit numbers from …\nAI cost calculation.\nMapping betwwen country code and subregion code\nSpan description scrubbing logic.\nSpan attribute materialization.\nLogic for persisting items into <code>span.sentry_tags</code> and …\nExtract the ai_total_cost measurement into the span.\nExtract the ai_total_cost measurements from all of an event…\nSubregions regions as defined by UN M49 standards, the …\nReturns the argument unchanged.\nMaps 2 ISO letter country codes to geoscheme regions based …\nCalls <code>U::from(self)</code>.\nConcatenate an optional host and an optional port.\nSanitize a qualified domain string.\nScrub a <code>Host</code> object.\nScrub an IPv4 address.\nScrub an IPv6 address.\nComputes the exclusive time for all spans in the event.\nRegex with a capture group to extract the HTTP method from …\nCopies specific numeric values from span data to span …\nExtract segment span specific tags and measurements from …\nExtracts tags and measurements from event and spans and …\nWrites fields into <code>Span::sentry_tags</code>.\nThe client hint variable names mirror the name of the “…\nComputes a <code>Context</code> from either a user agent string and …\nA container housing both the user-agent string and the …\nThe sec-ch-ua field looks something like this: “Not_A …\nUser-Agent client hints.\nTries to populate the context from client hints or a user …\nGenerates context data from client hints or user agent.\nLow-level version of <code>normalize_user_agent</code> operating on …\nTries to populate the context from client hints.\nTries to populate the context from a user agent header …\nName of the client’s web browser and its version.\nDevice model, e.g. samsung galaxy 3.\nThe client’s OS, e.g. macos, android…\nThe version number of the client’s OS.\nThe “old style” of a single UA string.\nAllowed value for main thread name.\nMaximum length of a mobile span or measurement in …\nUsed to decide when to extract mobile-specific tags.\nCalculates a log-normal CDF score based on a log-normal …\nExtracts the HTTP status code.\nReturns a normalized <code>op</code> from the given trace context.\nCompute the transaction event’s “user” tag as close …\nExtract the HTTP status code from the span data.")