searchState.loadedDescShard("relay_log", 0, "Error reporting and logging facade for Relay.\nAuto detect the best format.\nThe “debug” level.\nThe “error” level.\nThe logging format parse error.\nThe central object that can manage scopes and clients.\nThe “info” level.\nDump out JSON lines.\nDescribes the level of verbosity of a span or event.\nThe logging level parse error.\nControls the logging system.\nControls the log format.\nPretty printing with colors.\nControls internal reporting to Sentry.\nSimplified plain text output.\nThe “trace” level.\nThe “warn” level.\nInternal. Enables crash handling and sets the absolute …\nAdds a new breadcrumb to the current scope.\nReturns the string representation of the <code>Level</code>.\nReturns <code>true</code> if backtrace printing is enabled.\nBinds a new client to the hub.\nCaptures a <code>std::error::Error</code>.\nCapture any <code>std::error::Error</code>.\nSends the event to the current client with the current …\nCaptures an arbitrary message.\nReturns the currently bound client.\nInvokes a function that can modify the current scope.\nInvokes a function that can modify the current scope.\nReturns the current, thread-local hub.\nConstructs an event at the debug level.\nAdd defaults tags to the events emitted by Relay\nThe <code>DSN</code> specifying the Project to report to.\nWhen set to <code>true</code>, backtraces are forced on.\nEnables reporting to Sentry.\nReturns a reference to the <code>DSN</code> if Sentry is enabled.\nEnd the current Release Health Session.\nEnd the current Release Health Session with the given …\nLogs an error to the configured logger or <code>stderr</code> if not …\nSets the environment for this service.\nConstructs an event at the error level.\nControls the log output format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an event at the info level.\nInitialize the logging system and reporting to Sentry.\nInitialize the logger for testing.\nInitialize the logger for testing.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the last event id.\nThe log level for Relay.\nReturns the tracing <code>LevelFilter</code>.\nReturns the main thread’s hub.\nCreates a new hub from the given client and scope.\nCreates a new hub based on the top scope of the given hub.\nThe current latest sentry protocol version.\nPushes a new scope.\nBinds a hub to the current thread for the duration of the …\nSets the server name for this service.\nStart a new session for Release Health.\nStart a new Performance Monitoring Transaction.\nConstructs an event at the trace level.\nSets the trace sample rate for performance monitoring.\nConstructs an event at the warn level.\nInvokes the callback with the default hub.\nLike <code>Hub::with</code> but only calls the function if a client is …\nLooks up an integration on the hub.\nTemporarily pushes a scope for a single call optionally …\nTemporarily pushes a scope for a single call optionally …\nThe session had an unexpected abrupt termination (not …\nThe operation was aborted, typically due to a concurrency …\nRepresents an address.\nAlready exists (409)\nApplication data.\nHolds app information.\nApple debug images (machos).  This is currently also used …\nAn Apple crash report file that creates an error event and …\nRepresents an apple debug image in the debug meta.\nRepresents a JSON array.\nRepresents an attachment item.\n(default) A standard attachment without special meaning.\nAn Attachment Item.\nThe different types an attachment can have.\nThe IP address needs to be inferred from the user’s …\nRepresents a JSON boolean.\nRepresents a single breadcrumb.\nWeb browser data.\nHolds information about the web browser.\nPOSIX signal with optional extended data.\nThe operation was cancelled (typically by the user).\nInformation on the SDK client.\nRepresents an installed package relevant to the SDK.\nTyped contextual data.\nThe session resulted in an application crash.\nA Crontab schedule allows you to use a standard UNIX …\nError type for errors with parsing a crontab schedule\nUnrecoverable data loss or corruption\nDay Interval.\nDeadline expired before operation could complete.\nIndicates very spammy debug information.\nRepresents a debug image.\nRepresents debug meta information.\nDevice data.\nHolds device information.\nA Sentry Envelope.\nRaised if a envelope cannot be parsed from a given input.\nAn Envelope Item.\nAn Iterator over the items of an Envelope.\nAn error.\nCheck-in failed or otherwise had some issues.\nRepresents a full event for Sentry.\nAn Event Item.\nThe exact given IP address (v4 or v6).\nRepresents a single exception.\nThe session terminated normally.\nOperation was rejected because the system is not in a …\nSimilar to error but indicates a critical event that …\nRepresents a frame.\nGPU data\nGPU context describes the GPU of the device.\nHour Interval.\nCheck-in is expectred to complete.\nInformational messages.\nInteger representation for the thread id\nOther/generic 5xx.\nA Interval schedule allows you to configure a periodic …\nClient specified an invalid argument. 4xx.\nInvalid envelope header\nInvalid item header\nInvalid item payload\nAn IP address, either IPv4, IPv6 or Auto.\nLandscape device orientation.\nRepresents the level of severity of an event or breadcrumb.\nRepresents a log entry message.\nMach exception information.\nAn ordered map based on a B-Tree.\nRepresents a single exception.\nOperating system or runtime meta information to an …\nA minidump file that creates an error event and is …\nMinute Interval.\nMonitor did not check in on time.\nMissing envelope header\nMissing item header\nMissing newline after header or payload\nThe monitor check-in payload.\nA MonitorCheckIn item.\nRepresents the status of the monitor check-in\nThe monitor configuration playload for upserting monitors …\nThe unit for the interval schedule type\nConfiguration object of the monitor schedule.\nMonth Interval.\nUUID namespace for Domain Name System (DNS).\nUUID namespace for ISO Object Identifiers (OIDs).\nUUID namespace for Uniform Resource Locators (URLs).\nUUID namespace for X.500 Distinguished Names (DNs).\n404 Not Found. Some requested entity (file or directory) …\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nThe operation completed successfully.\nCheck-in had no issues during execution.\nThe session is healthy.\nOptional device screen orientation\nOperating system data.\nHolds operating system information.\nGeneric other context data.\nOperation was attempted past the valid range.\nAn error used when parsing <code>Level</code>.\nAn error used when parsing <code>SessionStatus</code>.\nAn error used when parsing <code>SpanStatus</code>.\n403 Forbidden\nPortrait device orientation.\nPOSIX signal with optional extended data.\nA reference to a proguard debug file.\nRepresents a proguard mapping file reference.\nThis is a sentinel item used to <code>filter</code> raw envelopes.\nRepresents a register value.\nRepresents http request data.\n429 Too Many Requests\nRuntime data.\nHolds information about the runtime.\nAn aggregation grouped by <code>started</code> and <code>distinct_id</code>.\nAn Aggregation of Release Health Sessions\nA Session Aggregates Item.\nAdditional attributes for Sessions.\nThe Status of a Release Health Session.\nA Release Health Session.\nA Session Item.\nRepresents a tracing span.\nHolds the identifier for a Span\nThe status of a Span.\nRepresents a stacktrace.\nString representation for the thread id\nRepresents a JSON string.\nSymbolic (new style) debug infos.\nRepresents a symbolic debug image.\nHolds information about the system SDK.\nRepresents template debug info.\nRepresents a single thread.\nRepresents a thread id.\nTracing data.\nHolds information about a tracing event.\nHolds the identifier for a Trace\nRepresents a tracing transaction.\nA Transaction Item.\n401 Unauthorized (actually does mean unauthenticated …\n503 Service Unavailable\nUnexpected end of file\n501 Not Implemented\nNo status was passed.\nUnknown. Any non-standard HTTP status code.\nAn XML file containing UE4 crash meta data. During event …\nA plain-text log file obtained from UE4 crashes. During …\nA parsed URL record.\nRepresents user info.\nA Universally Unique Identifier (UUID).\nRepresents any valid JSON value.\nA wrapper type for collections with attached meta data.\nA warning.\nImage used for WebAssembly. Their structure is identical …\nRepresents a WebAssembly debug image.\nWeek Interval.\nYear Interval.\nThe number of abnormal sessions that occurred.\nIf known the absolute path.\nIf known the absolute path.\nAdd a new Envelope Item.\nOptionally changes the addressing mode. The default value …\nA batch of sessions that were started.\nThe device low-level API type. Examples: “Apple Metal” …\nInternal build ID as it appears on the platform.\nOptional app identifier (dotted bundle id).\nApplication name as it appears on the platform.\nOptional start time of the app.\nApplication version as it appears on the platform.\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nThe optional CPU architecture of the debug image.\nThe optional CPU architecture of the debug image.\nThe native cpu architecture of the device.\nIf the <code>Value</code> is an Array, returns the associated vector. …\nIf the <code>Value</code> is an Array, returns the associated mutable …\nIf the <code>Value</code> is a Boolean, returns the associated bool. …\nGet a borrowed <code>Braced</code> formatter.\nReturns a slice of 16 octets containing the value.\nIf the <code>Value</code> is a number, represent it as f64 if possible. …\nReturns the four field values of the UUID.\nGet a borrowed <code>Hyphenated</code> formatter.\nIf the <code>Value</code> is an integer, represent it as i64 if …\nIf the <code>Value</code> is a Null, returns (). Returns None otherwise.\nIf the <code>Value</code> is a Number, returns the associated <code>Number</code>. …\nIf the <code>Value</code> is an Object, returns the associated Map. …\nIf the <code>Value</code> is an Object, returns the associated mutable …\nGet a borrowed <code>Simple</code> formatter.\nReturn the serialization of this URL.\nIf the <code>Value</code> is a String, returns the associated str. …\nGets the string value Sentry expects for the attachment …\nReturns a 128bit value containing the value.\nIf the <code>Value</code> is an integer, represent it as u64 if …\nReturns two 64bit values containing the value.\nGet a borrowed <code>Urn</code> formatter.\nThe session event attributes.\nThe shared session event attributes.\nReturn the authority of this URL as an ASCII string.\nThe current battery level (0-100).\nOptionally an indicator when the device was booted.\nGet a <code>Braced</code> formatter.\nList of breadcrumbs to send along.\nThe actual attachment data.\nThe internal build number of the operating system.\nOptional build identicator.\nReturn whether this URL is a cannot-be-a-base URL, meaning …\nThe optional category of the breadcrumb.\nUnique identifier of this check-in.\nHow long (in minutes) after the expected check-in time …\nClears the map, removing all elements.\nThe mach exception code.\nAn optional signal code present on Apple systems.\nThe absolute URL to the wasm file. This helps to locate …\nOptional identifier of the code file.\nIdentifier of the WASM file. It is the value of the …\nOptional name of the errno constant.\nThe column number if known.\nThe column number if known.\nReturns <code>true</code> if the map contains a value for the specified …\nThe Content Type of the attachment\nThe current line as source.\nThe current line as source.\nOptional contexts.\nOptional contexts.\nAn encoded cookie string if available.\nAlternatively a macho cpu subtype.\nAlternatively a macho cpu type.\nTrue if this is the crashed thread.\nThe number of crashed sessions that occurred.\nThe culprit of the event.\nIndicates that the thread was not suspended when the event …\nAdditional attributes depending on the mechanism type.\nArbitrary breadcrumb data that should be send along.\nOptionally some associated request data (human readable)\nOptional extra information to be sent with the span.\nPath and name of the debug companion file.\nName or absolute URL to the WASM file containing debug …\nIdentifier of the dynamic library or executable.\nDebug meta information.\nRepresents a debug ID.\nCreates an empty <code>BTreeMap</code>.\nHuman readable detail description.\nHuman readable detail description.\nLonger description of the span’s operation, which …\nSerialize with Serde using the internal representation of …\nOptional device app hash (app specific device ID)\nAn optional distribution identifier.\nThe distinct identifier. Should be device or user ID.\nThe distinct identifier.\nIf this URL has a host and it is a domain name (not an IP …\nThe version of the graphic device driver.\nDuration of this check-in since it has started in seconds.\nAn optional duration of the session so far.\nThe email address of the user.\nA buffer that can be used for <code>encode_...</code> calls, that is …\nGets the given key’s corresponding entry in the map for …\nOptionally a CGI/WSGI etc. environment dictionary.\nAn optional environment identifier.\nAn optional environment identifier.\nThe environment to associate the check-in with.\nThe environment identifier.\nOptional ISO C standard error code.\nThe number of errored sessions that occurred, not …\nThe number of errors that occurred.\nReturns the <code>Event</code> contained in this Envelope, if any.\nThe ID of the event\nThe ID of the event\nThe mach exception type.\nExceptions to be attached (one or multiple if chained).\nThe number of exited sessions that occurred.\nFree size of the attached external storage in bytes (eg: …\nTotal size of the attached external storage in bytes (eg: …\nOptional extra information to be sent with the event.\nOptional extra information to be sent with the event.\nCreates an iterator that visits all elements (key-value …\nThe number of consecutive failed/error check-ins that …\nThe family of the device model.\nThe filename (basename only).\nThe filename (basename only).\nThe filename of the attachment.\nFilters the Envelope’s <code>EnvelopeItem</code>s based on a …\nAn optional fingerprint configuration to override the …\nFinalizes the span.\nFinalizes the transaction to be dispatched.\nReturns the first entry in the map for in-place …\nReturns the first key-value pair in the map. The key in …\nDisplay a JSON value as a string.\nReturn this URL’s fragment identifier, if any.\nThe list of frames in the stacktrace.\nOptionally a segment of frames removed (<code>start</code>, <code>end</code>).\nHow much memory is still available in bytes.\nHow much storage is free in bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>[(K, V); N]</code> into a <code>BTreeMap&lt;(K, V)&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert 64-bit floating point number to <code>Value::Number</code>, or …\nConvert <code>()</code> to <code>Value::Null</code>.\nConvert a slice to <code>Value::Array</code>.\nConvert a <code>Vec</code> to <code>Value::Array</code>.\nConvert map (with string keys) to <code>Value::Object</code>.\nConvert <code>Number</code> to <code>Value::Number</code>.\nConvert copy-on-write string to <code>Value::String</code>.\nReturns the argument unchanged.\nConvert <code>String</code> to <code>Value::String</code>.\nConvert 32-bit floating point number to <code>Value::Number</code>, or …\nConvert boolean to <code>Value::Bool</code>.\nConvert string slice to <code>Value::String</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nCreates a new raw Envelope from the given buffer.\nCreates a reference to a UUID from a reference to the …\nAttempts to create a MonitorSchedule from a provided …\nConvert a directory name as <code>std::path::Path</code> into an URL in …\nCreates a UUID from four field values.\nCreates a UUID from four field values in little-endian …\nConvert a file name as <code>std::path::Path</code> into an URL in the …\nOptionally creates a stacktrace from a list of stack …\nCreate a <code>Value::Object</code> by collecting an iterator of …\nCreate a <code>Value::Array</code> by collecting an iterator of array …\nCreates a new Envelope from path.\nCreates a new Envelope from path without attempting to …\nCreates a UUID using the supplied bytes.\nCreates a new Envelope from slice.\nCreates a UUID using the supplied bytes in little endian …\nCreates a UUID from a 128bit value.\nCreates a UUID from a 128bit value in little-endian order.\nCreates a UUID from two 64bit values.\nThe name of the function is known.\nReturns a reference to the value corresponding to the key.\nIndex into a JSON array or map. A string index can be used …\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\nMutably index into a JSON array or map. A string index can …\nIf the UUID is the correct version (v1, or v6) this will …\nIf the UUID is the correct version (v1, v6, or v7) this …\nReturns the variant of the UUID structure.\nReturns the version of the UUID.\nReturns the version number of the UUID.\nApproximate “shader capability” level of the graphics …\nAn optional flag indicating whether this exception was …\nReturn whether the URL has an ‘authority’, which can …\nEquivalent to <code>url.host().is_some()</code>.\nHTTP request headers.\nAn optional link to online resources describing this error.\nReturn the parsed representation of the host for this URL. …\nReturn the string representation of the host (domain or IP …\nGet a <code>Hyphenated</code> formatter.\nThe optional ID of the thread (usually an integer)\nThe ID of the user.\nUnique debug identifier of the image.\nThe PCI identifier of the graphics device.\nIf known the location of the image.\nThe starting address of the image.\nStarting memory address of the image (required).\nThe size of the image in bytes.\nSize of the image in bytes (required).\nThe address where the image is loaded at runtime.\nLoading address in virtual memory.\nA list of debug information files.\nIn-app indicator.\nReturns a reference to the value corresponding to the …\nIndex into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or\nWrite into a <code>serde_json::Value</code> using the syntax …\nA flag that indicates that this is the initial …\nInserts a key-value pair into the map.\nIf known the location of the instruction.\nAn optional list of integrations that are enabled in this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self and returns the underlying byte value of the …\nGets an owning iterator over the entries of the map, …\nCreates a consuming iterator visiting all the keys, in …\nCreates a fully owned version of the event.\nCreates a fully owned version of the transaction.\nReturn the serialization of this URL.\nCreates a consuming iterator visiting all the values, in …\nThe remote ip address of the user.\nThe ip address of the user. This data is not persisted but …\nReturns true if the <code>Value</code> is an Array. Returns false …\nReturns true if the <code>Value</code> is a Boolean. Returns false …\nA quick way to check if the level is <code>debug</code>.\nChecks whether this struct is empty in both values and …\nReturns <code>true</code> if the map contains no elements.\nReturns true if the debug meta is empty.\nA quick way to check if the level is <code>error</code>.\nReturns true if the <code>Value</code> is a number that can be …\nA quick way to check if the level is <code>fatal</code>.\nReturns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …\nA quick way to check if the level is <code>info</code>.\nTests if the UUID is max (all ones).\nTests if the UUID is nil (all zeros).\nReturns <code>true</code> if this address is the null pointer.\nReturns true if the <code>Value</code> is a Null. Returns false …\nReturns true if the <code>Value</code> is a Number. Returns false …\nReturns true if the <code>Value</code> is an Object. Returns false …\nReturn whether the URL is special (has a special scheme)\nReturns true if the <code>Value</code> is a String. Returns false …\nReturns true if the <code>Value</code> is an integer between zero and …\nA quick way to check if the level is <code>warning</code>.\nCreate an <code>Iterator</code> over all the <code>EnvelopeItem</code>s.\nGets an iterator over the entries of the map, sorted by …\nGets a mutable iterator over the entries of the map, …\nParse a string as an URL, with this URL as the base URL.\nThe current kernel version.\nGets an iterator over the keys of the map, in sorted order.\nReturns the last entry in the map for in-place …\nReturns the last key-value pair in the map. The key in …\nReturns the number of elements in the map.\nThe non optional level of the breadcrumb.  It defaults to …\nThe level of the event (defaults to error)\nThe line number if known.\nThe line number if known.\nOptionally a log entry that can be used instead of the …\nOptionally the name of the logger that created this event.\nReturns a <code>Cursor</code> pointing at the gap before the smallest …\nReturns a <code>CursorMut</code> pointing at the gap before the …\nOptional mach exception information.\nCreates a relative URL if possible, with this URL as the …\nThe internally used arbitrary data map type.\nThe ‘max UUID’ (all ones).\nHow long (in minutes) is the check-in allowed to run for in\nLargest size of a texture that is supported by the …\nThe mechanism of the exception including OS specific …\nTotal memory available in byts.\nThe total GPU memory available in Megabytes.\nThe log message with parameters replaced by <code>%s</code>\nAn optional human readbale message for the breadcrumb.\nA message to be sent with the event.\nOperating system or runtime meta information.\nThe HTTP request method.\nThe device model (human readable).\nThe device model (internal identifier).\nThe name of the module the frame is contained in.\nAn optional module for this exception.\nOptionally a name to version mapping of installed modules.\nMonitor configuration to support upserts. When provided a …\nIdentifier of the monitor for this check-in.\nWhether the GPU has multi-threaded rendering or not.\nThe optional name of the thread.\nOptional name of the errno constant.\nOptional name of the mach exception.\nOptional name of the errno constant.\nThe name of the debug image (usually filename)\nPath and name of the image file (required).\nThe name of the debug image (usually filename)\nThe name of the SDK.\nThe name of the package installed.\nThe name of the device.\nThe name of the operating system.\nThe name of the runtime (for instance JVM).\nThe name of the browser (for instance “Chrome”).\nThe name of the graphics device.\nThe transaction name.\nCreates an empty values struct.\nMakes a new, empty <code>BTreeMap</code>.\nCreates a new event with the current timestamp and random …\nCreates a new span with the current timestamp and random …\nCreates a new span transaction the current timestamp and …\nCreates a new empty Envelope.\nConstructs a new CrontabParseError from a given invalid …\nMakes a new empty BTreeMap with a reasonable choice for B.\nCreates a random UUID.\nCreates a UUID using a name from a namespace, based on the …\nThe ‘nil UUID’ (all zeros).\nThe Non-Power-Of-Two-Support support.\nThe error code as specified by ISO C99, POSIX.1-2001 or …\nThe POSIX signal number.\nShort code identifying the type of operation the …\nShort code identifying the type of operation the span is …\nReturn a default <code>ParseOptions</code> that can fully configure the …\nThe current screen orientation.\nReturn the origin of this URL (…\nAdditional arbitrary fields for forwards compatibility.\nAdditional arbitrary fields for forwards compatibility.\nAdditional arbitrary fields for forwards compatibility.\nAdditional arbitrary fields for forwards compatibility.\nAdditional arbitrary fields for forwards compatibility.\nAdditional arbitrary fields for forwards compatibility.\nAdditional arbitrary fields for forwards compatibility.\nThe name of the package that contains the frame.\nAn optional list of packages that are installed in the SDK…\nPositional parameters to be inserted into the log entry.\nDetermines the parent of this transaction if any.\nDetermines the parent of this span, if any.\nParse an absolute URL from a string.\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nParse an absolute URL from a string and add params to its …\nReturn the password for this URL, if any, as a …\nReturn the path for this URL, as a percent-encoded ASCII …\nUnless this URL is cannot-be-a-base, return an iterator of …\nReturn an object with methods to manipulate this URL’s …\nA platform identifier for this event.\nA platform identifier for this event.\nLooks up a value by a JSON Pointer.\nLooks up a value by a JSON Pointer and returns a mutable …\nRemoves and returns the first element in the map. The key …\nRemoves and returns the last element in the map. The key …\nReturn the port number for this URL, if any.\nReturn the port number for this URL, or the default port …\nThe sources of the lines after the current line.\nThe sources of the lines after the current line.\nThe sources of the lines leading up to the current line.\nThe sources of the lines leading up to the current line.\nReturn this URL’s query string, if any, as a …\nParse the URL’s query string, if any, as …\nManipulate this URL’s query string, viewed as a sequence …\nOptionally the encoded query string.\nConstructs a double-ended iterator over a sub-range of …\nConstructs a mutable double-ended iterator over a …\nOptional raw stacktrace.\nAn optional raw stacktrace.\nThe number of consecutive successful check-ins that …\nOptional register values of the thread.\nA release identifier.\nA release identifier.\nThe release version string.\nRemoves a key from the map, returning the value at the key …\nRemoves a key from the map, returning the stored key and …\nOptionally HTTP request data to be sent along.\nOptionally HTTP request data to be sent along.\nRetains only the elements specified by the predicate.\nAn indicator if the os is rooted (mobile mostly).\nDetermines whether this span is generated in the same …\nThe monitor schedule configuration.\nReturn the scheme of this URL, lower-cased, as an ASCII …\nSDK metadata\nSDK metadata\nOptional system SDK information.\nThe internal name of the SDK\nAn optional logical clock.\nSerialize with Serde using the internal representation of …\nOptionally the server (or device) name of this event.\nOptionally the server (or device) name of this event.\nThe session identifier.\nChange this URL’s fragment identifier.\nChange this URL’s host.\nChange this URL’s host to the given IP address.\nChange this URL’s password.\nChange this URL’s path.\nChange this URL’s port number.\nChange this URL’s query string. If <code>query</code> is <code>None</code>, this …\nChange this URL’s scheme.\nChange this URL’s username.\nOptional POSIX signal number.\nGet a <code>Simple</code> formatter.\nSimulator/prod indicator.\nResolve a URL’s host and port number to <code>SocketAddr</code>.\nReorders the entries of all <code>Value::Object</code> nested within …\nThe ID of the trace event\nThe ID of the span\nThe collection of finished spans part of this transaction.\nSplits the collection into two at the given key. Returns …\nIf the thread suspended or crashed a stacktrace can be …\nOptionally the stacktrace.\nA single stacktrace (deprecated)\nThe timestamp at the measuring of the span started.\nThe start time of the transaction.\nThe timestamp of when the session itself started.\nThe timestamp of when the session itself started.\nDescribes the status of the span (e.g. <code>ok</code>, <code>cancelled</code>, etc.)\nDescribes the status of the span (e.g. <code>ok</code>, <code>cancelled</code>, etc.)\nStatus of this check-in. Defaults to <code>&quot;unknown&quot;</code>.\nThe status of the session.\nTotal storage size of the device in bytes.\nThe mach exception subcode.\nAre compute shaders available on the device?\nIs GPU draw call instancing supported?\nAre geometry shaders available on the device?\nIs ray tracing available on the device?\nThe potentially mangled name of the symbol as it appears …\nIf known the location of symbol.\nAn optional flag indicating a synthetic exception.\nOptional tags to be attached to the event.\nOptional tags to be attached to the span.\nOptional tags to be attached to the event.\nTakes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …\nSimplified template error location info\nOptional identifier referring to a thread.\nA list of threads.\nThe timestamp of the breadcrumb.  This is required.\nThe timestamp of when the event was created.\nThe timestamp at the measuring of the span finished.\nThe end time of the transaction.\nThe timestamp of when the session change event was created.\nThe timezone of the device.\ntz database style timezone string\nReturns the bytes of the UUID in little-endian order.\nReturns the four field values of the UUID in little-endian …\nAssuming the URL is in the <code>file</code> scheme or similar, convert …\nReturns a 128bit little-endian value containing the value.\nWrites the attachment and its headers to the provided …\nSerialize the Envelope into the given <code>Write</code>.\nDetermines which trace the transaction belongs to.\nDetermines which trace the span belongs to.\nThe transaction name of the event.\nTries to insert a key-value pair into the map, and returns …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nThe mechanism type identifier.\nThe type of the exception.\nThe type of the breadcrumb.\nThe special type of this attachment.\nReturns the name of the type on sentry.\nReturns the name of the type for sentry.\nReturns a <code>Cursor</code> pointing at the gap after the greatest key\nReturns a <code>CursorMut</code> pointing at the gap after the greatest …\nThe current URL of the request.\nGet a <code>Urn</code> formatter.\nHow much memory is usable for the app in bytes.\nOptionally user data to be sent along.\nOptionally user data to be sent along.\nThe user agent of the user. This data is not persisted but …\nReturn the username for this URL (typically the empty …\nA human readable username of the user.\nReturns the Envelopes Uuid, if any.\nThe unique UUID of the image.\nThe UUID of the associated proguard file.\nAn arbitrary (JSON) value.\nThe optional value of the exception.\nGets an iterator over the values of the map, in order by …\nThe values of the collection.\nGets a mutable iterator over the values of the map, in …\nOptional local variables.\nThe PCI vendor identifier of the graphics device.\nThe vendor name as reported by the graphics device.\nThe version of the SDK.\nThe version of the package.\nThe version of the operating system.\nThe version of the runtime.\nThe version of the browser.\nThe Version of the graphics device.\nthe major version of the SDK as integer or 0\nthe minor version of the SDK as integer or 0\nthe patch version of the SDK as integer or 0\nThe interval unit of the value.\nThe crontab syntax string defining the schedule.\nThe interval value.\nWrapper around <code>DebugId</code> for Breakpad formatting.\nUnique platform-dependent identifier of code files.\nUnique identifier for debug information files and their …\nIndicates an error parsing a <code>DebugId</code>.\nReturns the appendix part of the code module’s debug …\nReturns the string representation of this code identifier.\nReturns a wrapper which when formatted via <code>fmt::Display</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>CodeId</code> from a binary slice.\nParses a breakpad identifier from a string.\nConstructs a <code>DebugId</code> from a Microsoft little-endian GUID …\nConstructs a <code>DebugId</code> from its <code>uuid</code> and <code>appendix</code> parts.\nConstructs a <code>DebugId</code> from a PDB 2.0 timestamp and age.\nConstructs a <code>DebugId</code> from its <code>uuid</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this identifier is nil, i.e. it consists …\nReturns whether this identifier is nil, i.e. it is empty.\nReturns whether this identifier is from the PDB 2.0 format.\nConstructs a <code>CodeId</code> from its string representation.\nConstructs an empty debug identifier, containing only …\nConstructs an empty code identifier.\nReturns the UUID part of the code module’s …\nAn ordered map based on a B-Tree.\nA cursor over a <code>BTreeMap</code>.\nA cursor over a <code>BTreeMap</code> with editing operations.\nA cursor over a <code>BTreeMap</code> with editing operations, and …\nA view into a single entry in a map, which may either be …\nAn iterator produced by calling <code>extract_if</code> on BTreeMap.\nAn owning iterator over the entries of a <code>BTreeMap</code>, sorted …\nAn owning iterator over the keys of a <code>BTreeMap</code>.\nAn owning iterator over the values of a <code>BTreeMap</code>.\nAn iterator over the entries of a <code>BTreeMap</code>.\nA mutable iterator over the entries of a <code>BTreeMap</code>.\nAn iterator over the keys of a <code>BTreeMap</code>.\nAn ordered map based on a B-Tree.\nAn occupied entry.\nA view into an occupied entry in a <code>BTreeMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nAn iterator over a sub-range of entries in a <code>BTreeMap</code>.\nA mutable iterator over a sub-range of entries in a …\nError type returned by <code>CursorMut::insert_before</code> and …\nA vacant entry.\nA view into a vacant entry in a <code>BTreeMap</code>. It is part of …\nAn iterator over the values of a <code>BTreeMap</code>.\nA mutable iterator over the values of a <code>BTreeMap</code>.\nProvides in-place mutable access to an occupied entry …\nReturns a read-only cursor pointing to the same location …\nReturns a read-only cursor pointing to the same location …\nCreates an empty <code>btree_map::Iter</code>.\nCreates an empty <code>btree_map::IterMut</code>.\nCreates an empty <code>btree_map::IntoIter</code>.\nCreates an empty <code>btree_map::Keys</code>.\nCreates an empty <code>btree_map::Values</code>.\nCreates an empty <code>btree_map::ValuesMut</code>.\nCreates an empty <code>btree_map::IntoKeys</code>.\nCreates an empty <code>btree_map::IntoValues</code>.\nCreates an empty <code>btree_map::Range</code>.\nCreates an empty <code>btree_map::RangeMut</code>.\nThe entry in the map that was already occupied.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry with the <code>OccupiedEntry</code>’s key,\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the key.\nConverts the entry into a mutable reference to its value.\nReturns a reference to this entry’s key.\nGets a reference to the key that would be used when …\nGets a reference to the key in the entry.\nAdvances the cursor to the next gap, returning the key and …\nAdvances the cursor to the next gap, returning the key and …\nAdvances the cursor to the next gap, returning the key and …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nReturns a reference to the key and value of the next …\nReturns a reference to the key and value of the next …\nReturns a reference to the key and value of the next …\nReturns a reference to the key and value of the previous …\nReturns a reference to the key and value of the previous …\nReturns a reference to the key and value of the previous …\nAdvances the cursor to the previous gap, returning the key …\nAdvances the cursor to the previous gap, returning the key …\nAdvances the cursor to the previous gap, returning the key …\nTakes the value of the entry out of the map, and returns …\nTake ownership of the key and value from the map.\nRemoves the next element from the <code>BTreeMap</code>.\nRemoves the next element from the <code>BTreeMap</code>.\nRemoves the preceding element from the <code>BTreeMap</code>.\nRemoves the preceding element from the <code>BTreeMap</code>.\nThe value which was not inserted, because the entry was …\nConverts the cursor into a <code>CursorMutKey</code>, which allows …\nRepresents a JSON array.\nRepresents a JSON boolean.\nA type that can be used to index into a <code>serde_json::Value</code>.\nRepresents a JSON key/value type.\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nRepresents a JSON string.\nRepresents any valid JSON value.\nMoves all elements from other into self, leaving other …\nRepresents the number as f64 if possible. Returns None …\nIf the <code>Number</code> is an integer, represent it as i128 if …\nIf the <code>Number</code> is an integer, represent it as i64 if …\nIf the <code>Number</code> is an integer, represent it as u128 if …\nIf the <code>Number</code> is an integer, represent it as u64 if …\nClears the map, removing all values.\nReturns true if the map contains a value for the specified …\nGets the given key’s corresponding entry in the map for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a finite <code>f64</code> to a <code>Number</code>. Infinite or NaN values …\nConverts an <code>i128</code> to a <code>Number</code>. Numbers smaller than …\nConverts a <code>u128</code> to a <code>Number</code>. Numbers greater than u64::MAX …\nInterpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.\nReturns a reference to the value corresponding to the key.\nReturns the key-value pair matching the given key.\nReturns a mutable reference to the value corresponding to …\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the map contains no elements.\nReturns true if the <code>Number</code> can be represented by f64.\nReturns true if the <code>Number</code> is an integer between <code>i64::MIN</code> …\nReturns true if the <code>Number</code> is an integer between zero and …\nGets an iterator over the entries of the map.\nGets a mutable iterator over the entries of the map.\nGets an iterator over the keys of the map.\nReturns the number of elements in the map.\nMakes a new empty Map.\nRemoves a key from the map, returning the value at the key …\nRemoves a key from the map, returning the stored key and …\nRetains only the elements specified by the predicate.\nSorts this map’s entries in-place using <code>str</code>’s usual …\nConvert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …\nGets an iterator over the values of the map.\nGets an iterator over mutable values of the map.\nMakes a new empty Map with the given initial capacity.\nLong running application session.\nType alias for before event/breadcrumb handlers.\nRepresents a single breadcrumb.\nThe Sentry Client.\nConfiguration settings for the client.\nArbitrary data passed by the caller, when starting a …\nA smart pointer to a span’s <code>data</code> field.\nIndicates very spammy debug information.\nA Sentry Envelope.\nAn error.\nSimilar to error but indicates a critical event that …\nThe central object that can manage scopes and clients.\nA Hub switch guard used to temporarily swap active hub in …\nInformational messages.\nIntegration abstraction.\nA helper trait that converts self into an Iterator of …\nHelper trait to convert a string into an <code>Option&lt;Dsn&gt;</code>.\nRepresents the level of severity of an event or breadcrumb.\nThe iterator type for the breadcrumbs.\nLots of short per-request sessions.\nHolds contextual data for the current scope.\nA scope guard.\nA future that binds a <code>Hub</code> to its execution.\nFuture extensions for Sentry.\nThe Session Mode of the SDK.\nA running Performance Monitoring Span.\nA <code>Span</code>.\nAn Iterator over HTTP header names and values needed for …\nA function to be run for each new transaction, to …\nA running Performance Monitoring Transaction.\nA <code>Transaction</code>.\nThe Transaction Context used to start a new Performance …\nA transaction context builder created by …\nIterable for a transaction’s <code>extra</code> field.\nA wrapper that groups a <code>Transaction</code> and a <code>Span</code> together.\nThe trait for transports.\nA factory creating transport instances.\nRepresents user info.\nA warning.\nDisable SSL verification.\nAdds an attachment to the scope\nRecords a breadcrumb by calling a function.\nAdd an event processor to the scope.\nAdds a configured integration to the options.\nApplies the contained scoped data to fill an event.\nApplies the contained scoped data to fill a transaction.\nAttaches stacktraces to messages.\nEnable Release Health Session tracking.\nCallback that is executed for each Breadcrumb being added.\nCallback that is executed before event sending.\nBinds a hub to the execution of this future.\nCreates a transaction context builder initialized with the …\nCaptures a <code>std::error::Error</code>.\nCaptures an event on the currently active client if any.\nCaptures an event and sends it to sentry.\nCaptures an arbitrary message.\nThe optional category of the breadcrumb.\nClear the scope.\nClears attachments from the scope\nDeletes current breadcrumbs from the scope.\nDrains all pending events and shuts down the transport …\nInvokes a function that can modify the current scope.\nCreates a new Transaction Context based on the distributed …\nCreates a new Transaction Context based on an existing …\nGiven some options creates a transport.\nGet the custom context of this Transaction.\nInserts a key-value pair into the custom context.\nUpdate the custom context of this Transaction.\nReturns an iterating accessor to the transaction’s <code>extra</code> …\nReturns a smart pointer to the span’s <code>data</code> field.\nArbitrary breadcrumb data that should be send along.\nEnables debug mode.\nWhether to add default integrations.\nReturns the DSN that constructed this client.\nThe DSN to use.  If not set the client is effectively …\nThe email address of the user.\nEnd the current Release Health Session.\nEnd the current Release Health Session with the given …\nThe environment to be sent with events.\nCreate a sentry <code>Event</code> from a <code>std::error::Error</code>.\nBorder frames which indicate a border from a backtrace to …\nFinishes building a transaction.\nFinishes the Transaction/Span.\nFinishes the Transaction.\nFinishes the Span.\nFlushes the transport queue if there is one.\nDrains all pending events without shutting down.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new Sentry client from a config.\nReturns the currently active span.\nGet the current span ID.\nSet the status of the Transaction/Span.\nGet the status of the Transaction.\nGet the status of the Span.\nGet the TransactionContext of the Transaction/Span.\nGet the TransactionContext of the Transaction.\nGet the TransactionContext of the Span.\nAn optional HTTP proxy to use.\nAn optional HTTPS proxy to use.\nThe ID of the user.\nModule prefixes that are never “in_app”.\nModule prefixes that are always considered “in_app”.\nA list of integrations to enable.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis converts the object into an optional breadcrumb.\nConverts the value into a <code>Result&lt;Option&lt;Dsn&gt;, E&gt;</code>.\nThe remote ip address of the user.\nQuick check to see if the client is enabled.\nGet the sampling decision for this Transaction/Span.\nGet the sampling decision for this Transaction.\nGet the sampling decision for this Span.\nIterate over the <code>extra</code> map of the transaction.\nReturns the headers needed for distributed tracing.\nReturns the headers needed for distributed tracing.\nReturns the headers needed for distributed tracing.\nReturns the last event ID captured.\nThe non optional level of the breadcrumb.  It defaults to …\nMaximum number of breadcrumbs. (defaults to 100)\nAn optional human readbale message for the breadcrumb.\nName of this integration.\nGet the name of this Transaction.\nSwaps the current thread’s Hub by the one provided and …\nCreates new Options.\nCreates a new bound future with a <code>Hub</code>.\nCreates a new Transaction Context with the given <code>name</code> and …\nCreates a new Transaction Context with the given <code>name</code>, <code>op</code>, …\nGet the operation of this Transaction.\nReturns the options of this client.\nAdditional arbitrary fields for forwards compatibility.\nParse the types name from <code>Debug</code> output.\nPrepares an event for transmission to sentry.\nThe Integrations Event Processor Hook.\nThe release to be sent with events.\nReturns the intended release for Sentry as an …\nRemoves a context for a key.\nRemoves a extra.\nRemoves a tag.\nThe sample rate for event submission. (0.0 - 1.0, defaults …\nReturns a random boolean with a probability defined by rate\nGet the sampling decision for this Transaction.\nIf turned on some default PII informat is attached.\nSends an <code>Envelope</code>.\nSends the specified <code>Envelope</code> to sentry.\nThe server name to be reported.\nDetermine how Sessions are being tracked.\nSets a context for a key.\nSet some extra information to be sent with this …\nSet some extra information to be sent with this Span.\nSet some extra information to be sent with this …\nSet some extra information to be sent with this …\nSet some extra information to be sent with this …\nSets a extra to a specific value.\nSets the fingerprint.\nSets a level override.\nSet the HTTP request information for this Transaction/Span.\nSet the HTTP request information for this Transaction.\nSet the HTTP request information for this Span.\nSet the sampling decision for this Transaction.\nSet the given <code>TransactionOrSpan</code> as the active span for …\nSet the status of the Transaction/Span.\nSet the status of the Transaction.\nSet the status of the Span.\nSet some extra information to be sent with this …\nSet some tag to be sent with this Span.\nSets a tag to a specific value.\nSets a tag to a specific value.\nSets a tag to a specific value.\nSets a tag to a specific value.\nSets the transaction.\nSets the user for the current scope.\nCalled whenever the integration is attached to a Client.\nInstructs the Transport to shut down.\nThe timeout on client drop for draining events on shutdown.\nGet the Span ID of this Transaction.\nStarts a new child Span with the given <code>op</code> and <code>description</code>.\nStarts a new child Span with the given <code>op</code> and <code>description</code>.\nStarts a new child Span with the given <code>op</code> and <code>description</code>.\nStart a new session for Release Health.\nStart a new Performance Monitoring Transaction.\nThe timestamp of the breadcrumb.  This is required.\nGet the Trace ID of this Transaction.\nThe sample rate for tracing transactions. (0.0 - 1.0, …\nIf given, called with a SamplingContext for each …\nThe transport to use.\nAutomatically trim backtraces of junk before sending. …\nThe type of the breadcrumb.\nRetrieves the user of the current scope.\nThe user agent that should be reported.\nA human readable username of the user.\nAdds a custom key and value to the transaction context.\nLooks up an integration on the current Hub.\nDefines the name of the transaction.\nDefines the operation of the transaction.\nCreates a new sentry client for the given options.\nDefines a parent span ID for the created transaction.\nDefines whether the transaction will be sampled.\nTemporarily pushes a scope for a single call optionally …\nDefines the span ID to be used when creating the …\nDefines the trace ID.\nRepresents an auth header.\nWrapper around <code>DebugId</code> for Breakpad formatting.\nUnique platform-dependent identifier of code files.\nVersion 8: Custom.\nVersion 2: DCE Security.\nUnique identifier for debug information files and their …\nRepresents a Sentry dsn.\nRaised if an empty value is parsed.\nReserved for future expansion.\nunencrypted HTTP scheme (should not be used)\nencrypted HTTPS scheme\nraised the project id is invalid.\nraised the scheme is invalid / unsupported.\nraised on completely invalid urls\nRaised if the version value is invalid\nVersion 1: Timestamp and node ID.\nThe “max” (all ones) UUID.\nVersion 3: MD5 hash.\nReserved by Microsoft for backward compatibility.\nRaised if the public key is missing entirely\nReserved by the NCS for backward compatibility.\nThe “nil” (all zeros) UUID.\nraised the project is is missing (first path component)\nraised if the username (public key) portion is missing.\nRaised if the auth header is not indicating sentry auth\nRepresents an auth header parsing error.\nIndicates an error parsing a <code>CodeId</code>.\nIndicates an error parsing a <code>DebugId</code>.\nRepresents a dsn url parsing error.\nRaised if a project ID cannot be parsed from a string.\nRepresents a project ID.\nAs described in the RFC 9562 Specification (default). (for …\nVersion 4: Random.\nRepresents the scheme of an url http/https.\nVersion 5: SHA-1 hash.\nVersion 6: Sortable Timestamp and node ID.\nVersion 7: Timestamp and random.\nA Universally Unique Identifier (UUID).\nThe reserved variants of UUIDs.\nThe version of the UUID, denoting the generating algorithm.\nReturns the client’s agent\nReturns the default port for this scheme.\nReturns the API URL for Envelope submission.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an auth header from key value pairs.\nCreates an auth header from a query string.\nReturns the host\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the authentication implies public auth (no …\nCreates a new project ID from its string representation. …\nReturns the path\nReturns the port\nReturns the project_id\nThis module exposes the types for the Sentry protocol in …\nReturns the public key\nReturns the public_key\nGenerates a random Uuid using a thread local RNG.\nReturns the scheme\nReturns the client’s secret if it authenticated with a …\nReturns secret_key\nReturns the submission API URL.\nReturns the timestamp the client defined\nConverts the dsn into an auth object.\nReturns the string representation of the project ID.\nReturns the protocol version the client speaks\nThe latest version of the protocol.\nThe current latest sentry protocol version.\nThe session had an unexpected abrupt termination (not …\nThe operation was aborted, typically due to a concurrency …\nRepresents an address.\nAlready exists (409)\nApplication data.\nHolds app information.\nApple debug images (machos).  This is currently also used …\nAn Apple crash report file that creates an error event and …\nRepresents an apple debug image in the debug meta.\nRepresents a JSON array.\nRepresents an attachment item.\n(default) A standard attachment without special meaning.\nAn Attachment Item.\nThe different types an attachment can have.\nThe IP address needs to be inferred from the user’s …\nRepresents a JSON boolean.\nRepresents a single breadcrumb.\nWeb browser data.\nHolds information about the web browser.\nPOSIX signal with optional extended data.\nThe operation was cancelled (typically by the user).\nInformation on the SDK client.\nRepresents an installed package relevant to the SDK.\nTyped contextual data.\nThe session resulted in an application crash.\nA Crontab schedule allows you to use a standard UNIX …\nError type for errors with parsing a crontab schedule\nUnrecoverable data loss or corruption\nDay Interval.\nDeadline expired before operation could complete.\nIndicates very spammy debug information.\nRepresents a debug image.\nRepresents debug meta information.\nDevice data.\nHolds device information.\nA Sentry Envelope.\nRaised if a envelope cannot be parsed from a given input.\nAn Envelope Item.\nAn Iterator over the items of an Envelope.\nAn error.\nCheck-in failed or otherwise had some issues.\nRepresents a full event for Sentry.\nAn Event Item.\nThe exact given IP address (v4 or v6).\nRepresents a single exception.\nThe session terminated normally.\nOperation was rejected because the system is not in a …\nSimilar to error but indicates a critical event that …\nRepresents a frame.\nGPU data\nGPU context describes the GPU of the device.\nHour Interval.\nCheck-in is expectred to complete.\nInformational messages.\nInteger representation for the thread id\nOther/generic 5xx.\nA Interval schedule allows you to configure a periodic …\nClient specified an invalid argument. 4xx.\nInvalid envelope header\nInvalid item header\nInvalid item payload\nAn IP address, either IPv4, IPv6 or Auto.\nLandscape device orientation.\nRepresents the level of severity of an event or breadcrumb.\nRepresents a log entry message.\nMach exception information.\nAn ordered map based on a B-Tree.\nRepresents a single exception.\nOperating system or runtime meta information to an …\nA minidump file that creates an error event and is …\nMinute Interval.\nMonitor did not check in on time.\nMissing envelope header\nMissing item header\nMissing newline after header or payload\nThe monitor check-in payload.\nA MonitorCheckIn item.\nRepresents the status of the monitor check-in\nThe monitor configuration playload for upserting monitors …\nThe unit for the interval schedule type\nConfiguration object of the monitor schedule.\nMonth Interval.\n404 Not Found. Some requested entity (file or directory) …\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nThe operation completed successfully.\nCheck-in had no issues during execution.\nThe session is healthy.\nOptional device screen orientation\nOperating system data.\nHolds operating system information.\nGeneric other context data.\nOperation was attempted past the valid range.\nAn error used when parsing <code>Level</code>.\nAn error used when parsing <code>SessionStatus</code>.\nAn error used when parsing <code>SpanStatus</code>.\n403 Forbidden\nPortrait device orientation.\nPOSIX signal with optional extended data.\nA reference to a proguard debug file.\nRepresents a proguard mapping file reference.\nThis is a sentinel item used to <code>filter</code> raw envelopes.\nRepresents a register value.\nRepresents http request data.\n429 Too Many Requests\nRuntime data.\nHolds information about the runtime.\nAn aggregation grouped by <code>started</code> and <code>distinct_id</code>.\nAn Aggregation of Release Health Sessions\nA Session Aggregates Item.\nAdditional attributes for Sessions.\nThe Status of a Release Health Session.\nA Release Health Session.\nA Session Item.\nRepresents a tracing span.\nHolds the identifier for a Span\nThe status of a Span.\nRepresents a stacktrace.\nString representation for the thread id\nRepresents a JSON string.\nSymbolic (new style) debug infos.\nRepresents a symbolic debug image.\nHolds information about the system SDK.\nRepresents template debug info.\nRepresents a single thread.\nRepresents a thread id.\nTracing data.\nHolds information about a tracing event.\nHolds the identifier for a Trace\nRepresents a tracing transaction.\nA Transaction Item.\n401 Unauthorized (actually does mean unauthenticated …\n503 Service Unavailable\nUnexpected end of file\n501 Not Implemented\nNo status was passed.\nUnknown. Any non-standard HTTP status code.\nAn XML file containing UE4 crash meta data. During event …\nA plain-text log file obtained from UE4 crashes. During …\nA parsed URL record.\nRepresents user info.\nA Universally Unique Identifier (UUID).\nRepresents any valid JSON value.\nA wrapper type for collections with attached meta data.\nA warning.\nImage used for WebAssembly. Their structure is identical …\nRepresents a WebAssembly debug image.\nWeek Interval.\nYear Interval.\nThe number of abnormal sessions that occurred.\nIf known the absolute path.\nIf known the absolute path.\nOptionally changes the addressing mode. The default value …\nA batch of sessions that were started.\nThe device low-level API type. Examples: “Apple Metal” …\nInternal build ID as it appears on the platform.\nOptional app identifier (dotted bundle id).\nApplication name as it appears on the platform.\nOptional start time of the app.\nApplication version as it appears on the platform.\nThe optional CPU architecture of the debug image.\nThe optional CPU architecture of the debug image.\nThe native cpu architecture of the device.\nThe session event attributes.\nThe shared session event attributes.\nThe current battery level (0-100).\nOptionally an indicator when the device was booted.\nList of breadcrumbs to send along.\nThe actual attachment data.\nThe internal build number of the operating system.\nOptional build identicator.\nThe optional category of the breadcrumb.\nUnique identifier of this check-in.\nHow long (in minutes) after the expected check-in time …\nThe mach exception code.\nAn optional signal code present on Apple systems.\nThe absolute URL to the wasm file. This helps to locate …\nOptional identifier of the code file.\nIdentifier of the WASM file. It is the value of the …\nOptional name of the errno constant.\nThe column number if known.\nThe column number if known.\nThe Content Type of the attachment\nThe current line as source.\nThe current line as source.\nOptional contexts.\nOptional contexts.\nAn encoded cookie string if available.\nAlternatively a macho cpu subtype.\nAlternatively a macho cpu type.\nTrue if this is the crashed thread.\nThe number of crashed sessions that occurred.\nThe culprit of the event.\nIndicates that the thread was not suspended when the event …\nAdditional attributes depending on the mechanism type.\nArbitrary breadcrumb data that should be send along.\nOptionally some associated request data (human readable)\nOptional extra information to be sent with the span.\nPath and name of the debug companion file.\nName or absolute URL to the WASM file containing debug …\nIdentifier of the dynamic library or executable.\nDebug meta information.\nRepresents a debug ID.\nHuman readable detail description.\nHuman readable detail description.\nLonger description of the span’s operation, which …\nOptional device app hash (app specific device ID)\nAn optional distribution identifier.\nThe distinct identifier. Should be device or user ID.\nThe distinct identifier.\nThe version of the graphic device driver.\nDuration of this check-in since it has started in seconds.\nAn optional duration of the session so far.\nThe email address of the user.\nOptionally a CGI/WSGI etc. environment dictionary.\nAn optional environment identifier.\nAn optional environment identifier.\nThe environment to associate the check-in with.\nThe environment identifier.\nOptional ISO C standard error code.\nThe number of errored sessions that occurred, not …\nThe number of errors that occurred.\nThe ID of the event\nThe ID of the event\nThe mach exception type.\nExceptions to be attached (one or multiple if chained).\nThe number of exited sessions that occurred.\nFree size of the attached external storage in bytes (eg: …\nTotal size of the attached external storage in bytes (eg: …\nOptional extra information to be sent with the event.\nOptional extra information to be sent with the event.\nThe number of consecutive failed/error check-ins that …\nThe family of the device model.\nThe filename (basename only).\nThe filename (basename only).\nThe filename of the attachment.\nAn optional fingerprint configuration to override the …\nThe list of frames in the stacktrace.\nOptionally a segment of frames removed (<code>start</code>, <code>end</code>).\nHow much memory is still available in bytes.\nHow much storage is free in bytes.\nThe name of the function is known.\nApproximate “shader capability” level of the graphics …\nAn optional flag indicating whether this exception was …\nHTTP request headers.\nAn optional link to online resources describing this error.\nThe optional ID of the thread (usually an integer)\nThe ID of the user.\nUnique debug identifier of the image.\nThe PCI identifier of the graphics device.\nIf known the location of the image.\nThe starting address of the image.\nStarting memory address of the image (required).\nThe size of the image in bytes.\nSize of the image in bytes (required).\nThe address where the image is loaded at runtime.\nLoading address in virtual memory.\nA list of debug information files.\nIn-app indicator.\nA flag that indicates that this is the initial …\nIf known the location of the instruction.\nAn optional list of integrations that are enabled in this …\nThe remote ip address of the user.\nThe ip address of the user. This data is not persisted but …\nThe current kernel version.\nThe non optional level of the breadcrumb.  It defaults to …\nThe level of the event (defaults to error)\nThe line number if known.\nThe line number if known.\nOptionally a log entry that can be used instead of the …\nOptionally the name of the logger that created this event.\nOptional mach exception information.\nThe internally used arbitrary data map type.\nHow long (in minutes) is the check-in allowed to run for in\nLargest size of a texture that is supported by the …\nThe mechanism of the exception including OS specific …\nTotal memory available in byts.\nThe total GPU memory available in Megabytes.\nThe log message with parameters replaced by <code>%s</code>\nAn optional human readbale message for the breadcrumb.\nA message to be sent with the event.\nOperating system or runtime meta information.\nThe HTTP request method.\nThe device model (human readable).\nThe device model (internal identifier).\nThe name of the module the frame is contained in.\nAn optional module for this exception.\nOptionally a name to version mapping of installed modules.\nMonitor configuration to support upserts. When provided a …\nIdentifier of the monitor for this check-in.\nWhether the GPU has multi-threaded rendering or not.\nThe optional name of the thread.\nOptional name of the errno constant.\nOptional name of the mach exception.\nOptional name of the errno constant.\nThe name of the debug image (usually filename)\nPath and name of the image file (required).\nThe name of the debug image (usually filename)\nThe name of the SDK.\nThe name of the package installed.\nThe name of the device.\nThe name of the operating system.\nThe name of the runtime (for instance JVM).\nThe name of the browser (for instance “Chrome”).\nThe name of the graphics device.\nThe transaction name.\nThe Non-Power-Of-Two-Support support.\nThe error code as specified by ISO C99, POSIX.1-2001 or …\nThe POSIX signal number.\nShort code identifying the type of operation the …\nShort code identifying the type of operation the span is …\nThe current screen orientation.\nAdditional arbitrary fields for forwards compatibility.\nAdditional arbitrary fields for forwards compatibility.\nAdditional arbitrary fields for forwards compatibility.\nAdditional arbitrary fields for forwards compatibility.\nAdditional arbitrary fields for forwards compatibility.\nAdditional arbitrary fields for forwards compatibility.\nAdditional arbitrary fields for forwards compatibility.\nThe name of the package that contains the frame.\nAn optional list of packages that are installed in the SDK…\nPositional parameters to be inserted into the log entry.\nDetermines the parent of this transaction if any.\nDetermines the parent of this span, if any.\nA platform identifier for this event.\nA platform identifier for this event.\nThe sources of the lines after the current line.\nThe sources of the lines after the current line.\nThe sources of the lines leading up to the current line.\nThe sources of the lines leading up to the current line.\nOptionally the encoded query string.\nOptional raw stacktrace.\nAn optional raw stacktrace.\nThe number of consecutive successful check-ins that …\nOptional register values of the thread.\nA release identifier.\nA release identifier.\nThe release version string.\nOptionally HTTP request data to be sent along.\nOptionally HTTP request data to be sent along.\nAn indicator if the os is rooted (mobile mostly).\nDetermines whether this span is generated in the same …\nThe monitor schedule configuration.\nSDK metadata\nSDK metadata\nOptional system SDK information.\nThe internal name of the SDK\nAn optional logical clock.\nOptionally the server (or device) name of this event.\nOptionally the server (or device) name of this event.\nThe session identifier.\nOptional POSIX signal number.\nSimulator/prod indicator.\nThe ID of the trace event\nThe ID of the span\nThe collection of finished spans part of this transaction.\nIf the thread suspended or crashed a stacktrace can be …\nOptionally the stacktrace.\nA single stacktrace (deprecated)\nThe timestamp at the measuring of the span started.\nThe start time of the transaction.\nThe timestamp of when the session itself started.\nThe timestamp of when the session itself started.\nDescribes the status of the span (e.g. <code>ok</code>, <code>cancelled</code>, etc.)\nDescribes the status of the span (e.g. <code>ok</code>, <code>cancelled</code>, etc.)\nStatus of this check-in. Defaults to <code>&quot;unknown&quot;</code>.\nThe status of the session.\nTotal storage size of the device in bytes.\nThe mach exception subcode.\nAre compute shaders available on the device?\nIs GPU draw call instancing supported?\nAre geometry shaders available on the device?\nIs ray tracing available on the device?\nThe potentially mangled name of the symbol as it appears …\nIf known the location of symbol.\nAn optional flag indicating a synthetic exception.\nOptional tags to be attached to the event.\nOptional tags to be attached to the span.\nOptional tags to be attached to the event.\nSimplified template error location info\nOptional identifier referring to a thread.\nA list of threads.\nThe timestamp of the breadcrumb.  This is required.\nThe timestamp of when the event was created.\nThe timestamp at the measuring of the span finished.\nThe end time of the transaction.\nThe timestamp of when the session change event was created.\nThe timezone of the device.\ntz database style timezone string\nDetermines which trace the transaction belongs to.\nDetermines which trace the span belongs to.\nThe transaction name of the event.\nThe mechanism type identifier.\nThe type of the exception.\nThe type of the breadcrumb.\nThe special type of this attachment.\nThe current URL of the request.\nHow much memory is usable for the app in bytes.\nOptionally user data to be sent along.\nOptionally user data to be sent along.\nThe user agent of the user. This data is not persisted but …\nA human readable username of the user.\nThe unique UUID of the image.\nThe UUID of the associated proguard file.\nAn arbitrary (JSON) value.\nThe optional value of the exception.\nThe values of the collection.\nOptional local variables.\nThe PCI vendor identifier of the graphics device.\nThe vendor name as reported by the graphics device.\nThe version of the SDK.\nThe version of the package.\nThe version of the operating system.\nThe version of the runtime.\nThe version of the browser.\nThe Version of the graphics device.\nthe major version of the SDK as integer or 0\nthe minor version of the SDK as integer or 0\nthe patch version of the SDK as integer or 0\nThe interval unit of the value.\nThe crontab syntax string defining the schedule.\nThe interval value.\nWrapper around <code>DebugId</code> for Breakpad formatting.\nUnique platform-dependent identifier of code files.\nUnique identifier for debug information files and their …\nIndicates an error parsing a <code>DebugId</code>.\nAn ordered map based on a B-Tree.\nA cursor over a <code>BTreeMap</code>.\nA cursor over a <code>BTreeMap</code> with editing operations.\nA cursor over a <code>BTreeMap</code> with editing operations, and …\nA view into a single entry in a map, which may either be …\nAn iterator produced by calling <code>extract_if</code> on BTreeMap.\nAn owning iterator over the entries of a <code>BTreeMap</code>, sorted …\nAn owning iterator over the keys of a <code>BTreeMap</code>.\nAn owning iterator over the values of a <code>BTreeMap</code>.\nAn iterator over the entries of a <code>BTreeMap</code>.\nA mutable iterator over the entries of a <code>BTreeMap</code>.\nAn iterator over the keys of a <code>BTreeMap</code>.\nAn ordered map based on a B-Tree.\nAn occupied entry.\nA view into an occupied entry in a <code>BTreeMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nAn iterator over a sub-range of entries in a <code>BTreeMap</code>.\nA mutable iterator over a sub-range of entries in a …\nError type returned by <code>CursorMut::insert_before</code> and …\nA vacant entry.\nA view into a vacant entry in a <code>BTreeMap</code>. It is part of …\nAn iterator over the values of a <code>BTreeMap</code>.\nA mutable iterator over the values of a <code>BTreeMap</code>.\nThe entry in the map that was already occupied.\nThe value which was not inserted, because the entry was …\nRepresents a JSON array.\nRepresents a JSON boolean.\nA type that can be used to index into a <code>serde_json::Value</code>.\nRepresents a JSON key/value type.\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nRepresents a JSON string.\nRepresents any valid JSON value.\nInterpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.\nConvert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …")