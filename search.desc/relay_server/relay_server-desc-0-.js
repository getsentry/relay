searchState.loadedDescShard("relay_server", 0, "The Sentry relay server application.\nA stack-like data structure that holds <code>Envelope</code>s.\nThe error type that is returned when an error is …\nAn enveloper buffer that uses in-memory envelopes stacks.\nStruct that composes a <code>Config</code> and <code>MemoryStat</code> and provides …\nWrapper which hides the <code>Arc</code> and exposes utils method to …\nPolymorphic envelope buffering interface.\nAn enveloper buffer that uses sqlite envelopes stacks.\nAn <code>EnvelopeStack</code> that is implemented on an SQLite database.\nStruct that offers access to a SQLite-based store of …\nChecks if the used memory is below both percentage and …\nChecks if the used memory (in bytes) is below the …\nChecks if the used percentage of memory is below the …\nReturns the current memory data without instantiating …\nDeletes and returns at most <code>limit</code> <code>Envelope</code>s from the …\nPersists all envelopes in the <code>EnvelopeStack</code>s to external …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates either a memory-based or a disk-based envelope …\nReturns <code>true</code> whether the buffer has capacity to accept new …\nInitializes the envelope buffer.\nInserts one or more envelopes into the database.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the implementation stores all envelopes in …\nReturns the total number of envelopes that have been …\nManaged containers and utilities to ensure outcomes are …\nMarks a project as ready or not ready.\nMarks a stack as seen.\nReturns a copy of the most up-to-date memory data.\nCreates a new empty <code>SqliteEnvelopeStack</code>.\nInitializes the <code>SqliteEnvelopeStore</code> with a supplied <code>Pool</code>.\nCreates an instance of <code>MemoryStat</code> and obtains the current …\nCreate an instance of <code>MemoryChecker</code>.\nPeeks the <code>Envelope</code> on top of the stack.\nReturns a reference to the next-in-line envelope.\nPops the <code>Envelope</code> on top of the stack.\nPops the next-in-line envelope.\nPrepares the <code>SqliteEnvelopeStore</code> by running all the …\nReturns a set of project key pairs, representing all the …\nPushes an <code>Envelope</code> on top of the stack.\nAdds an envelope to the buffer.\nRuns a relay web server and spawns all internal worker …\nShuts down the <code>PolymorphicEnvelopeBuffer</code>.\nReturns the total count of envelopes stored in the …\nReturns the total number of bytes that the spooler storage …\nReturns an approximate measure of the used size of the …\nA counted item.\nDrop the item and log an outcome for it.\nDrop the item without logging an outcome.\nProduced error, without attached outcome.\nError emitted when converting a <code>ManagedEnvelope</code> and a …\nRepresents the decision on whether or not to keep an …\nKeep the item.\nThe <code>Managed</code> wrapper ensures outcomes are correctly emitted …\nTracks the lifetime of an <code>Envelope</code> in Relay.\nExtension trait for Results, which adds convenience …\nAn error which can be extracted into an outcome.\nA list of data categories and amounts.\nA record keeper makes sure modifications done on a <code>Managed</code> …\nA wrapper type which ensures outcomes have been emitted …\nIterator returned by <code>Managed::split</code>.\nA wrapper for <code>ManagedEnvelope</code> with assigned processing …\nAccepts the envelope and drops the internal managed …\nAccepts the item of this managed instance.\nAccepts the envelope and drops the context.\nReturns the time elapsed in seconds since the envelope was …\nConsumes the error and returns an outcome and <code>Self::Error</code>.\nDrops every item in the envelope.\nReturns a reference to the contained <code>Envelope</code>.\nReturns a mutable reference to the contained <code>Envelope</code>.\nReturns estimated size of this envelope.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new managed instance with a <code>value</code> from a …\nRejects the entire <code>Managed</code> instance with an internal error.\nRejects an item with an internal error.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes itself returning the managed envelope.\nExtracts the underlying error.\nChanges the typed of the current envelope to processed.\nConverts current managed envelope into processed envelope.\nMarking a data category as lenient exempts this category …\nMaps a <code>Managed&lt;T&gt;</code> to <code>Managed&lt;S&gt;</code> by applying the mapping …\nMaps the rejected error to a different error.\nReturns the contained original request meta.\nGives mutable access to the contained value to modify it.\nModifies the expected count for a category.\nComputes a managed envelope from the given envelope and …\nRejects an item if the passed result is an error and …\nReturns the partition key, which is set on upstream …\nReturns the contained item quantities.\nOriginal received timestamp.\nReturns the time at which the envelope was received at …\nReject the entire <code>Managed</code> instance with <code>E</code>.\nRecords rejection outcomes for all items stored in this …\nRejects the entire <code>Managed</code> instance.\nRejects an item with an error.\nRemoves event item(s) and logs an outcome.\nFilters individual items and emits outcomes for them if …\nRetains or drops items based on the <code>ItemAction</code>.\nFilters individual items and emits outcomes for them if …\nRe-scopes this context to the given scoping.\nScoping information stored in this context.\nReturns scoping stored in this context.\nSets a new <code>Self::partition_key</code>.\nSplits <code>Self</code> into a variable amount if individual items.\nSplits <code>Self</code> into two other <code>Managed</code> items.\nSplits <code>Self</code> into a variable amount if individual items.\nRecords an outcome scoped to this envelope’s context.\nAccepts the item of this managed instance.\nMaps a <code>Managed&lt;T&gt;</code> to <code>Managed&lt;S&gt;</code> by applying the mapping …\nGives mutable access to the contained value to modify it.\nUpdate the context with envelope information.\nWraps the error of the <code>Result</code> with an outcome.\nCreates another <code>Managed</code> instance, with a new value but …")