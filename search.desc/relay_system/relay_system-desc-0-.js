searchState.loadedDescShard("relay_system", 0, "Foundational system components for Relay’s services.\nThe address of a <code>Service</code>.\nMessage response resulting in an asynchronous <code>Request</code>.\nA channel that broadcasts values to attached senders.\nThe request when sending an asynchronous message to a …\nVariation of <code>AsyncResponse</code> that efficiently broadcasts …\nSends a message response from a service back to the …\nConfigures a Relay <code>Runtime</code>.\nService to start and gracefully stop the system runtime.\nDeclares a message as part of an <code>Interface</code>.\nShut down gracefully within the configured timeout.\nHandle to the <code>Runtime</code>.\nShut down immediately without finishing pending work.\nA message interface for services.\nThe interface of messages this service implements.\nResponse behavior of an <code>Interface</code> message.\nA future that tracks metrics.\nMessage response for fire-and-forget messages with no …\nThe type returned from <code>Addr::send</code>.\nThe raw metrics extracted from a <code>MonitoredFuture</code>.\nInbound channel for messages sent through an <code>Addr</code>.\nAn address to a <code>Service</code> implementing any interface that …\nThe request when sending an asynchronous message to a …\nThe behavior declaring the return value when sending this …\nA Relay async runtime.\nHandle to the <code>Runtime</code>’s metrics.\nAn error when sending a message to a service fails.\nSends a message response from a service back to the …\nSends responses from the service back to the waiting …\nAn asynchronous unit responding to messages.\nThe service failed.\nA per runtime unique identifier for a started service.\nAn owned handle to await the termination of a service.\nCollected metrics of a single service.\nType erased <code>Service</code>.\nSpawns and keeps track of running services.\nThe <code>ServiceSpawn</code> trait allows for starting a <code>Service</code> on an …\nExtension trait for <code>ServiceSpawn</code>, providing more …\nA <code>ServiceError</code> without the service error/panic.\nA companion handle to <code>ServiceJoinHandle</code>.\nA point in time snapshot of all started services and their …\nShutdown request message sent by the <code>Controller</code> to …\nNotifies a service about an upcoming shutdown.\nDetermines how to shut down the Relay system.\nAn identifier for tasks spawned by <code>spawn()</code>, used to log …\nA <code>ServiceSpawn</code> implementation which spawns a service on …\nAttaches a sender of another message to this channel to …\nRuns a future to completion on this runtime.\nReturns the number of tasks currently scheduled in the …\nReturns the number of times that tasks have been forced to …\nCreates the configured <code>Runtime</code>.\nCreates a <code>Builder</code> to create and configure a new runtime.\nCreates an unbounded channel for communicating with a …\nReturns the response channel for an interface message.\nReturns all service metrics of all currently running …\nCustom address used for testing.\nDummy address used for testing.\nWait for the shutdown and timeout to complete.\nCreate a task ID based on the service’s name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts the message into the service interface.\nReturns the current shutdown state.\nReturns a <code>Handle</code> to this runtime.\nReturns a for this service unique instance id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a channel from this sender that can be shared with …\nConsumes the error and returns the panic that caused it.\nReturns <code>true</code> if there are requests waiting for this …\nReturns wether the queue is currently empty.\nReturns <code>true</code> if the service has finished.\nReturns <code>true</code> if the service has finished.\nReturns true if the error was caused by a panic.\nReturns true if the error was caused by a panic.\nReturns an iterator of all service identifiers and their …\nAwaits until all services have finished.\nReturns the current queue size.\nConfigures the amount of threads in the dynamic thread …\nProvides access to the raw metrics tracked in this monitor.\nReturns a new <code>RuntimeMetrics</code> handle for this runtime.\nReturns a unique name for this service implementation.\nReturns a unique name for this service implementation.\nReturns the name of the service.\nReturns the runtime name.\nReturns the name of the service.\nCreates a new bundled type erased <code>Service</code>, that can be …\nCreates a standalone channel.\nWait for a shutdown.\nReturns the amount of currently alive tasks in the runtime.\nReturns the number of additional threads spawned by the …\nReturns the number of idle threads, which have spawned by …\nReturns the amount of current threads idle.\nReturns the number of worker threads used by the runtime.\nAmount of times the service was polled.\nAmount of times the service was polled.\nReturns a handle that can receive a given message …\nReceives the next value for this receiver.\nDefines the main task of this service.\nSends the response value and closes the <code>Request</code>.\nSends a message to the service and returns the response.\nSends a message to the service and returns the response.\nSends a value to all attached senders and closes the …\nImmediately resolve a ready value.\nReturns a new unique <code>ServiceSet</code> to spawn services and …\nManually initiates the shutdown process of the system.\nReturns a handle to receive shutdown notifications.\nSpawns a new asynchronous task, returning a <code>JoinHandle</code> for …\nSpawns an instrumented task with an automatically …\nSpawns a new asynchronous task in a specific runtime, …\nStarts a service and starts tracking its join handle, …\nStarts a controller that monitors shutdown signals.\nStarts the service in the current runtime and returns an …\nStarts the service in the current runtime and returns an …\nStarts the service on the executor.\nStarts a service and starts tracking its join handle, …\nConfigures the idle timeout of threads in the dynamic …\nThe timeout for this shutdown. <code>None</code> indicates an immediate …\nTotal amount of time the service was busy.\nThe total time the service spent in its poll function.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nEstimated utilization percentage <code>[0-100]</code>\nApproximate utilization of the service based on its …\nReturns the number of tasks currently scheduled in the …\nReturns the number of tasks scheduled from <strong>within</strong> the …\nReturns the mean duration of task polls, in nanoseconds.\nReturns the number of times the given worker thread …\nReturns the number of times the given worker thread …\nReturns the total number of times the given worker thread …\nReturns the number of tasks the given worker thread has …\nReturns the number of tasks the given worker thread stole …\nReturns the number of times the given worker thread stole …\nConfigures the amount of worker threads available to the …\nReturns the amount of time the given worker thread has …\nWraps a future with the <code>MonitoredFuture</code>.\nWraps a future with the <code>MonitoredFuture</code>.")